
twoCanGateway_G0B1CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d60  08008d60  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d68  08008d68  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08008d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  20000168  08008ed8  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e74  08008ed8  00021e74  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0c2  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004175  00000000  00000000  0003d252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  00042968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a24  00000000  00000000  00043d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca94  00000000  00000000  0004a784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000beb9e  00000000  00000000  00067218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  00125e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000168 	.word	0x20000168
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008924 	.word	0x08008924

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000016c 	.word	0x2000016c
 8000100:	08008924 	.word	0x08008924

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <Init_Basic_App>:
//  Parameters  : void
//  Returns     :
//  Function    :
/*--------------------------------------------------------*/
void Init_Basic_App()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
//	Init_Eeprom();
//
//	Read_All_Eeprom();

	Init_CanA();
 8000644:	f000 f806 	bl	8000654 <Init_CanA>

	Init_CanB();
 8000648:	f000 f850 	bl	80006ec <Init_CanB>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <Init_CanA>:
//  Parameters  : void
//  Returns     :
//  Function    :
--------------------------------------------------------*/
void Init_CanA()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

	// filter
    // sonra filtre konulabilir. stm32 default olarak herhangi bir filtre ile eşleşmeyen mesajları FIFO 0 'a atmaktadır.
	// projede "hdcan1 FIFO 0 hdcan2 icin FIFO 1" kullanılacagı icin hdcan1 icin ayar yapmaya gerek yoktur.

	bufTxHdr_A.Identifier          = 0x123;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <Init_CanA+0x84>)
 800065a:	2224      	movs	r2, #36	; 0x24
 800065c:	32ff      	adds	r2, #255	; 0xff
 800065e:	601a      	str	r2, [r3, #0]
	bufTxHdr_A.IdType              = FDCAN_STANDARD_ID;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <Init_CanA+0x84>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
	bufTxHdr_A.TxFrameType         = FDCAN_DATA_FRAME;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <Init_CanA+0x84>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
	bufTxHdr_A.DataLength          = FDCAN_DLC_BYTES_8;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <Init_CanA+0x84>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0312      	lsls	r2, r2, #12
 8000672:	60da      	str	r2, [r3, #12]
	bufTxHdr_A.ErrorStateIndicator = FDCAN_ESI_PASSIVE;  //...
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <Init_CanA+0x84>)
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	0612      	lsls	r2, r2, #24
 800067a:	611a      	str	r2, [r3, #16]
	bufTxHdr_A.BitRateSwitch       = FDCAN_BRS_OFF;      //...
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <Init_CanA+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
	bufTxHdr_A.FDFormat            = FDCAN_CLASSIC_CAN;  //...
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <Init_CanA+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
	bufTxHdr_A.TxEventFifoControl  = FDCAN_NO_TX_EVENTS; //...
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <Init_CanA+0x84>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
	bufTxHdr_A.MessageMarker       = 0;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <Init_CanA+0x84>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

    if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <Init_CanA+0x88>)
 8000696:	0018      	movs	r0, r3
 8000698:	f001 f9ae 	bl	80019f8 <HAL_FDCAN_Start>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d005      	beq.n	80006ac <Init_CanA+0x58>
    {
  	  dbgPrint("ERROR: hfdcan1, HAL_FDCAN_Start\n");
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <Init_CanA+0x8c>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f8ba 	bl	800081c <dbgPrint>
  	  Error_Handler();
 80006a8:	f000 fc2e 	bl	8000f08 <Error_Handler>
    }

    // Enable interrupt, FIFO0,  FDCAN1, new data
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <Init_CanA+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	2101      	movs	r1, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fadf 	bl	8001c76 <HAL_FDCAN_ActivateNotification>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d005      	beq.n	80006c8 <Init_CanA+0x74>
    {
      dbgPrint("ERROR: hfdcan1, HAL_FDCAN_ActivateNotification\n");
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <Init_CanA+0x90>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f8ac 	bl	800081c <dbgPrint>
      Error_Handler();
 80006c4:	f000 fc20 	bl	8000f08 <Error_Handler>
    }

    debugPrint("Init_CanA OK\n");
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <Init_CanA+0x94>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f8a6 	bl	800081c <dbgPrint>
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000338 	.word	0x20000338
 80006dc:	20000184 	.word	0x20000184
 80006e0:	0800893c 	.word	0x0800893c
 80006e4:	08008960 	.word	0x08008960
 80006e8:	08008990 	.word	0x08008990

080006ec <Init_CanB>:
//  Parameters  : void
//  Returns     :
//  Function    :
--------------------------------------------------------*/
void Init_CanB()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af02      	add	r7, sp, #8

	// can init
//	MX_FDCAN1_Init();

	// filter
    if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_ACCEPT_IN_RX_FIFO1, FDCAN_ACCEPT_IN_RX_FIFO1, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)!= HAL_OK)
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <Init_CanB+0xc0>)
 80006f4:	2300      	movs	r3, #0
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	2201      	movs	r2, #1
 80006fc:	2101      	movs	r1, #1
 80006fe:	f001 f94b 	bl	8001998 <HAL_FDCAN_ConfigGlobalFilter>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d005      	beq.n	8000712 <Init_CanB+0x26>
    {
  	  dbgPrint("ERROR: hfdcan2, HAL_FDCAN_ConfigGlobalFilter\n");
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <Init_CanB+0xc4>)
 8000708:	0018      	movs	r0, r3
 800070a:	f000 f887 	bl	800081c <dbgPrint>
  	  Error_Handler();
 800070e:	f000 fbfb 	bl	8000f08 <Error_Handler>
    }


    // txheader
	bufTxHdr_B.Identifier          = 0x123;
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <Init_CanB+0xc8>)
 8000714:	2224      	movs	r2, #36	; 0x24
 8000716:	32ff      	adds	r2, #255	; 0xff
 8000718:	601a      	str	r2, [r3, #0]
	bufTxHdr_B.IdType              = FDCAN_STANDARD_ID;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <Init_CanB+0xc8>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
	bufTxHdr_B.TxFrameType         = FDCAN_DATA_FRAME;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <Init_CanB+0xc8>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
	bufTxHdr_B.DataLength          = FDCAN_DLC_BYTES_8;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <Init_CanB+0xc8>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0312      	lsls	r2, r2, #12
 800072c:	60da      	str	r2, [r3, #12]
	bufTxHdr_B.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <Init_CanB+0xc8>)
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0612      	lsls	r2, r2, #24
 8000734:	611a      	str	r2, [r3, #16]
	bufTxHdr_B.BitRateSwitch       = FDCAN_BRS_OFF;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <Init_CanB+0xc8>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
	bufTxHdr_B.FDFormat            = FDCAN_CLASSIC_CAN;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <Init_CanB+0xc8>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
	bufTxHdr_B.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <Init_CanB+0xc8>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
	bufTxHdr_B.MessageMarker       = 0;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <Init_CanB+0xc8>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]

    if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <Init_CanB+0xc0>)
 8000750:	0018      	movs	r0, r3
 8000752:	f001 f951 	bl	80019f8 <HAL_FDCAN_Start>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d005      	beq.n	8000766 <Init_CanB+0x7a>
    {
  	  dbgPrint("ERROR: hfdcan2, HAL_FDCAN_Start\n");
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <Init_CanB+0xcc>)
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f85d 	bl	800081c <dbgPrint>
  	  Error_Handler();
 8000762:	f000 fbd1 	bl	8000f08 <Error_Handler>
    }

    if(HAL_FDCAN_ConfigInterruptLines(&hfdcan2, FDCAN_IT_GROUP_RX_FIFO1, FDCAN_INTERRUPT_LINE1) != HAL_OK)
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <Init_CanB+0xc0>)
 8000768:	2202      	movs	r2, #2
 800076a:	2102      	movs	r1, #2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fa4b 	bl	8001c08 <HAL_FDCAN_ConfigInterruptLines>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d005      	beq.n	8000782 <Init_CanB+0x96>
    {
    	dbgPrint("ERROR: hfdcan2, HAL_FDCAN_ConfigInterruptLines\n");
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <Init_CanB+0xd0>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 f84f 	bl	800081c <dbgPrint>
    	 Error_Handler();
 800077e:	f000 fbc3 	bl	8000f08 <Error_Handler>
    }

    // Enable interrupt, FIFO1,  FDCAN1, new data
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <Init_CanB+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	2108      	movs	r1, #8
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fa74 	bl	8001c76 <HAL_FDCAN_ActivateNotification>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d005      	beq.n	800079e <Init_CanB+0xb2>
    {
      dbgPrint("ERROR: hfdcan2, HAL_FDCAN_ActivateNotification\n");
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <Init_CanB+0xd4>)
 8000794:	0018      	movs	r0, r3
 8000796:	f000 f841 	bl	800081c <dbgPrint>
      Error_Handler();
 800079a:	f000 fbb5 	bl	8000f08 <Error_Handler>
    }

    debugPrint("Init_CanB OK\n");
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <Init_CanB+0xd8>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 f83b 	bl	800081c <dbgPrint>
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001e8 	.word	0x200001e8
 80007b0:	080089a0 	.word	0x080089a0
 80007b4:	200003c4 	.word	0x200003c4
 80007b8:	080089d0 	.word	0x080089d0
 80007bc:	080089f4 	.word	0x080089f4
 80007c0:	08008a24 	.word	0x08008a24
 80007c4:	08008a54 	.word	0x08008a54

080007c8 <dbgPrintf>:
#include "string.h"

extern UART_HandleTypeDef huart1;

void dbgPrintf(char *fmt, ...)
{
 80007c8:	b40f      	push	{r0, r1, r2, r3}
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b0c2      	sub	sp, #264	; 0x108
 80007ce:	af00      	add	r7, sp, #0
  char dbgBuf[256];
  va_list args;
  va_start(args, fmt);
 80007d0:	238a      	movs	r3, #138	; 0x8a
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	603b      	str	r3, [r7, #0]
  int rc = vsnprintf(dbgBuf, sizeof(dbgBuf), fmt, args);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2288      	movs	r2, #136	; 0x88
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	18ba      	adds	r2, r7, r2
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	0049      	lsls	r1, r1, #1
 80007e6:	1d38      	adds	r0, r7, #4
 80007e8:	f007 fc46 	bl	8008078 <vsniprintf>
 80007ec:	0003      	movs	r3, r0
 80007ee:	1d7a      	adds	r2, r7, #5
 80007f0:	32ff      	adds	r2, #255	; 0xff
 80007f2:	6013      	str	r3, [r2, #0]
  va_end(args);

  HAL_UART_Transmit(&huart1, dbgBuf, strlen(dbgBuf), 10);
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fc84 	bl	8000104 <strlen>
 80007fc:	0003      	movs	r3, r0
 80007fe:	b29a      	uxth	r2, r3
 8000800:	1d39      	adds	r1, r7, #4
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <dbgPrintf+0x50>)
 8000804:	230a      	movs	r3, #10
 8000806:	f003 fb75 	bl	8003ef4 <HAL_UART_Transmit>
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b042      	add	sp, #264	; 0x108
 8000810:	bc80      	pop	{r7}
 8000812:	bc08      	pop	{r3}
 8000814:	b004      	add	sp, #16
 8000816:	4718      	bx	r3
 8000818:	200002a0 	.word	0x200002a0

0800081c <dbgPrint>:

void dbgPrint(char *str)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen(str), 10);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fc6c 	bl	8000104 <strlen>
 800082c:	0003      	movs	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <dbgPrint+0x28>)
 8000834:	230a      	movs	r3, #10
 8000836:	f003 fb5d 	bl	8003ef4 <HAL_UART_Transmit>
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	200002a0 	.word	0x200002a0

08000848 <dbgDumpHex>:
{
	HAL_UART_Transmit(&huart1, p_array, size, 10);
}

void dbgDumpHex(uint8_t *buffer, int bufferSize)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < bufferSize; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e00c      	b.n	8000872 <dbgDumpHex+0x2a>
	{
		dbgPrintf(" %02X", buffer[i]);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <dbgDumpHex+0x44>)
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff ffae 	bl	80007c8 <dbgPrintf>
	for (int i = 0; i < bufferSize; i++)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	dbee      	blt.n	8000858 <dbgDumpHex+0x10>
	}
	dbgPrint("\n");
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <dbgDumpHex+0x48>)
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff ffcd 	bl	800081c <dbgPrint>
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	08008a90 	.word	0x08008a90
 8000890:	08008a98 	.word	0x08008a98

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fdb4 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f820 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f000 f99e 	bl	8000be0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 f94e 	bl	8000b44 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 f90c 	bl	8000ac4 <MX_I2C1_Init>
  MX_FDCAN1_Init();
 80008ac:	f000 f87a 	bl	80009a4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008b0:	f000 f8c0 	bl	8000a34 <MX_FDCAN2_Init>
  MX_USB_Device_Init();
 80008b4:	f006 ff80 	bl	80077b8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
	/*****************************************************************************************************************************************/
	debugPrint("/* USER CODE BEGIN 2 */\n");
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <main+0x44>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff ffae 	bl	800081c <dbgPrint>
	Init_Basic_App();
 80008c0:	f7ff febe 	bl	8000640 <Init_Basic_App>

	debugPrint("/* USER CODE  END  2 */\n");
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <main+0x48>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ffa8 	bl	800081c <dbgPrint>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		isPressedBtn();
 80008cc:	f000 fa02 	bl	8000cd4 <isPressedBtn>
		heartBeat();
 80008d0:	f000 fa82 	bl	8000dd8 <heartBeat>
		isPressedBtn();
 80008d4:	e7fa      	b.n	80008cc <main+0x38>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	08008a9c 	.word	0x08008a9c
 80008dc:	08008ab8 	.word	0x08008ab8

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b095      	sub	sp, #84	; 0x54
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	2414      	movs	r4, #20
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	233c      	movs	r3, #60	; 0x3c
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f007 fb8d 	bl	8008010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	0018      	movs	r0, r3
 80008fa:	2310      	movs	r3, #16
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f007 fb86 	bl	8008010 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	0018      	movs	r0, r3
 800090a:	f002 fb0b 	bl	8002f24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2222      	movs	r2, #34	; 0x22
 8000912:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	0052      	lsls	r2, r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	03d2      	lsls	r2, r2, #15
 8000922:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000924:	0021      	movs	r1, r4
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2240      	movs	r2, #64	; 0x40
 8000930:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2202      	movs	r2, #2
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2208      	movs	r2, #8
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0292      	lsls	r2, r2, #10
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	22e0      	movs	r2, #224	; 0xe0
 8000956:	0512      	lsls	r2, r2, #20
 8000958:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0592      	lsls	r2, r2, #22
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	187b      	adds	r3, r7, r1
 8000964:	0018      	movs	r0, r3
 8000966:	f002 fb29 	bl	8002fbc <HAL_RCC_OscConfig>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800096e:	f000 facb 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2202      	movs	r2, #2
 800097c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2102      	movs	r1, #2
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fe74 	bl	800367c <HAL_RCC_ClockConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000998:	f000 fab6 	bl	8000f08 <Error_Handler>
  }
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b015      	add	sp, #84	; 0x54
 80009a2:	bd90      	pop	{r4, r7, pc}

080009a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009aa:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <MX_FDCAN1_Init+0x8c>)
 80009ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009da:	2203      	movs	r2, #3
 80009dc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 28;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009e0:	221c      	movs	r2, #28
 80009e2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 27;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009f8:	221b      	movs	r2, #27
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <MX_FDCAN1_Init+0x88>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fe58 	bl	80016cc <HAL_FDCAN_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a20:	f000 fa72 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000184 	.word	0x20000184
 8000a30:	40006400 	.word	0x40006400

08000a34 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a3a:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <MX_FDCAN2_Init+0x8c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 3;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 28;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a70:	221c      	movs	r2, #28
 8000a72:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a76:	2203      	movs	r2, #3
 8000a78:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 27;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a88:	221b      	movs	r2, #27
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MX_FDCAN2_Init+0x88>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fe10 	bl	80016cc <HAL_FDCAN_Init>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000ab0:	f000 fa2a 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	200001e8 	.word	0x200001e8
 8000ac0:	40006800 	.word	0x40006800

08000ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_I2C1_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_I2C1_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 fd4f 	bl	80025a4 <HAL_I2C_Init>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 f9fd 	bl	8000f08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fddc 	bl	80026d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b1c:	f000 f9f4 	bl	8000f08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fe1f 	bl	8002768 <HAL_I2CEx_ConfigDigitalFilter>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 f9eb 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000024c 	.word	0x2000024c
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	00602173 	.word	0x00602173

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <MX_USART1_UART_Init+0x98>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b50:	22e1      	movs	r2, #225	; 0xe1
 8000b52:	0252      	lsls	r2, r2, #9
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f003 f95a 	bl	8003e48 <HAL_UART_Init>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f9b6 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f003 ff9d 	bl	8004ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f9ad 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f003 ffd4 	bl	8004b60 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f9a4 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 ff52 	bl	8004a6c <HAL_UARTEx_DisableFifoMode>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f99c 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	200002a0 	.word	0x200002a0
 8000bdc:	40013800 	.word	0x40013800

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	240c      	movs	r4, #12
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	0018      	movs	r0, r3
 8000bec:	2314      	movs	r3, #20
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f007 fa0d 	bl	8008010 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	2201      	movs	r2, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c14:	2102      	movs	r1, #2
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4013      	ands	r3, r2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0xe8>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	2208      	movs	r2, #8
 8000c38:	4013      	ands	r3, r2
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_A_Pin|LED_B_Pin, GPIO_PIN_SET);
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	2105      	movs	r1, #5
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fc74 	bl	8002532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_SET);
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_GPIO_Init+0xf0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2108      	movs	r1, #8
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 fc6e 	bl	8002532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2204      	movs	r2, #4
 8000c5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c68:	193a      	adds	r2, r7, r4
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 fad5 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2205      	movs	r2, #5
 8000c7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2201      	movs	r2, #1
 8000c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c92:	0019      	movs	r1, r3
 8000c94:	0010      	movs	r0, r2
 8000c96:	f001 fac3 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLINK_Pin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <MX_GPIO_Init+0xf0>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f001 fab0 	bl	8002220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b009      	add	sp, #36	; 0x24
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	50000c00 	.word	0x50000c00
 8000cd0:	50000400 	.word	0x50000400

08000cd4 <isPressedBtn>:
 * parameters :  void
 *
 * return     :  void
 **/
void isPressedBtn()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	static int msCount = 0;

	if (!HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))
 8000cd8:	23a0      	movs	r3, #160	; 0xa0
 8000cda:	05db      	lsls	r3, r3, #23
 8000cdc:	2104      	movs	r1, #4
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fc0a 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d154      	bne.n	8000d92 <isPressedBtn+0xbe>
	{
		msCount++;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <isPressedBtn+0xcc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <isPressedBtn+0xcc>)
 8000cf0:	601a      	str	r2, [r3, #0]
		if (msCount > 1e3)
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <isPressedBtn+0xcc>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	23fa      	movs	r3, #250	; 0xfa
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dd4c      	ble.n	8000d98 <isPressedBtn+0xc4>
		{

			//***********************************
			// do something
			//***********************************
			debugPrint("btn\n");
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <isPressedBtn+0xd0>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fd8b 	bl	800081c <dbgPrint>

			  // polling rx can
			  while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &bufRxHdr_A, payloadRx_A) == HAL_OK)  /* Retrieve message from Rx buffer 0 */
 8000d06:	e017      	b.n	8000d38 <isPressedBtn+0x64>
			  {
				  dbgPrint("hfdcan1\n");
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <isPressedBtn+0xd4>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fd86 	bl	800081c <dbgPrint>
				  dbgPrint("new RxData:"); dbgDumpHex(payloadRx_A, 8); dbgPrint("\n");
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <isPressedBtn+0xd8>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff fd82 	bl	800081c <dbgPrint>
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <isPressedBtn+0xdc>)
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fd93 	bl	8000848 <dbgDumpHex>
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <isPressedBtn+0xe0>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fd79 	bl	800081c <dbgPrint>
				  dbgPrintf("RxHeader.Identifier: %x\n", bufRxHdr_A.Identifier);
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <isPressedBtn+0xe4>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <isPressedBtn+0xe8>)
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fd48 	bl	80007c8 <dbgPrintf>
			  while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &bufRxHdr_A, payloadRx_A) == HAL_OK)  /* Retrieve message from Rx buffer 0 */
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <isPressedBtn+0xdc>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <isPressedBtn+0xe4>)
 8000d3c:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <isPressedBtn+0xec>)
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	f000 fe80 	bl	8001a44 <HAL_FDCAN_GetRxMessage>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d0df      	beq.n	8000d08 <isPressedBtn+0x34>
			  }

			  // polling rx can
			  while(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &bufRxHdr_B, payloadRx_B) == HAL_OK)  /* Retrieve message from Rx buffer 1 */
 8000d48:	e017      	b.n	8000d7a <isPressedBtn+0xa6>
			  {
				  dbgPrint("hfdcan2\n");
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <isPressedBtn+0xf0>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fd65 	bl	800081c <dbgPrint>
				  dbgPrint("new RxData:"); dbgDumpHex(payloadRx_B, 8); dbgPrint("\n");
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <isPressedBtn+0xd8>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fd61 	bl	800081c <dbgPrint>
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <isPressedBtn+0xf4>)
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fd72 	bl	8000848 <dbgDumpHex>
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <isPressedBtn+0xe0>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fd58 	bl	800081c <dbgPrint>
				  dbgPrintf("RxHeader.Identifier: %x\n", bufRxHdr_B.Identifier);
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <isPressedBtn+0xf8>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <isPressedBtn+0xe8>)
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fd27 	bl	80007c8 <dbgPrintf>
			  while(HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &bufRxHdr_B, payloadRx_B) == HAL_OK)  /* Retrieve message from Rx buffer 1 */
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <isPressedBtn+0xf4>)
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <isPressedBtn+0xf8>)
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <isPressedBtn+0xfc>)
 8000d80:	2140      	movs	r1, #64	; 0x40
 8000d82:	f000 fe5f 	bl	8001a44 <HAL_FDCAN_GetRxMessage>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d0df      	beq.n	8000d4a <isPressedBtn+0x76>
			  }

			//***********************************

			msCount = -3e6;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <isPressedBtn+0xcc>)
 8000d8c:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <isPressedBtn+0x100>)
 8000d8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		msCount = 0;
	}
}
 8000d90:	e002      	b.n	8000d98 <isPressedBtn+0xc4>
		msCount = 0;
 8000d92:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <isPressedBtn+0xcc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000450 	.word	0x20000450
 8000da4:	08008ad4 	.word	0x08008ad4
 8000da8:	08008adc 	.word	0x08008adc
 8000dac:	08008ae8 	.word	0x08008ae8
 8000db0:	20000384 	.word	0x20000384
 8000db4:	08008af4 	.word	0x08008af4
 8000db8:	2000035c 	.word	0x2000035c
 8000dbc:	08008af8 	.word	0x08008af8
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	08008b14 	.word	0x08008b14
 8000dc8:	20000410 	.word	0x20000410
 8000dcc:	200003e8 	.word	0x200003e8
 8000dd0:	200001e8 	.word	0x200001e8
 8000dd4:	ffd23940 	.word	0xffd23940

08000dd8 <heartBeat>:
 * 				  				loop icerisinde cagrılmalıdır. "period_of_led_blink" degiskeni ile frekansı belirlenir.
 * parameters :   void
 * return     :   void
 */
void heartBeat()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - last_time > period_of_led_blink)
 8000ddc:	f000 fb8e 	bl	80014fc <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <heartBeat+0x34>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <heartBeat+0x38>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d909      	bls.n	8000e04 <heartBeat+0x2c>
	{
		last_time = HAL_GetTick();
 8000df0:	f000 fb84 	bl	80014fc <HAL_GetTick>
 8000df4:	0002      	movs	r2, r0
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <heartBeat+0x34>)
 8000df8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <heartBeat+0x3c>)
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fbb4 	bl	800256c <HAL_GPIO_TogglePin>
	}
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	20000334 	.word	0x20000334
 8000e10:	20000000 	.word	0x20000000
 8000e14:	50000400 	.word	0x50000400

08000e18 <HAL_FDCAN_RxFifo0Callback>:

/**
 * CAN_A 'a gelen mesajlarda hfdcan1'ın FIFO0'ına konur  line0 kesmesi devreye girer
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	d00d      	beq.n	8000e46 <HAL_FDCAN_RxFifo0Callback+0x2e>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &bufRxHdr_A, payloadRx_A) != HAL_OK)
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	2140      	movs	r1, #64	; 0x40
 8000e32:	f000 fe07 	bl	8001a44 <HAL_FDCAN_GetRxMessage>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d005      	beq.n	8000e46 <HAL_FDCAN_RxFifo0Callback+0x2e>
		{
			dbgPrint("ERROR: Fifo0Callback HAL_FDCAN_GetRxMessage\n");
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fced 	bl	800081c <dbgPrint>
			Error_Handler();
 8000e42:	f000 f861 	bl	8000f08 <Error_Handler>
		}
	}

	dbgPrint("new RxFifo0 :"); dbgDumpHex(payloadRx_A, 8); dbgPrint("\n");
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fce7 	bl	800081c <dbgPrint>
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000e50:	2108      	movs	r1, #8
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff fcf8 	bl	8000848 <dbgDumpHex>
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fcde 	bl	800081c <dbgPrint>
	dbgPrintf("RxHeader.Identifier: %x\n", bufRxHdr_A.Identifier);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff fcad 	bl	80007c8 <dbgPrintf>
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	20000384 	.word	0x20000384
 8000e7c:	2000035c 	.word	0x2000035c
 8000e80:	08008b20 	.word	0x08008b20
 8000e84:	08008b50 	.word	0x08008b50
 8000e88:	08008af4 	.word	0x08008af4
 8000e8c:	08008af8 	.word	0x08008af8

08000e90 <HAL_FDCAN_RxFifo1Callback>:

/**
 *  CAN_A 'a gelen mesajlarda hfdcan2'ın FIFO1'ına konur  line1 kesmesi devreye girer
 */
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_FDCAN_RxFifo1Callback+0x2e>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &bufRxHdr_B, payloadRx_B) != HAL_OK)
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_FDCAN_RxFifo1Callback+0x60>)
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_FDCAN_RxFifo1Callback+0x64>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	2141      	movs	r1, #65	; 0x41
 8000eaa:	f000 fdcb 	bl	8001a44 <HAL_FDCAN_GetRxMessage>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_FDCAN_RxFifo1Callback+0x2e>
		{
			dbgPrint("ERROR:Fifo1Callback HAL_FDCAN_GetRxMessage\n");
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_FDCAN_RxFifo1Callback+0x68>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fcb1 	bl	800081c <dbgPrint>
			Error_Handler();
 8000eba:	f000 f825 	bl	8000f08 <Error_Handler>
		}
	}


	dbgPrint("new RxFifo1 :"); dbgDumpHex(payloadRx_B, 8); dbgPrint("\n");
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_FDCAN_RxFifo1Callback+0x6c>)
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fcab 	bl	800081c <dbgPrint>
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_FDCAN_RxFifo1Callback+0x60>)
 8000ec8:	2108      	movs	r1, #8
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fcbc 	bl	8000848 <dbgDumpHex>
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_FDCAN_RxFifo1Callback+0x70>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fca2 	bl	800081c <dbgPrint>
	dbgPrintf("RxHeader.Identifier: %x\n", bufRxHdr_B.Identifier);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_FDCAN_RxFifo1Callback+0x64>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_FDCAN_RxFifo1Callback+0x74>)
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fc71 	bl	80007c8 <dbgPrintf>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000410 	.word	0x20000410
 8000ef4:	200003e8 	.word	0x200003e8
 8000ef8:	08008b60 	.word	0x08008b60
 8000efc:	08008b8c 	.word	0x08008b8c
 8000f00:	08008af4 	.word	0x08008af4
 8000f04:	08008af8 	.word	0x08008af8

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_MspInit+0x44>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_MspInit+0x44>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x44>)
 8000f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_MspInit+0x44>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0549      	lsls	r1, r1, #21
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_MspInit+0x44>)
 8000f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	4013      	ands	r3, r2
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b09f      	sub	sp, #124	; 0x7c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	2364      	movs	r3, #100	; 0x64
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	0018      	movs	r0, r3
 8000f6a:	2314      	movs	r3, #20
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f007 f84e 	bl	8008010 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	2418      	movs	r4, #24
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	0018      	movs	r0, r3
 8000f7a:	234c      	movs	r3, #76	; 0x4c
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f007 f846 	bl	8008010 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a60      	ldr	r2, [pc, #384]	; (800110c <HAL_FDCAN_MspInit+0x1b0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d15a      	bne.n	8001044 <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0492      	lsls	r2, r2, #18
 8000f94:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0052      	lsls	r2, r2, #1
 8000f9c:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fd15 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000faa:	f7ff ffad 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <HAL_FDCAN_MspInit+0x1b4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_FDCAN_MspInit+0x1b4>)
 8000fb6:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <HAL_FDCAN_MspInit+0x1b4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10d      	bne.n	8000fdc <HAL_FDCAN_MspInit+0x80>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fc0:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8000fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc4:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0149      	lsls	r1, r1, #5
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fce:	4b51      	ldr	r3, [pc, #324]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8000fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe0:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe8:	4b4a      	ldr	r3, [pc, #296]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff4:	2164      	movs	r1, #100	; 0x64
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	22c0      	movs	r2, #192	; 0xc0
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2202      	movs	r2, #2
 8001002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2203      	movs	r2, #3
 8001014:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	187b      	adds	r3, r7, r1
 8001018:	4a3f      	ldr	r2, [pc, #252]	; (8001118 <HAL_FDCAN_MspInit+0x1bc>)
 800101a:	0019      	movs	r1, r3
 800101c:	0010      	movs	r0, r2
 800101e:	f001 f8ff 	bl	8002220 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2015      	movs	r0, #21
 8001028:	f000 fb1e 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800102c:	2015      	movs	r0, #21
 800102e:	f000 fb30 	bl	8001692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2016      	movs	r0, #22
 8001038:	f000 fb16 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 800103c:	2016      	movs	r0, #22
 800103e:	f000 fb28 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001042:	e05e      	b.n	8001102 <HAL_FDCAN_MspInit+0x1a6>
  else if(hfdcan->Instance==FDCAN2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <HAL_FDCAN_MspInit+0x1c0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d159      	bne.n	8001102 <HAL_FDCAN_MspInit+0x1a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800104e:	2118      	movs	r1, #24
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	0492      	lsls	r2, r2, #18
 8001056:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	0052      	lsls	r2, r2, #1
 800105e:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	187b      	adds	r3, r7, r1
 8001062:	0018      	movs	r0, r3
 8001064:	f002 fcb4 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 800106c:	f7ff ff4c 	bl	8000f08 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_FDCAN_MspInit+0x1b4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_FDCAN_MspInit+0x1b4>)
 8001078:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <HAL_FDCAN_MspInit+0x1b4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10d      	bne.n	800109e <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8001084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0149      	lsls	r1, r1, #5
 800108c:	430a      	orrs	r2, r1
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 8001092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 80010a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 80010a4:	2102      	movs	r1, #2
 80010a6:	430a      	orrs	r2, r1
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_FDCAN_MspInit+0x1b8>)
 80010ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010b6:	2164      	movs	r1, #100	; 0x64
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2203      	movs	r2, #3
 80010bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2202      	movs	r2, #2
 80010c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2203      	movs	r2, #3
 80010d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_FDCAN_MspInit+0x1bc>)
 80010da:	0019      	movs	r1, r3
 80010dc:	0010      	movs	r0, r2
 80010de:	f001 f89f 	bl	8002220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2015      	movs	r0, #21
 80010e8:	f000 fabe 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80010ec:	2015      	movs	r0, #21
 80010ee:	f000 fad0 	bl	8001692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2016      	movs	r0, #22
 80010f8:	f000 fab6 	bl	8001668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80010fc:	2016      	movs	r0, #22
 80010fe:	f000 fac8 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b01f      	add	sp, #124	; 0x7c
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40006400 	.word	0x40006400
 8001110:	20000454 	.word	0x20000454
 8001114:	40021000 	.word	0x40021000
 8001118:	50000400 	.word	0x50000400
 800111c:	40006800 	.word	0x40006800

08001120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b09d      	sub	sp, #116	; 0x74
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	235c      	movs	r3, #92	; 0x5c
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	0018      	movs	r0, r3
 800112e:	2314      	movs	r3, #20
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f006 ff6c 	bl	8008010 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	2410      	movs	r4, #16
 800113a:	193b      	adds	r3, r7, r4
 800113c:	0018      	movs	r0, r3
 800113e:	234c      	movs	r3, #76	; 0x4c
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f006 ff64 	bl	8008010 <memset>
  if(hi2c->Instance==I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_I2C_MspInit+0xb8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d13d      	bne.n	80011ce <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2220      	movs	r2, #32
 8001156:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001158:	193b      	adds	r3, r7, r4
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115e:	193b      	adds	r3, r7, r4
 8001160:	0018      	movs	r0, r3
 8001162:	f002 fc35 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800116a:	f7ff fecd 	bl	8000f08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_I2C_MspInit+0xbc>)
 8001170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_I2C_MspInit+0xbc>)
 8001174:	2102      	movs	r1, #2
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_I2C_MspInit+0xbc>)
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	2202      	movs	r2, #2
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001186:	215c      	movs	r1, #92	; 0x5c
 8001188:	187b      	adds	r3, r7, r1
 800118a:	22c0      	movs	r2, #192	; 0xc0
 800118c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2212      	movs	r2, #18
 8001192:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2206      	movs	r2, #6
 80011a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_I2C_MspInit+0xc0>)
 80011aa:	0019      	movs	r1, r3
 80011ac:	0010      	movs	r0, r2
 80011ae:	f001 f837 	bl	8002220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_I2C_MspInit+0xbc>)
 80011b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_I2C_MspInit+0xbc>)
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0389      	lsls	r1, r1, #14
 80011bc:	430a      	orrs	r2, r1
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_I2C_MspInit+0xbc>)
 80011c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	039b      	lsls	r3, r3, #14
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b01d      	add	sp, #116	; 0x74
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40005400 	.word	0x40005400
 80011dc:	40021000 	.word	0x40021000
 80011e0:	50000400 	.word	0x50000400

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b09d      	sub	sp, #116	; 0x74
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	235c      	movs	r3, #92	; 0x5c
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	0018      	movs	r0, r3
 80011f2:	2314      	movs	r3, #20
 80011f4:	001a      	movs	r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	f006 ff0a 	bl	8008010 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	2410      	movs	r4, #16
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	234c      	movs	r3, #76	; 0x4c
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f006 ff02 	bl	8008010 <memset>
  if(huart->Instance==USART1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <HAL_UART_MspInit+0xbc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d13f      	bne.n	8001296 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001216:	193b      	adds	r3, r7, r4
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001222:	193b      	adds	r3, r7, r4
 8001224:	0018      	movs	r0, r3
 8001226:	f002 fbd3 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	1e03      	subs	r3, r0, #0
 800122c:	d001      	beq.n	8001232 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800122e:	f7ff fe6b 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_UART_MspInit+0xc0>)
 8001234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_UART_MspInit+0xc0>)
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	01c9      	lsls	r1, r1, #7
 800123c:	430a      	orrs	r2, r1
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_UART_MspInit+0xc0>)
 8001242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0xc0>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0xc0>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_UART_MspInit+0xc0>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001266:	215c      	movs	r1, #92	; 0x5c
 8001268:	187b      	adds	r3, r7, r1
 800126a:	22c0      	movs	r2, #192	; 0xc0
 800126c:	00d2      	lsls	r2, r2, #3
 800126e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2202      	movs	r2, #2
 8001274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2201      	movs	r2, #1
 8001286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	187a      	adds	r2, r7, r1
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f000 ffc5 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b01d      	add	sp, #116	; 0x74
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f904 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */
  debugPrint("kesme line0\n");
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <TIM16_FDCAN_IT0_IRQHandler+0x24>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fa9c 	bl	800081c <dbgPrint>
  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <TIM16_FDCAN_IT0_IRQHandler+0x28>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 fd9b 	bl	8001e22 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <TIM16_FDCAN_IT0_IRQHandler+0x2c>)
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 fd97 	bl	8001e22 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	08008b9c 	.word	0x08008b9c
 8001300:	20000184 	.word	0x20000184
 8001304:	200001e8 	.word	0x200001e8

08001308 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */
  debugPrint("kesme line1\n");
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <TIM17_FDCAN_IT1_IRQHandler+0x24>)
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff fa84 	bl	800081c <dbgPrint>
  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <TIM17_FDCAN_IT1_IRQHandler+0x28>)
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fd83 	bl	8001e22 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <TIM17_FDCAN_IT1_IRQHandler+0x2c>)
 800131e:	0018      	movs	r0, r3
 8001320:	f000 fd7f 	bl	8001e22 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	08008bac 	.word	0x08008bac
 8001330:	20000184 	.word	0x20000184
 8001334:	200001e8 	.word	0x200001e8

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f006 fe28 	bl	8007fbc <__errno>
 800136c:	0003      	movs	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	2301      	movs	r3, #1
 8001374:	425b      	negs	r3, r3
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	18d2      	adds	r2, r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b006      	add	sp, #24
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20024000 	.word	0x20024000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000458 	.word	0x20000458
 80013a0:	20001e78 	.word	0x20001e78

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b4:	f7ff fff6 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013de:	f006 fdf3 	bl	8007fc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013e2:	f7ff fa57 	bl	8000894 <main>

080013e6 <LoopForever>:

LoopForever:
  b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   r0, =_estack
 80013e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80013f4:	08008d70 	.word	0x08008d70
  ldr r2, =_sbss
 80013f8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80013fc:	20001e74 	.word	0x20001e74

08001400 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_COMP_IRQHandler>
	...

08001404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x3c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Init+0x3c>)
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0049      	lsls	r1, r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2003      	movs	r0, #3
 8001420:	f000 f810 	bl	8001444 <HAL_InitTick>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d003      	beq.n	8001430 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e001      	b.n	8001434 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fd70 	bl	8000f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_InitTick+0x88>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d02b      	beq.n	80014b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_InitTick+0x8c>)
 800145e:	681c      	ldr	r4, [r3, #0]
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_InitTick+0x88>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	0019      	movs	r1, r3
 8001466:	23fa      	movs	r3, #250	; 0xfa
 8001468:	0098      	lsls	r0, r3, #2
 800146a:	f7fe fe5d 	bl	8000128 <__udivsi3>
 800146e:	0003      	movs	r3, r0
 8001470:	0019      	movs	r1, r3
 8001472:	0020      	movs	r0, r4
 8001474:	f7fe fe58 	bl	8000128 <__udivsi3>
 8001478:	0003      	movs	r3, r0
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f919 	bl	80016b2 <HAL_SYSTICK_Config>
 8001480:	1e03      	subs	r3, r0, #0
 8001482:	d112      	bne.n	80014aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d80a      	bhi.n	80014a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	2301      	movs	r3, #1
 800148e:	425b      	negs	r3, r3
 8001490:	2200      	movs	r2, #0
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f8e8 	bl	8001668 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_InitTick+0x90>)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e00d      	b.n	80014bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e008      	b.n	80014bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014aa:	230f      	movs	r3, #15
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e003      	b.n	80014bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b005      	add	sp, #20
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	2000000c 	.word	0x2000000c
 80014d0:	20000004 	.word	0x20000004
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x1c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	001a      	movs	r2, r3
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x20>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	18d2      	adds	r2, r2, r3
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_IncTick+0x20>)
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	2000045c 	.word	0x2000045c

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <HAL_GetTick+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	2000045c 	.word	0x2000045c

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	0002      	movs	r2, r0
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b7f      	cmp	r3, #127	; 0x7f
 8001522:	d809      	bhi.n	8001538 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	001a      	movs	r2, r3
 800152a:	231f      	movs	r3, #31
 800152c:	401a      	ands	r2, r3
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_EnableIRQ+0x30>)
 8001530:	2101      	movs	r1, #1
 8001532:	4091      	lsls	r1, r2
 8001534:	000a      	movs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	0002      	movs	r2, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b7f      	cmp	r3, #127	; 0x7f
 8001558:	d828      	bhi.n	80015ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <__NVIC_SetPriority+0xd4>)
 800155c:	1dfb      	adds	r3, r7, #7
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	33c0      	adds	r3, #192	; 0xc0
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	589b      	ldr	r3, [r3, r2]
 800156a:	1dfa      	adds	r2, r7, #7
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	0011      	movs	r1, r2
 8001570:	2203      	movs	r2, #3
 8001572:	400a      	ands	r2, r1
 8001574:	00d2      	lsls	r2, r2, #3
 8001576:	21ff      	movs	r1, #255	; 0xff
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	43d2      	mvns	r2, r2
 800157e:	401a      	ands	r2, r3
 8001580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	401a      	ands	r2, r3
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0018      	movs	r0, r3
 8001590:	2303      	movs	r3, #3
 8001592:	4003      	ands	r3, r0
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <__NVIC_SetPriority+0xd4>)
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	430a      	orrs	r2, r1
 80015a4:	33c0      	adds	r3, #192	; 0xc0
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015aa:	e031      	b.n	8001610 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <__NVIC_SetPriority+0xd8>)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	0019      	movs	r1, r3
 80015b4:	230f      	movs	r3, #15
 80015b6:	400b      	ands	r3, r1
 80015b8:	3b08      	subs	r3, #8
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3306      	adds	r3, #6
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	3304      	adds	r3, #4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1dfa      	adds	r2, r7, #7
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	0011      	movs	r1, r2
 80015cc:	2203      	movs	r2, #3
 80015ce:	400a      	ands	r2, r1
 80015d0:	00d2      	lsls	r2, r2, #3
 80015d2:	21ff      	movs	r1, #255	; 0xff
 80015d4:	4091      	lsls	r1, r2
 80015d6:	000a      	movs	r2, r1
 80015d8:	43d2      	mvns	r2, r2
 80015da:	401a      	ands	r2, r3
 80015dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	22ff      	movs	r2, #255	; 0xff
 80015e4:	401a      	ands	r2, r3
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	2303      	movs	r3, #3
 80015ee:	4003      	ands	r3, r0
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <__NVIC_SetPriority+0xd8>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	001c      	movs	r4, r3
 80015fc:	230f      	movs	r3, #15
 80015fe:	4023      	ands	r3, r4
 8001600:	3b08      	subs	r3, #8
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	430a      	orrs	r2, r1
 8001606:	3306      	adds	r3, #6
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	18c3      	adds	r3, r0, r3
 800160c:	3304      	adds	r3, #4
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b003      	add	sp, #12
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	045b      	lsls	r3, r3, #17
 8001630:	429a      	cmp	r2, r3
 8001632:	d301      	bcc.n	8001638 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001634:	2301      	movs	r3, #1
 8001636:	e010      	b.n	800165a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <SysTick_Config+0x44>)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	3a01      	subs	r2, #1
 800163e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001640:	2301      	movs	r3, #1
 8001642:	425b      	negs	r3, r3
 8001644:	2103      	movs	r1, #3
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff ff7c 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x44>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x44>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	210f      	movs	r1, #15
 8001674:	187b      	adds	r3, r7, r1
 8001676:	1c02      	adds	r2, r0, #0
 8001678:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	187b      	adds	r3, r7, r1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b25b      	sxtb	r3, r3
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	0002      	movs	r2, r0
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff ff33 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff ffaf 	bl	8001620 <SysTick_Config>
 80016c2:	0003      	movs	r3, r0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e14e      	b.n	800197c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	225c      	movs	r2, #92	; 0x5c
 80016e2:	5c9b      	ldrb	r3, [r3, r2]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	225d      	movs	r2, #93	; 0x5d
 80016ee:	2100      	movs	r1, #0
 80016f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fc31 	bl	8000f5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2110      	movs	r1, #16
 8001706:	438a      	bics	r2, r1
 8001708:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800170a:	f7ff fef7 	bl	80014fc <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001712:	e012      	b.n	800173a <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001714:	f7ff fef2 	bl	80014fc <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b0a      	cmp	r3, #10
 8001720:	d90b      	bls.n	800173a <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	2201      	movs	r2, #1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	225c      	movs	r2, #92	; 0x5c
 8001732:	2103      	movs	r1, #3
 8001734:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e120      	b.n	800197c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2208      	movs	r2, #8
 8001742:	4013      	ands	r3, r2
 8001744:	2b08      	cmp	r3, #8
 8001746:	d0e5      	beq.n	8001714 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001758:	f7ff fed0 	bl	80014fc <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001760:	e012      	b.n	8001788 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001762:	f7ff fecb 	bl	80014fc <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b0a      	cmp	r3, #10
 800176e:	d90b      	bls.n	8001788 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001774:	2201      	movs	r2, #1
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	225c      	movs	r2, #92	; 0x5c
 8001780:	2103      	movs	r1, #3
 8001782:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0f9      	b.n	800197c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2201      	movs	r2, #1
 8001790:	4013      	ands	r3, r2
 8001792:	d0e6      	beq.n	8001762 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2102      	movs	r1, #2
 80017a0:	430a      	orrs	r2, r1
 80017a2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a76      	ldr	r2, [pc, #472]	; (8001984 <HAL_FDCAN_Init+0x2b8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d103      	bne.n	80017b6 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80017ae:	4a76      	ldr	r2, [pc, #472]	; (8001988 <HAL_FDCAN_Init+0x2bc>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7c1b      	ldrb	r3, [r3, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	438a      	bics	r2, r1
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	e007      	b.n	80017e0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	430a      	orrs	r2, r1
 80017de:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7c5b      	ldrb	r3, [r3, #17]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d109      	bne.n	80017fc <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	01c9      	lsls	r1, r1, #7
 80017f6:	430a      	orrs	r2, r1
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	e007      	b.n	800180c <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4961      	ldr	r1, [pc, #388]	; (800198c <HAL_FDCAN_Init+0x2c0>)
 8001808:	400a      	ands	r2, r1
 800180a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7c9b      	ldrb	r3, [r3, #18]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d108      	bne.n	8001826 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	495c      	ldr	r1, [pc, #368]	; (8001990 <HAL_FDCAN_Init+0x2c4>)
 8001820:	400a      	ands	r2, r1
 8001822:	619a      	str	r2, [r3, #24]
 8001824:	e008      	b.n	8001838 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0149      	lsls	r1, r1, #5
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_FDCAN_Init+0x2c8>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	21a4      	movs	r1, #164	; 0xa4
 800185c:	438a      	bics	r2, r1
 800185e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2110      	movs	r1, #16
 800186c:	438a      	bics	r2, r1
 800186e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2104      	movs	r1, #4
 8001884:	430a      	orrs	r2, r1
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	e02c      	b.n	80018e4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d028      	beq.n	80018e4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d01c      	beq.n	80018d4 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	430a      	orrs	r2, r1
 80018a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2110      	movs	r1, #16
 80018b6:	430a      	orrs	r2, r1
 80018b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d110      	bne.n	80018e4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2120      	movs	r1, #32
 80018ce:	430a      	orrs	r2, r1
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	e007      	b.n	80018e4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2120      	movs	r1, #32
 80018e0:	430a      	orrs	r2, r1
 80018e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018fc:	431a      	orrs	r2, r3
 80018fe:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	3b01      	subs	r3, #1
 8001906:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800190c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800190e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d115      	bne.n	8001948 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	3b01      	subs	r3, #1
 8001928:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800192a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	3b01      	subs	r3, #1
 8001932:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001934:	431a      	orrs	r2, r3
 8001936:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	3b01      	subs	r3, #1
 800193e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001944:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001946:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	22c0      	movs	r2, #192	; 0xc0
 800194e:	5899      	ldr	r1, [r3, r2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	21c0      	movs	r1, #192	; 0xc0
 800195c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 fbf1 	bl	8002148 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	225c      	movs	r2, #92	; 0x5c
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40006400 	.word	0x40006400
 8001988:	40006500 	.word	0x40006500
 800198c:	ffffbfff 	.word	0xffffbfff
 8001990:	ffffefff 	.word	0xffffefff
 8001994:	fffffcff 	.word	0xfffffcff

08001998 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	225c      	movs	r2, #92	; 0x5c
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d117      	bne.n	80019e2 <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	589b      	ldr	r3, [r3, r2]
 80019ba:	223f      	movs	r2, #63	; 0x3f
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	011a      	lsls	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	431a      	orrs	r2, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e006      	b.n	80019f0 <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	2204      	movs	r2, #4
 80019e8:	431a      	orrs	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
  }
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b004      	add	sp, #16
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	225c      	movs	r2, #92	; 0x5c
 8001a04:	5c9b      	ldrb	r3, [r3, r2]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d110      	bne.n	8001a2e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	225c      	movs	r2, #92	; 0x5c
 8001a10:	2102      	movs	r1, #2
 8001a12:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	438a      	bics	r2, r1
 8001a22:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e006      	b.n	8001a3c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	2204      	movs	r2, #4
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
  }
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a52:	201b      	movs	r0, #27
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	215c      	movs	r1, #92	; 0x5c
 8001a5a:	5c52      	ldrb	r2, [r2, r1]
 8001a5c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d000      	beq.n	8001a68 <HAL_FDCAN_GetRxMessage+0x24>
 8001a66:	e0c1      	b.n	8001bec <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b40      	cmp	r3, #64	; 0x40
 8001a6c:	d121      	bne.n	8001ab2 <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2290      	movs	r2, #144	; 0x90
 8001a74:	589b      	ldr	r3, [r3, r2]
 8001a76:	220f      	movs	r2, #15
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d108      	bne.n	8001a8e <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0052      	lsls	r2, r2, #1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0b5      	b.n	8001bfa <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2290      	movs	r2, #144	; 0x90
 8001a94:	589b      	ldr	r3, [r3, r2]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	18cb      	adds	r3, r1, r3
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e020      	b.n	8001af4 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2298      	movs	r2, #152	; 0x98
 8001ab8:	589b      	ldr	r3, [r3, r2]
 8001aba:	220f      	movs	r2, #15
 8001abc:	4013      	ands	r3, r2
 8001abe:	d108      	bne.n	8001ad2 <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	0052      	lsls	r2, r2, #1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e093      	b.n	8001bfa <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2298      	movs	r2, #152	; 0x98
 8001ad8:	589b      	ldr	r3, [r3, r2]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	2203      	movs	r2, #3
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	0013      	movs	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	189b      	adds	r3, r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	18cb      	adds	r3, r1, r3
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	05db      	lsls	r3, r3, #23
 8001afc:	401a      	ands	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0c9b      	lsrs	r3, r3, #18
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	0d5a      	lsrs	r2, r3, #21
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e005      	b.n	8001b26 <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	059b      	lsls	r3, r3, #22
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0fdb      	lsrs	r3, r3, #31
 8001b3a:	07da      	lsls	r2, r3, #31
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3304      	adds	r3, #4
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	0c1a      	lsrs	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	23f0      	movs	r3, #240	; 0xf0
 8001b58:	031b      	lsls	r3, r3, #12
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	035b      	lsls	r3, r3, #13
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	039b      	lsls	r3, r3, #14
 8001b76:	401a      	ands	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e1b      	lsrs	r3, r3, #24
 8001b82:	227f      	movs	r2, #127	; 0x7f
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0fda      	lsrs	r2, r3, #31
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3304      	adds	r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	e00a      	b.n	8001bba <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	18d2      	adds	r2, r2, r3
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	18cb      	adds	r3, r1, r3
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d3eb      	bcc.n	8001ba4 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d105      	bne.n	8001bde <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2194      	movs	r1, #148	; 0x94
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	505a      	str	r2, [r3, r1]
 8001bdc:	e004      	b.n	8001be8 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	219c      	movs	r1, #156	; 0x9c
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e006      	b.n	8001bfa <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
  }
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b00a      	add	sp, #40	; 0x28
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	08008c64 	.word	0x08008c64

08001c08 <HAL_FDCAN_ConfigInterruptLines>:
  * @param  InterruptLine Interrupt line.
  *         This parameter can be a value of @arg FDCAN_Interrupt_Line.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigInterruptLines(FDCAN_HandleTypeDef *hfdcan, uint32_t ITList, uint32_t InterruptLine)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c14:	2017      	movs	r0, #23
 8001c16:	183b      	adds	r3, r7, r0
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	215c      	movs	r1, #92	; 0x5c
 8001c1c:	5c52      	ldrb	r2, [r2, r1]
 8001c1e:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT_GROUP(ITList));
  assert_param(IS_FDCAN_IT_LINE(InterruptLine));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c20:	0002      	movs	r2, r0
 8001c22:	18bb      	adds	r3, r7, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d003      	beq.n	8001c32 <HAL_FDCAN_ConfigInterruptLines+0x2a>
 8001c2a:	18bb      	adds	r3, r7, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d116      	bne.n	8001c60 <HAL_FDCAN_ConfigInterruptLines+0x58>
  {
    /* Assign list of interrupts to the selected line */
    if (InterruptLine == FDCAN_INTERRUPT_LINE0)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d109      	bne.n	8001c4c <HAL_FDCAN_ConfigInterruptLines+0x44>
    {
      CLEAR_BIT(hfdcan->Instance->ILS, ITList);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	43d9      	mvns	r1, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	400a      	ands	r2, r1
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4a:	e007      	b.n	8001c5c <HAL_FDCAN_ConfigInterruptLines+0x54>
    }
    else /* InterruptLine == FDCAN_INTERRUPT_LINE1 */
    {
      SET_BIT(hfdcan->Instance->ILS, ITList);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e006      	b.n	8001c6e <HAL_FDCAN_ConfigInterruptLines+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	2202      	movs	r2, #2
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
  }
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b006      	add	sp, #24
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c82:	2017      	movs	r0, #23
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	215c      	movs	r1, #92	; 0x5c
 8001c8a:	5c52      	ldrb	r2, [r2, r1]
 8001c8c:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c8e:	0002      	movs	r2, r0
 8001c90:	18bb      	adds	r3, r7, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d004      	beq.n	8001ca2 <HAL_FDCAN_ActivateNotification+0x2c>
 8001c98:	18bb      	adds	r3, r7, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d000      	beq.n	8001ca2 <HAL_FDCAN_ActivateNotification+0x2c>
 8001ca0:	e0b4      	b.n	8001e0c <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2207      	movs	r2, #7
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d003      	beq.n	8001cba <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d034      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2238      	movs	r2, #56	; 0x38
 8001cbe:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001cc0:	d003      	beq.n	8001cca <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d02c      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	23e0      	movs	r3, #224	; 0xe0
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001cd2:	d003      	beq.n	8001cdc <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d023      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	23f0      	movs	r3, #240	; 0xf0
 8001ce0:	015b      	lsls	r3, r3, #5
 8001ce2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001ce4:	d003      	beq.n	8001cee <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	4013      	ands	r3, r2
 8001cec:	d01a      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	23e0      	movs	r3, #224	; 0xe0
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cf6:	d003      	beq.n	8001d00 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d011      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d08:	d003      	beq.n	8001d12 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d008      	beq.n	8001d24 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	23fc      	movs	r3, #252	; 0xfc
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d1a:	d00b      	beq.n	8001d34 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	4013      	ands	r3, r2
 8001d22:	d107      	bne.n	8001d34 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d003      	beq.n	8001d44 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d134      	bne.n	8001dae <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2238      	movs	r2, #56	; 0x38
 8001d48:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001d4a:	d003      	beq.n	8001d54 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d12c      	bne.n	8001dae <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	23e0      	movs	r3, #224	; 0xe0
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d5c:	d003      	beq.n	8001d66 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2204      	movs	r2, #4
 8001d62:	4013      	ands	r3, r2
 8001d64:	d123      	bne.n	8001dae <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	23f0      	movs	r3, #240	; 0xf0
 8001d6a:	015b      	lsls	r3, r3, #5
 8001d6c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d6e:	d003      	beq.n	8001d78 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2208      	movs	r2, #8
 8001d74:	4013      	ands	r3, r2
 8001d76:	d11a      	bne.n	8001dae <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	23e0      	movs	r3, #224	; 0xe0
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d80:	d003      	beq.n	8001d8a <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2210      	movs	r2, #16
 8001d86:	4013      	ands	r3, r2
 8001d88:	d111      	bne.n	8001dae <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d92:	d003      	beq.n	8001d9c <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2220      	movs	r2, #32
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d108      	bne.n	8001dae <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	23fc      	movs	r3, #252	; 0xfc
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001da4:	d00b      	beq.n	8001dbe <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	4013      	ands	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2102      	movs	r1, #2
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	22dc      	movs	r2, #220	; 0xdc
 8001dcc:	5899      	ldr	r1, [r3, r2]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	21dc      	movs	r1, #220	; 0xdc
 8001dd8:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	22e0      	movs	r2, #224	; 0xe0
 8001dea:	5899      	ldr	r1, [r3, r2]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	21e0      	movs	r1, #224	; 0xe0
 8001df6:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e006      	b.n	8001e1a <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	2202      	movs	r2, #2
 8001e12:	431a      	orrs	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
  }
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b006      	add	sp, #24
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b08c      	sub	sp, #48	; 0x30
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e30:	23e0      	movs	r3, #224	; 0xe0
 8001e32:	015b      	lsls	r3, r3, #5
 8001e34:	4013      	ands	r3, r2
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	4013      	ands	r3, r2
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	4013      	ands	r3, r2
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e62:	2238      	movs	r2, #56	; 0x38
 8001e64:	4013      	ands	r3, r2
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	4013      	ands	r3, r2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e7a:	23f1      	movs	r3, #241	; 0xf1
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	4013      	ands	r3, r2
 8001e80:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e94:	23e0      	movs	r3, #224	; 0xe0
 8001e96:	031b      	lsls	r3, r3, #12
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	099b      	lsrs	r3, r3, #6
 8001ec8:	001a      	movs	r2, r3
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 f91b 	bl	8002116 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d01c      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d016      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	22d8      	movs	r2, #216	; 0xd8
 8001efe:	589b      	ldr	r3, [r3, r2]
 8001f00:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	22e0      	movs	r2, #224	; 0xe0
 8001f08:	589a      	ldr	r2, [r3, r2]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	0052      	lsls	r2, r2, #1
 8001f18:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 f8df 	bl	80020e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f32:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f8b8 	bl	80020b0 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f4c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7fe ff5f 	bl	8000e18 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7fe ff8e 	bl	8000e90 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0a5b      	lsrs	r3, r3, #9
 8001f78:	001a      	movs	r2, r3
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d00e      	beq.n	8001f9e <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	0a5b      	lsrs	r3, r3, #9
 8001f84:	001a      	movs	r2, r3
 8001f86:	2301      	movs	r3, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d008      	beq.n	8001f9e <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f892 	bl	80020c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	09db      	lsrs	r3, r3, #7
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d01b      	beq.n	8001fe2 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	001a      	movs	r2, r3
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d015      	beq.n	8001fe2 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	22d4      	movs	r2, #212	; 0xd4
 8001fbc:	589b      	ldr	r3, [r3, r2]
 8001fbe:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	22dc      	movs	r2, #220	; 0xdc
 8001fc6:	589a      	ldr	r2, [r3, r2]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	0011      	movs	r1, r2
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f878 	bl	80020d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	0b5b      	lsrs	r3, r3, #13
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	d00e      	beq.n	800200c <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	0b5b      	lsrs	r3, r3, #13
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d008      	beq.n	800200c <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	0192      	lsls	r2, r2, #6
 8002002:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f000 f875 	bl	80020f6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	0bdb      	lsrs	r3, r3, #15
 8002010:	001a      	movs	r2, r3
 8002012:	2301      	movs	r3, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d00e      	beq.n	8002036 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	0bdb      	lsrs	r3, r3, #15
 800201c:	001a      	movs	r2, r3
 800201e:	2301      	movs	r3, #1
 8002020:	4013      	ands	r3, r2
 8002022:	d008      	beq.n	8002036 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f868 	bl	8002106 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0b9b      	lsrs	r3, r3, #14
 800203a:	001a      	movs	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	4013      	ands	r3, r2
 8002040:	d010      	beq.n	8002064 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	0b9b      	lsrs	r3, r3, #14
 8002046:	001a      	movs	r2, r3
 8002048:	2301      	movs	r3, #1
 800204a:	4013      	ands	r3, r2
 800204c:	d00a      	beq.n	8002064 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	01d2      	lsls	r2, r2, #7
 8002056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f85c 	bl	8002136 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f83f 	bl	8002126 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b00c      	add	sp, #48	; 0x30
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b002      	add	sp, #8
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b002      	add	sp, #8
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002150:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8002152:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d105      	bne.n	800216a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	22d4      	movs	r2, #212	; 0xd4
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4694      	mov	ip, r2
 8002166:	4463      	add	r3, ip
 8002168:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	589b      	ldr	r3, [r3, r2]
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	041a      	lsls	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3370      	adds	r3, #112	; 0x70
 8002192:	001a      	movs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	589b      	ldr	r3, [r3, r2]
 80021a0:	4a1e      	ldr	r2, [pc, #120]	; (800221c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	061a      	lsls	r2, r3, #24
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	33b0      	adds	r3, #176	; 0xb0
 80021ba:	001a      	movs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3389      	adds	r3, #137	; 0x89
 80021c4:	33ff      	adds	r3, #255	; 0xff
 80021c6:	001a      	movs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2298      	movs	r2, #152	; 0x98
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	189a      	adds	r2, r3, r2
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	229e      	movs	r2, #158	; 0x9e
 80021dc:	0092      	lsls	r2, r2, #2
 80021de:	189a      	adds	r2, r3, r2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e005      	b.n	80021f6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3304      	adds	r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	22d4      	movs	r2, #212	; 0xd4
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4694      	mov	ip, r2
 80021fe:	4463      	add	r3, ip
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3f1      	bcc.n	80021ea <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bd80      	pop	{r7, pc}
 8002210:	4000b400 	.word	0x4000b400
 8002214:	40006800 	.word	0x40006800
 8002218:	ffe0ffff 	.word	0xffe0ffff
 800221c:	f0ffffff 	.word	0xf0ffffff

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e14d      	b.n	80024cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4091      	lsls	r1, r2
 800223a:	000a      	movs	r2, r1
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d100      	bne.n	8002248 <HAL_GPIO_Init+0x28>
 8002246:	e13e      	b.n	80024c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	4013      	ands	r3, r2
 8002250:	2b01      	cmp	r3, #1
 8002252:	d005      	beq.n	8002260 <HAL_GPIO_Init+0x40>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	4013      	ands	r3, r2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d130      	bne.n	80022c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	409a      	lsls	r2, r3
 800226e:	0013      	movs	r3, r2
 8002270:	43da      	mvns	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	0013      	movs	r3, r2
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002296:	2201      	movs	r2, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
 800229c:	0013      	movs	r3, r2
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	2201      	movs	r2, #1
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d017      	beq.n	80022fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	409a      	lsls	r2, r3
 80022dc:	0013      	movs	r3, r2
 80022de:	43da      	mvns	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	409a      	lsls	r2, r3
 80022f0:	0013      	movs	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d123      	bne.n	8002352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	58d3      	ldr	r3, [r2, r3]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2207      	movs	r2, #7
 800231c:	4013      	ands	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	43da      	mvns	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2107      	movs	r1, #7
 8002336:	400b      	ands	r3, r1
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	6939      	ldr	r1, [r7, #16]
 8002350:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2203      	movs	r2, #3
 8002370:	401a      	ands	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	23c0      	movs	r3, #192	; 0xc0
 800238c:	029b      	lsls	r3, r3, #10
 800238e:	4013      	ands	r3, r2
 8002390:	d100      	bne.n	8002394 <HAL_GPIO_Init+0x174>
 8002392:	e098      	b.n	80024c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002394:	4a53      	ldr	r2, [pc, #332]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3318      	adds	r3, #24
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	589b      	ldr	r3, [r3, r2]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2203      	movs	r2, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	220f      	movs	r2, #15
 80023ac:	409a      	lsls	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	23a0      	movs	r3, #160	; 0xa0
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	429a      	cmp	r2, r3
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x1d6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_GPIO_Init+0x2c8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1d2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_GPIO_Init+0x2cc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1ce>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1ca>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a45      	ldr	r2, [pc, #276]	; (80024f4 <HAL_GPIO_Init+0x2d4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1c6>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023f6:	2300      	movs	r3, #0
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	2103      	movs	r1, #3
 80023fc:	400a      	ands	r2, r1
 80023fe:	00d2      	lsls	r2, r2, #3
 8002400:	4093      	lsls	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002408:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3318      	adds	r3, #24
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002416:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	035b      	lsls	r3, r3, #13
 800242e:	4013      	ands	r3, r2
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43da      	mvns	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	039b      	lsls	r3, r3, #14
 8002458:	4013      	ands	r3, r2
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 800246c:	2384      	movs	r3, #132	; 0x84
 800246e:	58d3      	ldr	r3, [r2, r3]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002490:	4914      	ldr	r1, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 8002492:	2284      	movs	r2, #132	; 0x84
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	58d3      	ldr	r3, [r2, r3]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4013      	ands	r3, r2
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024be:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	1e13      	subs	r3, r2, #0
 80024d6:	d000      	beq.n	80024da <HAL_GPIO_Init+0x2ba>
 80024d8:	e6aa      	b.n	8002230 <HAL_GPIO_Init+0x10>
  }
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b006      	add	sp, #24
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021800 	.word	0x40021800
 80024e8:	50000400 	.word	0x50000400
 80024ec:	50000800 	.word	0x50000800
 80024f0:	50000c00 	.word	0x50000c00
 80024f4:	50001000 	.word	0x50001000

080024f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	000a      	movs	r2, r1
 8002502:	1cbb      	adds	r3, r7, #2
 8002504:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	1cba      	adds	r2, r7, #2
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	4013      	ands	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002512:	230f      	movs	r3, #15
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e003      	b.n	8002524 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002524:	230f      	movs	r3, #15
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	781b      	ldrb	r3, [r3, #0]
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b004      	add	sp, #16
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	0008      	movs	r0, r1
 800253c:	0011      	movs	r1, r2
 800253e:	1cbb      	adds	r3, r7, #2
 8002540:	1c02      	adds	r2, r0, #0
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	1c7b      	adds	r3, r7, #1
 8002546:	1c0a      	adds	r2, r1, #0
 8002548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800254a:	1c7b      	adds	r3, r7, #1
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002552:	1cbb      	adds	r3, r7, #2
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800255a:	e003      	b.n	8002564 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255c:	1cbb      	adds	r3, r7, #2
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	000a      	movs	r2, r1
 8002576:	1cbb      	adds	r3, r7, #2
 8002578:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002580:	1cbb      	adds	r3, r7, #2
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	1cb9      	adds	r1, r7, #2
 8002590:	8809      	ldrh	r1, [r1, #0]
 8002592:	400b      	ands	r3, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e082      	b.n	80026bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7fe fda7 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2241      	movs	r2, #65	; 0x41
 80025d6:	2124      	movs	r1, #36	; 0x24
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	438a      	bics	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_I2C_Init+0x120>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4931      	ldr	r1, [pc, #196]	; (80026c8 <HAL_I2C_Init+0x124>)
 8002604:	400a      	ands	r2, r1
 8002606:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	0209      	lsls	r1, r1, #8
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e007      	b.n	8002632 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2184      	movs	r1, #132	; 0x84
 800262c:	0209      	lsls	r1, r1, #8
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d104      	bne.n	8002644 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	491f      	ldr	r1, [pc, #124]	; (80026cc <HAL_I2C_Init+0x128>)
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <HAL_I2C_Init+0x124>)
 8002660:	400a      	ands	r2, r1
 8002662:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	431a      	orrs	r2, r3
 800266e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69d9      	ldr	r1, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2241      	movs	r2, #65	; 0x41
 80026a8:	2120      	movs	r1, #32
 80026aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2242      	movs	r2, #66	; 0x42
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	f0ffffff 	.word	0xf0ffffff
 80026c8:	ffff7fff 	.word	0xffff7fff
 80026cc:	02008000 	.word	0x02008000

080026d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2241      	movs	r2, #65	; 0x41
 80026de:	5c9b      	ldrb	r3, [r3, r2]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d138      	bne.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	5c9b      	ldrb	r3, [r3, r2]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e032      	b.n	800275a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2240      	movs	r2, #64	; 0x40
 80026f8:	2101      	movs	r1, #1
 80026fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2241      	movs	r2, #65	; 0x41
 8002700:	2124      	movs	r1, #36	; 0x24
 8002702:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	438a      	bics	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4911      	ldr	r1, [pc, #68]	; (8002764 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002720:	400a      	ands	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2101      	movs	r1, #1
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2241      	movs	r2, #65	; 0x41
 8002748:	2120      	movs	r1, #32
 800274a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	ffffefff 	.word	0xffffefff

08002768 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2241      	movs	r2, #65	; 0x41
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	d139      	bne.n	80027f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	5c9b      	ldrb	r3, [r3, r2]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002788:	2302      	movs	r3, #2
 800278a:	e033      	b.n	80027f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	2101      	movs	r1, #1
 8002792:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2241      	movs	r2, #65	; 0x41
 8002798:	2124      	movs	r1, #36	; 0x24
 800279a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2241      	movs	r2, #65	; 0x41
 80027e2:	2120      	movs	r1, #32
 80027e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2240      	movs	r2, #64	; 0x40
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fffff0ff 	.word	0xfffff0ff

08002800 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002802:	b08f      	sub	sp, #60	; 0x3c
 8002804:	af0a      	add	r7, sp, #40	; 0x28
 8002806:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e10a      	b.n	8002a28 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a86      	ldr	r2, [pc, #536]	; (8002a30 <HAL_PCD_Init+0x230>)
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d108      	bne.n	8002830 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	23af      	movs	r3, #175	; 0xaf
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	2100      	movs	r1, #0
 8002826:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f005 f988 	bl	8007b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a7f      	ldr	r2, [pc, #508]	; (8002a30 <HAL_PCD_Init+0x230>)
 8002834:	2103      	movs	r1, #3
 8002836:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0018      	movs	r0, r3
 8002844:	f002 fa40 	bl	8004cc8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e05b      	b.n	800290a <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002852:	240f      	movs	r4, #15
 8002854:	193b      	adds	r3, r7, r4
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	203d      	movs	r0, #61	; 0x3d
 800285c:	0013      	movs	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	189b      	adds	r3, r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	18cb      	adds	r3, r1, r3
 8002866:	181b      	adds	r3, r3, r0
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800286c:	193b      	adds	r3, r7, r4
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	203c      	movs	r0, #60	; 0x3c
 8002874:	0013      	movs	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	189b      	adds	r3, r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	18cb      	adds	r3, r1, r3
 800287e:	181b      	adds	r3, r3, r0
 8002880:	193a      	adds	r2, r7, r4
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002886:	0025      	movs	r5, r4
 8002888:	193b      	adds	r3, r7, r4
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	197b      	adds	r3, r7, r5
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b29c      	uxth	r4, r3
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	2048      	movs	r0, #72	; 0x48
 8002896:	0013      	movs	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	189b      	adds	r3, r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	18cb      	adds	r3, r1, r3
 80028a0:	181b      	adds	r3, r3, r0
 80028a2:	1c22      	adds	r2, r4, #0
 80028a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a6:	197b      	adds	r3, r7, r5
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	203f      	movs	r0, #63	; 0x3f
 80028ae:	0013      	movs	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	18cb      	adds	r3, r1, r3
 80028b8:	181b      	adds	r3, r3, r0
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028be:	197b      	adds	r3, r7, r5
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	0013      	movs	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	18cb      	adds	r3, r1, r3
 80028ce:	334c      	adds	r3, #76	; 0x4c
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028d4:	197b      	adds	r3, r7, r5
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	0013      	movs	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	18cb      	adds	r3, r1, r3
 80028e4:	3350      	adds	r3, #80	; 0x50
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ea:	197b      	adds	r3, r7, r5
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	0013      	movs	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	18cb      	adds	r3, r1, r3
 80028fa:	3354      	adds	r3, #84	; 0x54
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	197b      	adds	r3, r7, r5
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	197b      	adds	r3, r7, r5
 8002906:	3201      	adds	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	210f      	movs	r1, #15
 800290c:	187b      	adds	r3, r7, r1
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d39c      	bcc.n	8002852 <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e056      	b.n	80029ce <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002920:	240f      	movs	r4, #15
 8002922:	193b      	adds	r3, r7, r4
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	237e      	movs	r3, #126	; 0x7e
 800292a:	33ff      	adds	r3, #255	; 0xff
 800292c:	0019      	movs	r1, r3
 800292e:	0013      	movs	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	189b      	adds	r3, r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	18c3      	adds	r3, r0, r3
 8002938:	185b      	adds	r3, r3, r1
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800293e:	193b      	adds	r3, r7, r4
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	23be      	movs	r3, #190	; 0xbe
 8002946:	0059      	lsls	r1, r3, #1
 8002948:	0013      	movs	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	189b      	adds	r3, r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	18c3      	adds	r3, r0, r3
 8002952:	185b      	adds	r3, r3, r1
 8002954:	193a      	adds	r2, r7, r4
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	33ff      	adds	r3, #255	; 0xff
 8002964:	0019      	movs	r1, r3
 8002966:	0013      	movs	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	189b      	adds	r3, r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	18c3      	adds	r3, r0, r3
 8002970:	185b      	adds	r3, r3, r1
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	23c6      	movs	r3, #198	; 0xc6
 800297e:	0059      	lsls	r1, r3, #1
 8002980:	0013      	movs	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	189b      	adds	r3, r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	18c3      	adds	r3, r0, r3
 800298a:	185b      	adds	r3, r3, r1
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	23c8      	movs	r3, #200	; 0xc8
 8002998:	0059      	lsls	r1, r3, #1
 800299a:	0013      	movs	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	18c3      	adds	r3, r0, r3
 80029a4:	185b      	adds	r3, r3, r1
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029aa:	193b      	adds	r3, r7, r4
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	23ca      	movs	r3, #202	; 0xca
 80029b2:	0059      	lsls	r1, r3, #1
 80029b4:	0013      	movs	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	189b      	adds	r3, r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	18c3      	adds	r3, r0, r3
 80029be:	185b      	adds	r3, r3, r1
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	3201      	adds	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	230f      	movs	r3, #15
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3a1      	bcc.n	8002920 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681c      	ldr	r4, [r3, #0]
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	466b      	mov	r3, sp
 80029e4:	001a      	movs	r2, r3
 80029e6:	0003      	movs	r3, r0
 80029e8:	3310      	adds	r3, #16
 80029ea:	cb62      	ldmia	r3!, {r1, r5, r6}
 80029ec:	c262      	stmia	r2!, {r1, r5, r6}
 80029ee:	cb62      	ldmia	r3!, {r1, r5, r6}
 80029f0:	c262      	stmia	r2!, {r1, r5, r6}
 80029f2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80029f4:	c262      	stmia	r2!, {r1, r5, r6}
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	6841      	ldr	r1, [r0, #4]
 80029fc:	6882      	ldr	r2, [r0, #8]
 80029fe:	68c3      	ldr	r3, [r0, #12]
 8002a00:	0020      	movs	r0, r4
 8002a02:	f002 f993 	bl	8004d2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2238      	movs	r2, #56	; 0x38
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_PCD_Init+0x230>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d103      	bne.n	8002a26 <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 fa4f 	bl	8002ec4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b005      	add	sp, #20
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a30:	000002bd 	.word	0x000002bd

08002a34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	23af      	movs	r3, #175	; 0xaf
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_PCD_Start+0x18>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e014      	b.n	8002a76 <HAL_PCD_Start+0x42>
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	23af      	movs	r3, #175	; 0xaf
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	2101      	movs	r1, #1
 8002a54:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f002 f920 	bl	8004ca0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f003 ff4b 	bl	8006900 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	23af      	movs	r3, #175	; 0xaf
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	2100      	movs	r1, #0
 8002a72:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a7e:	b590      	push	{r4, r7, lr}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	000c      	movs	r4, r1
 8002a88:	0010      	movs	r0, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	1cfb      	adds	r3, r7, #3
 8002a8e:	1c22      	adds	r2, r4, #0
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	003b      	movs	r3, r7
 8002a94:	1c02      	adds	r2, r0, #0
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	1cbb      	adds	r3, r7, #2
 8002a9a:	1c0a      	adds	r2, r1, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a9e:	230b      	movs	r3, #11
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa6:	1cfb      	adds	r3, r7, #3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da10      	bge.n	8002ad2 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	1cfb      	adds	r3, r7, #3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	0013      	movs	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	189b      	adds	r3, r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	3338      	adds	r3, #56	; 0x38
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	18d3      	adds	r3, r2, r3
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
 8002ad0:	e010      	b.n	8002af4 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	1cfb      	adds	r3, r7, #3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	401a      	ands	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	3379      	adds	r3, #121	; 0x79
 8002ae4:	33ff      	adds	r3, #255	; 0xff
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	3304      	adds	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002af4:	1cfb      	adds	r3, r7, #3
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2207      	movs	r2, #7
 8002afa:	4013      	ands	r3, r2
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b02:	003b      	movs	r3, r7
 8002b04:	881a      	ldrh	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1cba      	adds	r2, r7, #2
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b24:	1cbb      	adds	r3, r7, #2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d102      	bne.n	8002b32 <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	23af      	movs	r3, #175	; 0xaf
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_EP_Open+0xc4>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e013      	b.n	8002b6a <HAL_PCD_EP_Open+0xec>
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	23af      	movs	r3, #175	; 0xaf
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	2101      	movs	r1, #1
 8002b4a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	0011      	movs	r1, r2
 8002b54:	0018      	movs	r0, r3
 8002b56:	f002 f913 	bl	8004d80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	23af      	movs	r3, #175	; 0xaf
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	2100      	movs	r1, #0
 8002b62:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002b64:	230b      	movs	r3, #11
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b005      	add	sp, #20
 8002b70:	bd90      	pop	{r4, r7, pc}

08002b72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	1cfb      	adds	r3, r7, #3
 8002b7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b80:	1cfb      	adds	r3, r7, #3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da10      	bge.n	8002bac <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	1cfb      	adds	r3, r7, #3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2207      	movs	r2, #7
 8002b90:	401a      	ands	r2, r3
 8002b92:	0013      	movs	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	3338      	adds	r3, #56	; 0x38
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	18d3      	adds	r3, r2, r3
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	705a      	strb	r2, [r3, #1]
 8002baa:	e010      	b.n	8002bce <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	1cfb      	adds	r3, r7, #3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	3379      	adds	r3, #121	; 0x79
 8002bbe:	33ff      	adds	r3, #255	; 0xff
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	18d3      	adds	r3, r2, r3
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bce:	1cfb      	adds	r3, r7, #3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	23af      	movs	r3, #175	; 0xaf
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	5cd3      	ldrb	r3, [r2, r3]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_PCD_EP_Close+0x7a>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e011      	b.n	8002c10 <HAL_PCD_EP_Close+0x9e>
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	23af      	movs	r3, #175	; 0xaf
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f002 fc02 	bl	8005408 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	23af      	movs	r3, #175	; 0xaf
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	200b      	movs	r0, #11
 8002c26:	183b      	adds	r3, r7, r0
 8002c28:	1c0a      	adds	r2, r1, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2c:	0001      	movs	r1, r0
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2207      	movs	r2, #7
 8002c34:	401a      	ands	r2, r3
 8002c36:	0013      	movs	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	3379      	adds	r3, #121	; 0x79
 8002c40:	33ff      	adds	r3, #255	; 0xff
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	3304      	adds	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2207      	movs	r2, #7
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2207      	movs	r2, #7
 8002c76:	4013      	ands	r3, r2
 8002c78:	d107      	bne.n	8002c8a <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f002 fd26 	bl	80056d4 <USB_EPStartXfer>
 8002c88:	e006      	b.n	8002c98 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	0011      	movs	r1, r2
 8002c92:	0018      	movs	r0, r3
 8002c94:	f002 fd1e 	bl	80056d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	000a      	movs	r2, r1
 8002cac:	1cfb      	adds	r3, r7, #3
 8002cae:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb0:	1cfb      	adds	r3, r7, #3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	23cc      	movs	r3, #204	; 0xcc
 8002cbc:	0059      	lsls	r1, r3, #1
 8002cbe:	0013      	movs	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	18c3      	adds	r3, r0, r3
 8002cc8:	185b      	adds	r3, r3, r1
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	200b      	movs	r0, #11
 8002ce2:	183b      	adds	r3, r7, r0
 8002ce4:	1c0a      	adds	r2, r1, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2207      	movs	r2, #7
 8002cee:	401a      	ands	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	3338      	adds	r3, #56	; 0x38
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	3304      	adds	r3, #4
 8002d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2224      	movs	r2, #36	; 0x24
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2201      	movs	r2, #1
 8002d26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d107      	bne.n	8002d50 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f002 fcc3 	bl	80056d4 <USB_EPStartXfer>
 8002d4e:	e006      	b.n	8002d5e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	0011      	movs	r1, r2
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f002 fcbb 	bl	80056d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b006      	add	sp, #24
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	000a      	movs	r2, r1
 8002d72:	1cfb      	adds	r3, r7, #3
 8002d74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d76:	1cfb      	adds	r3, r7, #3
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d901      	bls.n	8002d8a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e048      	b.n	8002e1c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8a:	1cfb      	adds	r3, r7, #3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da10      	bge.n	8002db6 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d94:	1cfb      	adds	r3, r7, #3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2207      	movs	r2, #7
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	189b      	adds	r3, r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3338      	adds	r3, #56	; 0x38
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	18d3      	adds	r3, r2, r3
 8002daa:	3304      	adds	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	705a      	strb	r2, [r3, #1]
 8002db4:	e00e      	b.n	8002dd4 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db6:	1cfb      	adds	r3, r7, #3
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	0013      	movs	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	3379      	adds	r3, #121	; 0x79
 8002dc4:	33ff      	adds	r3, #255	; 0xff
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	3304      	adds	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	1cfb      	adds	r3, r7, #3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2207      	movs	r2, #7
 8002de0:	4013      	ands	r3, r2
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	23af      	movs	r3, #175	; 0xaf
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_EP_SetStall+0x90>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e011      	b.n	8002e1c <HAL_PCD_EP_SetStall+0xb4>
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	23af      	movs	r3, #175	; 0xaf
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	2101      	movs	r1, #1
 8002e00:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f003 fd36 	bl	800687c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	23af      	movs	r3, #175	; 0xaf
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	2100      	movs	r1, #0
 8002e18:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b004      	add	sp, #16
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	0008      	movs	r0, r1
 8002e2e:	0011      	movs	r1, r2
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	240a      	movs	r4, #10
 8002e34:	193b      	adds	r3, r7, r4
 8002e36:	1c02      	adds	r2, r0, #0
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	1c0a      	adds	r2, r1, #0
 8002e40:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e42:	0021      	movs	r1, r4
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	2207      	movs	r2, #7
 8002e58:	401a      	ands	r2, r3
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	3338      	adds	r3, #56	; 0x38
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	3304      	adds	r3, #4
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e00c      	b.n	8002e88 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e6e:	230a      	movs	r3, #10
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	0013      	movs	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	189b      	adds	r3, r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3379      	adds	r3, #121	; 0x79
 8002e7e:	33ff      	adds	r3, #255	; 0xff
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	3304      	adds	r3, #4
 8002e86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e88:	2308      	movs	r3, #8
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	809a      	strh	r2, [r3, #4]
 8002ea0:	e00b      	b.n	8002eba <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b007      	add	sp, #28
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	23bf      	movs	r3, #191	; 0xbf
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	2101      	movs	r1, #1
 8002eda:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	23bd      	movs	r3, #189	; 0xbd
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	2201      	movs	r2, #1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_PWREx_EnableVddUSB+0x18>)
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_PWREx_EnableVddUSB+0x18>)
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	00c9      	lsls	r1, r1, #3
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40007000 	.word	0x40007000

08002f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d11f      	bne.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	189b      	adds	r3, r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4912      	ldr	r1, [pc, #72]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd f8e6 	bl	8000128 <__udivsi3>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f62:	e008      	b.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e001      	b.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e009      	b.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0ed      	beq.n	8002f64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b004      	add	sp, #16
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	40007000 	.word	0x40007000
 8002f98:	fffff9ff 	.word	0xfffff9ff
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	000f4240 	.word	0x000f4240

08002fa4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	23e0      	movs	r3, #224	; 0xe0
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	4013      	ands	r3, r2
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f000 fb50 	bl	8003670 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d100      	bne.n	8002fdc <HAL_RCC_OscConfig+0x20>
 8002fda:	e07c      	b.n	80030d6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fdc:	4bc3      	ldr	r3, [pc, #780]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2238      	movs	r2, #56	; 0x38
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe6:	4bc1      	ldr	r3, [pc, #772]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2203      	movs	r2, #3
 8002fec:	4013      	ands	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_OscConfig+0x40>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d002      	beq.n	8003002 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d10b      	bne.n	800301a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003002:	4bba      	ldr	r3, [pc, #744]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	4013      	ands	r3, r2
 800300c:	d062      	beq.n	80030d4 <HAL_RCC_OscConfig+0x118>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d15e      	bne.n	80030d4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e32a      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	025b      	lsls	r3, r3, #9
 8003022:	429a      	cmp	r2, r3
 8003024:	d107      	bne.n	8003036 <HAL_RCC_OscConfig+0x7a>
 8003026:	4bb1      	ldr	r3, [pc, #708]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4bb0      	ldr	r3, [pc, #704]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0249      	lsls	r1, r1, #9
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e020      	b.n	8003078 <HAL_RCC_OscConfig+0xbc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	23a0      	movs	r3, #160	; 0xa0
 800303c:	02db      	lsls	r3, r3, #11
 800303e:	429a      	cmp	r2, r3
 8003040:	d10e      	bne.n	8003060 <HAL_RCC_OscConfig+0xa4>
 8003042:	4baa      	ldr	r3, [pc, #680]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4ba9      	ldr	r3, [pc, #676]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	02c9      	lsls	r1, r1, #11
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	4ba6      	ldr	r3, [pc, #664]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4ba5      	ldr	r3, [pc, #660]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	0249      	lsls	r1, r1, #9
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xbc>
 8003060:	4ba2      	ldr	r3, [pc, #648]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4ba1      	ldr	r3, [pc, #644]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003066:	49a2      	ldr	r1, [pc, #648]	; (80032f0 <HAL_RCC_OscConfig+0x334>)
 8003068:	400a      	ands	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	4b9f      	ldr	r3, [pc, #636]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b9e      	ldr	r3, [pc, #632]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003072:	49a0      	ldr	r1, [pc, #640]	; (80032f4 <HAL_RCC_OscConfig+0x338>)
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d014      	beq.n	80030aa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fa3c 	bl	80014fc <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308a:	f7fe fa37 	bl	80014fc <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e2e9      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309c:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	4013      	ands	r3, r2
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0xce>
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fa27 	bl	80014fc <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fa22 	bl	80014fc <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2d4      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	029b      	lsls	r3, r3, #10
 80030ce:	4013      	ands	r3, r2
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0xf8>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2202      	movs	r2, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	d100      	bne.n	80030e2 <HAL_RCC_OscConfig+0x126>
 80030e0:	e099      	b.n	8003216 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e2:	4b82      	ldr	r3, [pc, #520]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2238      	movs	r2, #56	; 0x38
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ec:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2203      	movs	r2, #3
 80030f2:	4013      	ands	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0x146>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d002      	beq.n	8003108 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d135      	bne.n	8003174 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	4b78      	ldr	r3, [pc, #480]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4013      	ands	r3, r2
 8003112:	d005      	beq.n	8003120 <HAL_RCC_OscConfig+0x164>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e2a7      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b72      	ldr	r3, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a74      	ldr	r2, [pc, #464]	; (80032f8 <HAL_RCC_OscConfig+0x33c>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	4b6e      	ldr	r3, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d112      	bne.n	8003162 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800313c:	4b6b      	ldr	r3, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6e      	ldr	r2, [pc, #440]	; (80032fc <HAL_RCC_OscConfig+0x340>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0adb      	lsrs	r3, r3, #11
 8003156:	2207      	movs	r2, #7
 8003158:	4013      	ands	r3, r2
 800315a:	4a69      	ldr	r2, [pc, #420]	; (8003300 <HAL_RCC_OscConfig+0x344>)
 800315c:	40da      	lsrs	r2, r3
 800315e:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCC_OscConfig+0x348>)
 8003160:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003162:	4b69      	ldr	r3, [pc, #420]	; (8003308 <HAL_RCC_OscConfig+0x34c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	f7fe f96c 	bl	8001444 <HAL_InitTick>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d051      	beq.n	8003214 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e27d      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d030      	beq.n	80031de <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800317c:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <HAL_RCC_OscConfig+0x340>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	4b58      	ldr	r3, [pc, #352]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b56      	ldr	r3, [pc, #344]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b55      	ldr	r3, [pc, #340]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0049      	lsls	r1, r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe f9ad 	bl	80014fc <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe f9a8 	bl	80014fc <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e25a      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4013      	ands	r3, r2
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <HAL_RCC_OscConfig+0x33c>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	4b45      	ldr	r3, [pc, #276]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	e01b      	b.n	8003216 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031de:	4b43      	ldr	r3, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b42      	ldr	r3, [pc, #264]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80031e4:	4949      	ldr	r1, [pc, #292]	; (800330c <HAL_RCC_OscConfig+0x350>)
 80031e6:	400a      	ands	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe f987 	bl	80014fc <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f4:	f7fe f982 	bl	80014fc <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e234      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4013      	ands	r3, r2
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x238>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003214:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2208      	movs	r2, #8
 800321c:	4013      	ands	r3, r2
 800321e:	d047      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003220:	4b32      	ldr	r3, [pc, #200]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2238      	movs	r2, #56	; 0x38
 8003226:	4013      	ands	r3, r2
 8003228:	2b18      	cmp	r3, #24
 800322a:	d10a      	bne.n	8003242 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d03c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2f4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d138      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e216      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d019      	beq.n	800327e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 800324c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003250:	2101      	movs	r1, #1
 8003252:	430a      	orrs	r2, r1
 8003254:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe f951 	bl	80014fc <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe f94c 	bl	80014fc <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1fe      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d0f1      	beq.n	8003260 <HAL_RCC_OscConfig+0x2a4>
 800327c:	e018      	b.n	80032b0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003280:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 8003284:	2101      	movs	r1, #1
 8003286:	438a      	bics	r2, r1
 8003288:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe f937 	bl	80014fc <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe f932 	bl	80014fc <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1e4      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	2202      	movs	r2, #2
 80032ac:	4013      	ands	r3, r2
 80032ae:	d1f1      	bne.n	8003294 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2204      	movs	r2, #4
 80032b6:	4013      	ands	r3, r2
 80032b8:	d100      	bne.n	80032bc <HAL_RCC_OscConfig+0x300>
 80032ba:	e0c7      	b.n	800344c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032bc:	231f      	movs	r3, #31
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2238      	movs	r2, #56	; 0x38
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d11f      	bne.n	8003310 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_OscConfig+0x330>)
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	2202      	movs	r2, #2
 80032d6:	4013      	ands	r3, r2
 80032d8:	d100      	bne.n	80032dc <HAL_RCC_OscConfig+0x320>
 80032da:	e0b7      	b.n	800344c <HAL_RCC_OscConfig+0x490>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d000      	beq.n	80032e6 <HAL_RCC_OscConfig+0x32a>
 80032e4:	e0b2      	b.n	800344c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e1c2      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	40021000 	.word	0x40021000
 80032f0:	fffeffff 	.word	0xfffeffff
 80032f4:	fffbffff 	.word	0xfffbffff
 80032f8:	ffff80ff 	.word	0xffff80ff
 80032fc:	ffffc7ff 	.word	0xffffc7ff
 8003300:	00f42400 	.word	0x00f42400
 8003304:	20000004 	.word	0x20000004
 8003308:	20000008 	.word	0x20000008
 800330c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003310:	4bb5      	ldr	r3, [pc, #724]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	055b      	lsls	r3, r3, #21
 8003318:	4013      	ands	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_RCC_OscConfig+0x364>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x366>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d011      	beq.n	800334a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4bb0      	ldr	r3, [pc, #704]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332a:	4baf      	ldr	r3, [pc, #700]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0549      	lsls	r1, r1, #21
 8003330:	430a      	orrs	r2, r1
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
 8003334:	4bac      	ldr	r3, [pc, #688]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	055b      	lsls	r3, r3, #21
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003342:	231f      	movs	r3, #31
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334a:	4ba8      	ldr	r3, [pc, #672]	; (80035ec <HAL_RCC_OscConfig+0x630>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4013      	ands	r3, r2
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003356:	4ba5      	ldr	r3, [pc, #660]	; (80035ec <HAL_RCC_OscConfig+0x630>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4ba4      	ldr	r3, [pc, #656]	; (80035ec <HAL_RCC_OscConfig+0x630>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0049      	lsls	r1, r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003364:	f7fe f8ca 	bl	80014fc <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe f8c5 	bl	80014fc <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e177      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003380:	4b9a      	ldr	r3, [pc, #616]	; (80035ec <HAL_RCC_OscConfig+0x630>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4013      	ands	r3, r2
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3e6>
 8003394:	4b94      	ldr	r3, [pc, #592]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003396:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003398:	4b93      	ldr	r3, [pc, #588]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800339a:	2101      	movs	r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a0:	e01c      	b.n	80033dc <HAL_RCC_OscConfig+0x420>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x408>
 80033aa:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ae:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033b0:	2104      	movs	r1, #4
 80033b2:	430a      	orrs	r2, r1
 80033b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033b6:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ba:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033bc:	2101      	movs	r1, #1
 80033be:	430a      	orrs	r2, r1
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0x420>
 80033c4:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033c8:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d0:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033d4:	4b84      	ldr	r3, [pc, #528]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80033d6:	2104      	movs	r1, #4
 80033d8:	438a      	bics	r2, r1
 80033da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d014      	beq.n	800340e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe f88a 	bl	80014fc <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ec:	e009      	b.n	8003402 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe f885 	bl	80014fc <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	4a7d      	ldr	r2, [pc, #500]	; (80035f0 <HAL_RCC_OscConfig+0x634>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e136      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	4b79      	ldr	r3, [pc, #484]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2202      	movs	r2, #2
 8003408:	4013      	ands	r3, r2
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x432>
 800340c:	e013      	b.n	8003436 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fe f875 	bl	80014fc <HAL_GetTick>
 8003412:	0003      	movs	r3, r0
 8003414:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003416:	e009      	b.n	800342c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe f870 	bl	80014fc <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	4a73      	ldr	r2, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x634>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e121      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800342c:	4b6e      	ldr	r3, [pc, #440]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2202      	movs	r2, #2
 8003432:	4013      	ands	r3, r2
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003436:	231f      	movs	r3, #31
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003444:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003446:	496b      	ldr	r1, [pc, #428]	; (80035f4 <HAL_RCC_OscConfig+0x638>)
 8003448:	400a      	ands	r2, r1
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2220      	movs	r2, #32
 8003452:	4013      	ands	r3, r2
 8003454:	d039      	beq.n	80034ca <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800345e:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	03c9      	lsls	r1, r1, #15
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe f846 	bl	80014fc <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003476:	f7fe f841 	bl	80014fc <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0f3      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003488:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	4013      	ands	r3, r2
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x4ba>
 8003494:	e019      	b.n	80034ca <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003496:	4b54      	ldr	r3, [pc, #336]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800349c:	4956      	ldr	r1, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x63c>)
 800349e:	400a      	ands	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe f82b 	bl	80014fc <HAL_GetTick>
 80034a6:	0003      	movs	r3, r0
 80034a8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ac:	f7fe f826 	bl	80014fc <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0d8      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	4013      	ands	r3, r2
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d100      	bne.n	80034d4 <HAL_RCC_OscConfig+0x518>
 80034d2:	e0cc      	b.n	800366e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d4:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2238      	movs	r2, #56	; 0x38
 80034da:	4013      	ands	r3, r2
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d100      	bne.n	80034e2 <HAL_RCC_OscConfig+0x526>
 80034e0:	e07b      	b.n	80035da <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d156      	bne.n	8003598 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80034f0:	4942      	ldr	r1, [pc, #264]	; (80035fc <HAL_RCC_OscConfig+0x640>)
 80034f2:	400a      	ands	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe f801 	bl	80014fc <HAL_GetTick>
 80034fa:	0003      	movs	r3, r0
 80034fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd fffc 	bl	80014fc <HAL_GetTick>
 8003504:	0002      	movs	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0ae      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003512:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	049b      	lsls	r3, r3, #18
 800351a:	4013      	ands	r3, r2
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a37      	ldr	r2, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x644>)
 8003524:	4013      	ands	r3, r2
 8003526:	0019      	movs	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	431a      	orrs	r2, r3
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800354e:	430a      	orrs	r2, r1
 8003550:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0449      	lsls	r1, r1, #17
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003560:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	0549      	lsls	r1, r1, #21
 800356a:	430a      	orrs	r2, r1
 800356c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fd ffc5 	bl	80014fc <HAL_GetTick>
 8003572:	0003      	movs	r3, r0
 8003574:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fd ffc0 	bl	80014fc <HAL_GetTick>
 800357c:	0002      	movs	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e072      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	049b      	lsls	r3, r3, #18
 8003592:	4013      	ands	r3, r2
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x5bc>
 8003596:	e06a      	b.n	800366e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 800359e:	4917      	ldr	r1, [pc, #92]	; (80035fc <HAL_RCC_OscConfig+0x640>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd ffaa 	bl	80014fc <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fd ffa5 	bl	80014fc <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e057      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	049b      	lsls	r3, r3, #18
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_OscConfig+0x62c>)
 80035d2:	490c      	ldr	r1, [pc, #48]	; (8003604 <HAL_RCC_OscConfig+0x648>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	e049      	b.n	800366e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d112      	bne.n	8003608 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e044      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40007000 	.word	0x40007000
 80035f0:	00001388 	.word	0x00001388
 80035f4:	efffffff 	.word	0xefffffff
 80035f8:	ffbfffff 	.word	0xffbfffff
 80035fc:	feffffff 	.word	0xfeffffff
 8003600:	11c1808c 	.word	0x11c1808c
 8003604:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x6bc>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2203      	movs	r2, #3
 8003612:	401a      	ands	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	429a      	cmp	r2, r3
 800361a:	d126      	bne.n	800366a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2270      	movs	r2, #112	; 0x70
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d11f      	bne.n	800366a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	23fe      	movs	r3, #254	; 0xfe
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	401a      	ands	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	23f8      	movs	r3, #248	; 0xf8
 8003640:	039b      	lsls	r3, r3, #14
 8003642:	401a      	ands	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d10e      	bne.n	800366a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	23e0      	movs	r3, #224	; 0xe0
 8003650:	051b      	lsls	r3, r3, #20
 8003652:	401a      	ands	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	0f5b      	lsrs	r3, r3, #29
 8003660:	075a      	lsls	r2, r3, #29
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b008      	add	sp, #32
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0e9      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2207      	movs	r2, #7
 8003696:	4013      	ands	r3, r2
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d91e      	bls.n	80036dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2207      	movs	r2, #7
 80036a4:	4393      	bics	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	4b70      	ldr	r3, [pc, #448]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036b0:	f7fd ff24 	bl	80014fc <HAL_GetTick>
 80036b4:	0003      	movs	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036b8:	e009      	b.n	80036ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ba:	f7fd ff1f 	bl	80014fc <HAL_GetTick>
 80036be:	0002      	movs	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <HAL_RCC_ClockConfig+0x1f4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0ca      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2207      	movs	r2, #7
 80036d4:	4013      	ands	r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2202      	movs	r2, #2
 80036e2:	4013      	ands	r3, r2
 80036e4:	d015      	beq.n	8003712 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2204      	movs	r2, #4
 80036ec:	4013      	ands	r3, r2
 80036ee:	d006      	beq.n	80036fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036f0:	4b60      	ldr	r3, [pc, #384]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 80036f6:	21e0      	movs	r1, #224	; 0xe0
 80036f8:	01c9      	lsls	r1, r1, #7
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fe:	4b5d      	ldr	r3, [pc, #372]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4a5d      	ldr	r2, [pc, #372]	; (8003878 <HAL_RCC_ClockConfig+0x1fc>)
 8003704:	4013      	ands	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	d057      	beq.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	029b      	lsls	r3, r3, #10
 800372c:	4013      	ands	r3, r2
 800372e:	d12b      	bne.n	8003788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e097      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d107      	bne.n	800374c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	049b      	lsls	r3, r3, #18
 8003744:	4013      	ands	r3, r2
 8003746:	d11f      	bne.n	8003788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e08b      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003754:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4013      	ands	r3, r2
 800375e:	d113      	bne.n	8003788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e07f      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d106      	bne.n	800377a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	2202      	movs	r2, #2
 8003772:	4013      	ands	r3, r2
 8003774:	d108      	bne.n	8003788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e074      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377a:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	2202      	movs	r2, #2
 8003780:	4013      	ands	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e06d      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003788:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2207      	movs	r2, #7
 800378e:	4393      	bics	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fd feae 	bl	80014fc <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a4:	e009      	b.n	80037ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a6:	f7fd fea9 	bl	80014fc <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	4a2f      	ldr	r2, [pc, #188]	; (8003870 <HAL_RCC_ClockConfig+0x1f4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e054      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2238      	movs	r2, #56	; 0x38
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1ec      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2207      	movs	r2, #7
 80037d2:	4013      	ands	r3, r2
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d21e      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2207      	movs	r2, #7
 80037e0:	4393      	bics	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037ec:	f7fd fe86 	bl	80014fc <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037f4:	e009      	b.n	800380a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f6:	f7fd fe81 	bl	80014fc <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_RCC_ClockConfig+0x1f4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e02c      	b.n	8003864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2207      	movs	r2, #7
 8003810:	4013      	ands	r3, r2
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2204      	movs	r2, #4
 800381e:	4013      	ands	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_RCC_ClockConfig+0x200>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003836:	f000 f829 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800383a:	0001      	movs	r1, r0
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_RCC_ClockConfig+0x1f8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	220f      	movs	r2, #15
 8003844:	401a      	ands	r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <HAL_RCC_ClockConfig+0x204>)
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	58d3      	ldr	r3, [r2, r3]
 800384c:	221f      	movs	r2, #31
 800384e:	4013      	ands	r3, r2
 8003850:	000a      	movs	r2, r1
 8003852:	40da      	lsrs	r2, r3
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_ClockConfig+0x208>)
 8003856:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_ClockConfig+0x20c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0018      	movs	r0, r3
 800385e:	f7fd fdf1 	bl	8001444 <HAL_InitTick>
 8003862:	0003      	movs	r3, r0
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40022000 	.word	0x40022000
 8003870:	00001388 	.word	0x00001388
 8003874:	40021000 	.word	0x40021000
 8003878:	fffff0ff 	.word	0xfffff0ff
 800387c:	ffff8fff 	.word	0xffff8fff
 8003880:	08008c04 	.word	0x08008c04
 8003884:	20000004 	.word	0x20000004
 8003888:	20000008 	.word	0x20000008

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003892:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2238      	movs	r2, #56	; 0x38
 8003898:	4013      	ands	r3, r2
 800389a:	d10f      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0adb      	lsrs	r3, r3, #11
 80038a2:	2207      	movs	r2, #7
 80038a4:	4013      	ands	r3, r2
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	0013      	movs	r3, r2
 80038ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	4835      	ldr	r0, [pc, #212]	; (8003988 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038b2:	f7fc fc39 	bl	8000128 <__udivsi3>
 80038b6:	0003      	movs	r3, r0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e05d      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2238      	movs	r2, #56	; 0x38
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c8:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_RCC_GetSysClockFreq+0x100>)
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	e054      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ce:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2238      	movs	r2, #56	; 0x38
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d138      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2203      	movs	r2, #3
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	2207      	movs	r2, #7
 80038ec:	4013      	ands	r3, r2
 80038ee:	3301      	adds	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d10d      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4824      	ldr	r0, [pc, #144]	; (800398c <HAL_RCC_GetSysClockFreq+0x100>)
 80038fc:	f7fc fc14 	bl	8000128 <__udivsi3>
 8003900:	0003      	movs	r3, r0
 8003902:	0019      	movs	r1, r3
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	227f      	movs	r2, #127	; 0x7f
 800390c:	4013      	ands	r3, r2
 800390e:	434b      	muls	r3, r1
 8003910:	617b      	str	r3, [r7, #20]
        break;
 8003912:	e00d      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	481c      	ldr	r0, [pc, #112]	; (8003988 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003918:	f7fc fc06 	bl	8000128 <__udivsi3>
 800391c:	0003      	movs	r3, r0
 800391e:	0019      	movs	r1, r3
 8003920:	4b18      	ldr	r3, [pc, #96]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	227f      	movs	r2, #127	; 0x7f
 8003928:	4013      	ands	r3, r2
 800392a:	434b      	muls	r3, r1
 800392c:	617b      	str	r3, [r7, #20]
        break;
 800392e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0f5b      	lsrs	r3, r3, #29
 8003936:	2207      	movs	r2, #7
 8003938:	4013      	ands	r3, r2
 800393a:	3301      	adds	r3, #1
 800393c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	6978      	ldr	r0, [r7, #20]
 8003942:	f7fc fbf1 	bl	8000128 <__udivsi3>
 8003946:	0003      	movs	r3, r0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e015      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2238      	movs	r2, #56	; 0x38
 8003952:	4013      	ands	r3, r2
 8003954:	2b20      	cmp	r3, #32
 8003956:	d103      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2238      	movs	r2, #56	; 0x38
 8003966:	4013      	ands	r3, r2
 8003968:	2b18      	cmp	r3, #24
 800396a:	d103      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800396c:	23fa      	movs	r3, #250	; 0xfa
 800396e:	01db      	lsls	r3, r3, #7
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e001      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003978:	693b      	ldr	r3, [r7, #16]
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b006      	add	sp, #24
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	40021000 	.word	0x40021000
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b5b0      	push	{r4, r5, r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039a8:	f7ff fff2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ac:	0004      	movs	r4, r0
 80039ae:	f7ff faf9 	bl	8002fa4 <LL_RCC_GetAPB1Prescaler>
 80039b2:	0003      	movs	r3, r0
 80039b4:	0b1a      	lsrs	r2, r3, #12
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	58d3      	ldr	r3, [r2, r3]
 80039bc:	221f      	movs	r2, #31
 80039be:	4013      	ands	r3, r2
 80039c0:	40dc      	lsrs	r4, r3
 80039c2:	0023      	movs	r3, r4
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	08008c44 	.word	0x08008c44

080039d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039d8:	2313      	movs	r3, #19
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e0:	2312      	movs	r3, #18
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	029b      	lsls	r3, r3, #10
 80039f0:	4013      	ands	r3, r2
 80039f2:	d100      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039f4:	e0ad      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2011      	movs	r0, #17
 80039f8:	183b      	adds	r3, r7, r0
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	055b      	lsls	r3, r3, #21
 8003a06:	4013      	ands	r3, r2
 8003a08:	d110      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	0549      	lsls	r1, r1, #21
 8003a14:	430a      	orrs	r2, r1
 8003a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a18:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	055b      	lsls	r3, r3, #21
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	183b      	adds	r3, r7, r0
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2c:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	0049      	lsls	r1, r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3a:	f7fd fd5f 	bl	80014fc <HAL_GetTick>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd fd5a 	bl	80014fc <HAL_GetTick>
 8003a48:	0002      	movs	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d904      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a52:	2313      	movs	r3, #19
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2203      	movs	r2, #3
 8003a58:	701a      	strb	r2, [r3, #0]
        break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5c:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4013      	ands	r3, r2
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a68:	2313      	movs	r3, #19
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d15e      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a72:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a76:	23c0      	movs	r3, #192	; 0xc0
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d014      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a98:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	0249      	lsls	r1, r1, #9
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aac:	491e      	ldr	r1, [pc, #120]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003aae:	400a      	ands	r2, r1
 8003ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2201      	movs	r2, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	d016      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fd1c 	bl	80014fc <HAL_GetTick>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac8:	e00c      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fd17 	bl	80014fc <HAL_GetTick>
 8003ace:	0002      	movs	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d904      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ada:	2313      	movs	r3, #19
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	2203      	movs	r2, #3
 8003ae0:	701a      	strb	r2, [r3, #0]
            break;
 8003ae2:	e004      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0ed      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003aee:	2313      	movs	r3, #19
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b0c:	e016      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0e:	2312      	movs	r3, #18
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2213      	movs	r2, #19
 8003b14:	18ba      	adds	r2, r7, r2
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e00f      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
 8003b24:	fffffcff 	.word	0xfffffcff
 8003b28:	fffeffff 	.word	0xfffeffff
 8003b2c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	2312      	movs	r3, #18
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2213      	movs	r2, #19
 8003b36:	18ba      	adds	r2, r7, r2
 8003b38:	7812      	ldrb	r2, [r2, #0]
 8003b3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b3c:	2311      	movs	r3, #17
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4bb6      	ldr	r3, [pc, #728]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b4a:	4bb5      	ldr	r3, [pc, #724]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b4c:	49b5      	ldr	r1, [pc, #724]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5c:	4bb0      	ldr	r3, [pc, #704]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	2203      	movs	r2, #3
 8003b62:	4393      	bics	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	4bad      	ldr	r3, [pc, #692]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2202      	movs	r2, #2
 8003b76:	4013      	ands	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b7a:	4ba9      	ldr	r3, [pc, #676]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	220c      	movs	r2, #12
 8003b80:	4393      	bics	r3, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	4ba5      	ldr	r3, [pc, #660]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2204      	movs	r2, #4
 8003b94:	4013      	ands	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b98:	4ba1      	ldr	r3, [pc, #644]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	2230      	movs	r2, #48	; 0x30
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	4b9e      	ldr	r3, [pc, #632]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb6:	4b9a      	ldr	r3, [pc, #616]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	4a9b      	ldr	r2, [pc, #620]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	4b96      	ldr	r3, [pc, #600]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	015b      	lsls	r3, r3, #5
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003bd6:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	4a94      	ldr	r2, [pc, #592]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	0019      	movs	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be6:	430a      	orrs	r2, r1
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf6:	4b8a      	ldr	r3, [pc, #552]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	4a8d      	ldr	r2, [pc, #564]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c04:	4b86      	ldr	r3, [pc, #536]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4013      	ands	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c16:	4b82      	ldr	r3, [pc, #520]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	4a86      	ldr	r2, [pc, #536]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b7e      	ldr	r3, [pc, #504]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	4013      	ands	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c34:	4b7a      	ldr	r3, [pc, #488]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	4a7f      	ldr	r2, [pc, #508]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	4a79      	ldr	r2, [pc, #484]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	4b6f      	ldr	r3, [pc, #444]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	01db      	lsls	r3, r3, #7
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d015      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c72:	4b6b      	ldr	r3, [pc, #428]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	0899      	lsrs	r1, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7e:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	05db      	lsls	r3, r3, #23
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c90:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	0249      	lsls	r1, r1, #9
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003caa:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	039b      	lsls	r3, r3, #14
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d016      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cca:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	4a5c      	ldr	r2, [pc, #368]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd8:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	03db      	lsls	r3, r3, #15
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cea:	4b4d      	ldr	r3, [pc, #308]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0449      	lsls	r1, r1, #17
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	03db      	lsls	r3, r3, #15
 8003d00:	4013      	ands	r3, r2
 8003d02:	d016      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d04:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d12:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d14:	430a      	orrs	r2, r1
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	045b      	lsls	r3, r3, #17
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	0449      	lsls	r1, r1, #17
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d014      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	2203      	movs	r2, #3
 8003d44:	4393      	bics	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d106      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	0249      	lsls	r1, r1, #9
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	019b      	lsls	r3, r3, #6
 8003d70:	4013      	ands	r3, r2
 8003d72:	d014      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	220c      	movs	r2, #12
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d82:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d90:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	0249      	lsls	r1, r1, #9
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	045b      	lsls	r3, r3, #17
 8003da6:	4013      	ands	r3, r2
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	0449      	lsls	r1, r1, #17
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	049b      	lsls	r3, r3, #18
 8003de0:	4013      	ands	r3, r2
 8003de2:	d016      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d106      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0449      	lsls	r1, r1, #17
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e12:	2312      	movs	r3, #18
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	781b      	ldrb	r3, [r3, #0]
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	efffffff 	.word	0xefffffff
 8003e28:	fffff3ff 	.word	0xfffff3ff
 8003e2c:	fffffcff 	.word	0xfffffcff
 8003e30:	fff3ffff 	.word	0xfff3ffff
 8003e34:	ffcfffff 	.word	0xffcfffff
 8003e38:	ffffcfff 	.word	0xffffcfff
 8003e3c:	ffff3fff 	.word	0xffff3fff
 8003e40:	ffbfffff 	.word	0xffbfffff
 8003e44:	feffffff 	.word	0xfeffffff

08003e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e046      	b.n	8003ee8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2288      	movs	r2, #136	; 0x88
 8003e5e:	589b      	ldr	r3, [r3, r2]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2284      	movs	r2, #132	; 0x84
 8003e68:	2100      	movs	r1, #0
 8003e6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7fd f9b8 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2288      	movs	r2, #136	; 0x88
 8003e78:	2124      	movs	r1, #36	; 0x24
 8003e7a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2101      	movs	r1, #1
 8003e88:	438a      	bics	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f000 f8cc 	bl	800402c <UART_SetConfig>
 8003e94:	0003      	movs	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e024      	b.n	8003ee8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 fc15 	bl	80046d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <HAL_UART_Init+0xa8>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	212a      	movs	r1, #42	; 0x2a
 8003eca:	438a      	bics	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 fcad 	bl	8004840 <UART_CheckIdleState>
 8003ee6:	0003      	movs	r3, r0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	ffffb7ff 	.word	0xffffb7ff

08003ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	1dbb      	adds	r3, r7, #6
 8003f02:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2288      	movs	r2, #136	; 0x88
 8003f08:	589b      	ldr	r3, [r3, r2]
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d000      	beq.n	8003f10 <HAL_UART_Transmit+0x1c>
 8003f0e:	e088      	b.n	8004022 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_UART_Transmit+0x2a>
 8003f16:	1dbb      	adds	r3, r7, #6
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e080      	b.n	8004024 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	015b      	lsls	r3, r3, #5
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d109      	bne.n	8003f42 <HAL_UART_Transmit+0x4e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d001      	beq.n	8003f42 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e070      	b.n	8004024 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2290      	movs	r2, #144	; 0x90
 8003f46:	2100      	movs	r1, #0
 8003f48:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2288      	movs	r2, #136	; 0x88
 8003f4e:	2121      	movs	r1, #33	; 0x21
 8003f50:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f52:	f7fd fad3 	bl	80014fc <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1dba      	adds	r2, r7, #6
 8003f5e:	2154      	movs	r1, #84	; 0x54
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1dba      	adds	r2, r7, #6
 8003f68:	2156      	movs	r1, #86	; 0x56
 8003f6a:	8812      	ldrh	r2, [r2, #0]
 8003f6c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d108      	bne.n	8003f8c <HAL_UART_Transmit+0x98>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e003      	b.n	8003f94 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f94:	e02c      	b.n	8003ff0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	f000 fc9a 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e039      	b.n	8004024 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	001a      	movs	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	05d2      	lsls	r2, r2, #23
 8003fc2:	0dd2      	lsrs	r2, r2, #23
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3302      	adds	r3, #2
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e007      	b.n	8003fde <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2256      	movs	r2, #86	; 0x56
 8003fe2:	5a9b      	ldrh	r3, [r3, r2]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b299      	uxth	r1, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2256      	movs	r2, #86	; 0x56
 8003fee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2256      	movs	r2, #86	; 0x56
 8003ff4:	5a9b      	ldrh	r3, [r3, r2]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1cc      	bne.n	8003f96 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0013      	movs	r3, r2
 8004006:	2200      	movs	r2, #0
 8004008:	2140      	movs	r1, #64	; 0x40
 800400a:	f000 fc67 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d001      	beq.n	8004016 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e006      	b.n	8004024 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2288      	movs	r2, #136	; 0x88
 800401a:	2120      	movs	r1, #32
 800401c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b008      	add	sp, #32
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b5b0      	push	{r4, r5, r7, lr}
 800402e:	b090      	sub	sp, #64	; 0x40
 8004030:	af00      	add	r7, sp, #0
 8004032:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004034:	231a      	movs	r3, #26
 8004036:	2220      	movs	r2, #32
 8004038:	189b      	adds	r3, r3, r2
 800403a:	19db      	adds	r3, r3, r7
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	431a      	orrs	r2, r3
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4ac1      	ldr	r2, [pc, #772]	; (8004364 <UART_SetConfig+0x338>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	430b      	orrs	r3, r1
 800406c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4abc      	ldr	r2, [pc, #752]	; (8004368 <UART_SetConfig+0x33c>)
 8004076:	4013      	ands	r3, r2
 8004078:	0018      	movs	r0, r3
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	0003      	movs	r3, r0
 8004084:	430b      	orrs	r3, r1
 8004086:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4ab6      	ldr	r2, [pc, #728]	; (800436c <UART_SetConfig+0x340>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <UART_SetConfig+0x80>
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4ab4      	ldr	r2, [pc, #720]	; (8004370 <UART_SetConfig+0x344>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a8:	4313      	orrs	r3, r2
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	4ab0      	ldr	r2, [pc, #704]	; (8004374 <UART_SetConfig+0x348>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040be:	430b      	orrs	r3, r1
 80040c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	220f      	movs	r2, #15
 80040ca:	4393      	bics	r3, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	0003      	movs	r3, r0
 80040d8:	430b      	orrs	r3, r1
 80040da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4aa5      	ldr	r2, [pc, #660]	; (8004378 <UART_SetConfig+0x34c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d131      	bne.n	800414a <UART_SetConfig+0x11e>
 80040e6:	4ba5      	ldr	r3, [pc, #660]	; (800437c <UART_SetConfig+0x350>)
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	2203      	movs	r2, #3
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d01d      	beq.n	800412e <UART_SetConfig+0x102>
 80040f2:	d823      	bhi.n	800413c <UART_SetConfig+0x110>
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d00c      	beq.n	8004112 <UART_SetConfig+0xe6>
 80040f8:	d820      	bhi.n	800413c <UART_SetConfig+0x110>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <UART_SetConfig+0xd8>
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d00e      	beq.n	8004120 <UART_SetConfig+0xf4>
 8004102:	e01b      	b.n	800413c <UART_SetConfig+0x110>
 8004104:	231b      	movs	r3, #27
 8004106:	2220      	movs	r2, #32
 8004108:	189b      	adds	r3, r3, r2
 800410a:	19db      	adds	r3, r3, r7
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	e154      	b.n	80043bc <UART_SetConfig+0x390>
 8004112:	231b      	movs	r3, #27
 8004114:	2220      	movs	r2, #32
 8004116:	189b      	adds	r3, r3, r2
 8004118:	19db      	adds	r3, r3, r7
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e14d      	b.n	80043bc <UART_SetConfig+0x390>
 8004120:	231b      	movs	r3, #27
 8004122:	2220      	movs	r2, #32
 8004124:	189b      	adds	r3, r3, r2
 8004126:	19db      	adds	r3, r3, r7
 8004128:	2204      	movs	r2, #4
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e146      	b.n	80043bc <UART_SetConfig+0x390>
 800412e:	231b      	movs	r3, #27
 8004130:	2220      	movs	r2, #32
 8004132:	189b      	adds	r3, r3, r2
 8004134:	19db      	adds	r3, r3, r7
 8004136:	2208      	movs	r2, #8
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e13f      	b.n	80043bc <UART_SetConfig+0x390>
 800413c:	231b      	movs	r3, #27
 800413e:	2220      	movs	r2, #32
 8004140:	189b      	adds	r3, r3, r2
 8004142:	19db      	adds	r3, r3, r7
 8004144:	2210      	movs	r2, #16
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e138      	b.n	80043bc <UART_SetConfig+0x390>
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a8c      	ldr	r2, [pc, #560]	; (8004380 <UART_SetConfig+0x354>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d131      	bne.n	80041b8 <UART_SetConfig+0x18c>
 8004154:	4b89      	ldr	r3, [pc, #548]	; (800437c <UART_SetConfig+0x350>)
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	220c      	movs	r2, #12
 800415a:	4013      	ands	r3, r2
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d01d      	beq.n	800419c <UART_SetConfig+0x170>
 8004160:	d823      	bhi.n	80041aa <UART_SetConfig+0x17e>
 8004162:	2b08      	cmp	r3, #8
 8004164:	d00c      	beq.n	8004180 <UART_SetConfig+0x154>
 8004166:	d820      	bhi.n	80041aa <UART_SetConfig+0x17e>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <UART_SetConfig+0x146>
 800416c:	2b04      	cmp	r3, #4
 800416e:	d00e      	beq.n	800418e <UART_SetConfig+0x162>
 8004170:	e01b      	b.n	80041aa <UART_SetConfig+0x17e>
 8004172:	231b      	movs	r3, #27
 8004174:	2220      	movs	r2, #32
 8004176:	189b      	adds	r3, r3, r2
 8004178:	19db      	adds	r3, r3, r7
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e11d      	b.n	80043bc <UART_SetConfig+0x390>
 8004180:	231b      	movs	r3, #27
 8004182:	2220      	movs	r2, #32
 8004184:	189b      	adds	r3, r3, r2
 8004186:	19db      	adds	r3, r3, r7
 8004188:	2202      	movs	r2, #2
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	e116      	b.n	80043bc <UART_SetConfig+0x390>
 800418e:	231b      	movs	r3, #27
 8004190:	2220      	movs	r2, #32
 8004192:	189b      	adds	r3, r3, r2
 8004194:	19db      	adds	r3, r3, r7
 8004196:	2204      	movs	r2, #4
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e10f      	b.n	80043bc <UART_SetConfig+0x390>
 800419c:	231b      	movs	r3, #27
 800419e:	2220      	movs	r2, #32
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	19db      	adds	r3, r3, r7
 80041a4:	2208      	movs	r2, #8
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e108      	b.n	80043bc <UART_SetConfig+0x390>
 80041aa:	231b      	movs	r3, #27
 80041ac:	2220      	movs	r2, #32
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	2210      	movs	r2, #16
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e101      	b.n	80043bc <UART_SetConfig+0x390>
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a71      	ldr	r2, [pc, #452]	; (8004384 <UART_SetConfig+0x358>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d131      	bne.n	8004226 <UART_SetConfig+0x1fa>
 80041c2:	4b6e      	ldr	r3, [pc, #440]	; (800437c <UART_SetConfig+0x350>)
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	2230      	movs	r2, #48	; 0x30
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d01d      	beq.n	800420a <UART_SetConfig+0x1de>
 80041ce:	d823      	bhi.n	8004218 <UART_SetConfig+0x1ec>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d00c      	beq.n	80041ee <UART_SetConfig+0x1c2>
 80041d4:	d820      	bhi.n	8004218 <UART_SetConfig+0x1ec>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <UART_SetConfig+0x1b4>
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d00e      	beq.n	80041fc <UART_SetConfig+0x1d0>
 80041de:	e01b      	b.n	8004218 <UART_SetConfig+0x1ec>
 80041e0:	231b      	movs	r3, #27
 80041e2:	2220      	movs	r2, #32
 80041e4:	189b      	adds	r3, r3, r2
 80041e6:	19db      	adds	r3, r3, r7
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e0e6      	b.n	80043bc <UART_SetConfig+0x390>
 80041ee:	231b      	movs	r3, #27
 80041f0:	2220      	movs	r2, #32
 80041f2:	189b      	adds	r3, r3, r2
 80041f4:	19db      	adds	r3, r3, r7
 80041f6:	2202      	movs	r2, #2
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e0df      	b.n	80043bc <UART_SetConfig+0x390>
 80041fc:	231b      	movs	r3, #27
 80041fe:	2220      	movs	r2, #32
 8004200:	189b      	adds	r3, r3, r2
 8004202:	19db      	adds	r3, r3, r7
 8004204:	2204      	movs	r2, #4
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	e0d8      	b.n	80043bc <UART_SetConfig+0x390>
 800420a:	231b      	movs	r3, #27
 800420c:	2220      	movs	r2, #32
 800420e:	189b      	adds	r3, r3, r2
 8004210:	19db      	adds	r3, r3, r7
 8004212:	2208      	movs	r2, #8
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e0d1      	b.n	80043bc <UART_SetConfig+0x390>
 8004218:	231b      	movs	r3, #27
 800421a:	2220      	movs	r2, #32
 800421c:	189b      	adds	r3, r3, r2
 800421e:	19db      	adds	r3, r3, r7
 8004220:	2210      	movs	r2, #16
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e0ca      	b.n	80043bc <UART_SetConfig+0x390>
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a57      	ldr	r2, [pc, #348]	; (8004388 <UART_SetConfig+0x35c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d106      	bne.n	800423e <UART_SetConfig+0x212>
 8004230:	231b      	movs	r3, #27
 8004232:	2220      	movs	r2, #32
 8004234:	189b      	adds	r3, r3, r2
 8004236:	19db      	adds	r3, r3, r7
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e0be      	b.n	80043bc <UART_SetConfig+0x390>
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a52      	ldr	r2, [pc, #328]	; (800438c <UART_SetConfig+0x360>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d106      	bne.n	8004256 <UART_SetConfig+0x22a>
 8004248:	231b      	movs	r3, #27
 800424a:	2220      	movs	r2, #32
 800424c:	189b      	adds	r3, r3, r2
 800424e:	19db      	adds	r3, r3, r7
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e0b2      	b.n	80043bc <UART_SetConfig+0x390>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a4d      	ldr	r2, [pc, #308]	; (8004390 <UART_SetConfig+0x364>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d106      	bne.n	800426e <UART_SetConfig+0x242>
 8004260:	231b      	movs	r3, #27
 8004262:	2220      	movs	r2, #32
 8004264:	189b      	adds	r3, r3, r2
 8004266:	19db      	adds	r3, r3, r7
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e0a6      	b.n	80043bc <UART_SetConfig+0x390>
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3e      	ldr	r2, [pc, #248]	; (800436c <UART_SetConfig+0x340>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d13e      	bne.n	80042f6 <UART_SetConfig+0x2ca>
 8004278:	4b40      	ldr	r3, [pc, #256]	; (800437c <UART_SetConfig+0x350>)
 800427a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800427c:	23c0      	movs	r3, #192	; 0xc0
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	4013      	ands	r3, r2
 8004282:	22c0      	movs	r2, #192	; 0xc0
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	4293      	cmp	r3, r2
 8004288:	d027      	beq.n	80042da <UART_SetConfig+0x2ae>
 800428a:	22c0      	movs	r2, #192	; 0xc0
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	4293      	cmp	r3, r2
 8004290:	d82a      	bhi.n	80042e8 <UART_SetConfig+0x2bc>
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	4293      	cmp	r3, r2
 8004298:	d011      	beq.n	80042be <UART_SetConfig+0x292>
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	4293      	cmp	r3, r2
 80042a0:	d822      	bhi.n	80042e8 <UART_SetConfig+0x2bc>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <UART_SetConfig+0x284>
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	00d2      	lsls	r2, r2, #3
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <UART_SetConfig+0x2a0>
 80042ae:	e01b      	b.n	80042e8 <UART_SetConfig+0x2bc>
 80042b0:	231b      	movs	r3, #27
 80042b2:	2220      	movs	r2, #32
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	19db      	adds	r3, r3, r7
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e07e      	b.n	80043bc <UART_SetConfig+0x390>
 80042be:	231b      	movs	r3, #27
 80042c0:	2220      	movs	r2, #32
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	19db      	adds	r3, r3, r7
 80042c6:	2202      	movs	r2, #2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e077      	b.n	80043bc <UART_SetConfig+0x390>
 80042cc:	231b      	movs	r3, #27
 80042ce:	2220      	movs	r2, #32
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	19db      	adds	r3, r3, r7
 80042d4:	2204      	movs	r2, #4
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	e070      	b.n	80043bc <UART_SetConfig+0x390>
 80042da:	231b      	movs	r3, #27
 80042dc:	2220      	movs	r2, #32
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	19db      	adds	r3, r3, r7
 80042e2:	2208      	movs	r2, #8
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e069      	b.n	80043bc <UART_SetConfig+0x390>
 80042e8:	231b      	movs	r3, #27
 80042ea:	2220      	movs	r2, #32
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	19db      	adds	r3, r3, r7
 80042f0:	2210      	movs	r2, #16
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e062      	b.n	80043bc <UART_SetConfig+0x390>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <UART_SetConfig+0x344>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d157      	bne.n	80043b0 <UART_SetConfig+0x384>
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <UART_SetConfig+0x350>)
 8004302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004304:	23c0      	movs	r3, #192	; 0xc0
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4013      	ands	r3, r2
 800430a:	22c0      	movs	r2, #192	; 0xc0
 800430c:	0092      	lsls	r2, r2, #2
 800430e:	4293      	cmp	r3, r2
 8004310:	d040      	beq.n	8004394 <UART_SetConfig+0x368>
 8004312:	22c0      	movs	r2, #192	; 0xc0
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	4293      	cmp	r3, r2
 8004318:	d843      	bhi.n	80043a2 <UART_SetConfig+0x376>
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	0092      	lsls	r2, r2, #2
 800431e:	4293      	cmp	r3, r2
 8004320:	d011      	beq.n	8004346 <UART_SetConfig+0x31a>
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	4293      	cmp	r3, r2
 8004328:	d83b      	bhi.n	80043a2 <UART_SetConfig+0x376>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <UART_SetConfig+0x30c>
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	0052      	lsls	r2, r2, #1
 8004332:	4293      	cmp	r3, r2
 8004334:	d00e      	beq.n	8004354 <UART_SetConfig+0x328>
 8004336:	e034      	b.n	80043a2 <UART_SetConfig+0x376>
 8004338:	231b      	movs	r3, #27
 800433a:	2220      	movs	r2, #32
 800433c:	189b      	adds	r3, r3, r2
 800433e:	19db      	adds	r3, r3, r7
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e03a      	b.n	80043bc <UART_SetConfig+0x390>
 8004346:	231b      	movs	r3, #27
 8004348:	2220      	movs	r2, #32
 800434a:	189b      	adds	r3, r3, r2
 800434c:	19db      	adds	r3, r3, r7
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e033      	b.n	80043bc <UART_SetConfig+0x390>
 8004354:	231b      	movs	r3, #27
 8004356:	2220      	movs	r2, #32
 8004358:	189b      	adds	r3, r3, r2
 800435a:	19db      	adds	r3, r3, r7
 800435c:	2204      	movs	r2, #4
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e02c      	b.n	80043bc <UART_SetConfig+0x390>
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	cfff69f3 	.word	0xcfff69f3
 8004368:	ffffcfff 	.word	0xffffcfff
 800436c:	40008000 	.word	0x40008000
 8004370:	40008400 	.word	0x40008400
 8004374:	11fff4ff 	.word	0x11fff4ff
 8004378:	40013800 	.word	0x40013800
 800437c:	40021000 	.word	0x40021000
 8004380:	40004400 	.word	0x40004400
 8004384:	40004800 	.word	0x40004800
 8004388:	40004c00 	.word	0x40004c00
 800438c:	40005000 	.word	0x40005000
 8004390:	40013c00 	.word	0x40013c00
 8004394:	231b      	movs	r3, #27
 8004396:	2220      	movs	r2, #32
 8004398:	189b      	adds	r3, r3, r2
 800439a:	19db      	adds	r3, r3, r7
 800439c:	2208      	movs	r2, #8
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e00c      	b.n	80043bc <UART_SetConfig+0x390>
 80043a2:	231b      	movs	r3, #27
 80043a4:	2220      	movs	r2, #32
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	19db      	adds	r3, r3, r7
 80043aa:	2210      	movs	r2, #16
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e005      	b.n	80043bc <UART_SetConfig+0x390>
 80043b0:	231b      	movs	r3, #27
 80043b2:	2220      	movs	r2, #32
 80043b4:	189b      	adds	r3, r3, r2
 80043b6:	19db      	adds	r3, r3, r7
 80043b8:	2210      	movs	r2, #16
 80043ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4ac1      	ldr	r2, [pc, #772]	; (80046c8 <UART_SetConfig+0x69c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d005      	beq.n	80043d2 <UART_SetConfig+0x3a6>
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4ac0      	ldr	r2, [pc, #768]	; (80046cc <UART_SetConfig+0x6a0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d000      	beq.n	80043d2 <UART_SetConfig+0x3a6>
 80043d0:	e093      	b.n	80044fa <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043d2:	231b      	movs	r3, #27
 80043d4:	2220      	movs	r2, #32
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	19db      	adds	r3, r3, r7
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d015      	beq.n	800440c <UART_SetConfig+0x3e0>
 80043e0:	dc18      	bgt.n	8004414 <UART_SetConfig+0x3e8>
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d00d      	beq.n	8004402 <UART_SetConfig+0x3d6>
 80043e6:	dc15      	bgt.n	8004414 <UART_SetConfig+0x3e8>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <UART_SetConfig+0x3c6>
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d005      	beq.n	80043fc <UART_SetConfig+0x3d0>
 80043f0:	e010      	b.n	8004414 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f2:	f7ff fad7 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80043f6:	0003      	movs	r3, r0
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043fa:	e014      	b.n	8004426 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4bb4      	ldr	r3, [pc, #720]	; (80046d0 <UART_SetConfig+0x6a4>)
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004400:	e011      	b.n	8004426 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7ff fa43 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8004406:	0003      	movs	r3, r0
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800440a:	e00c      	b.n	8004426 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004412:	e008      	b.n	8004426 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004418:	231a      	movs	r3, #26
 800441a:	2220      	movs	r2, #32
 800441c:	189b      	adds	r3, r3, r2
 800441e:	19db      	adds	r3, r3, r7
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
        break;
 8004424:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d100      	bne.n	800442e <UART_SetConfig+0x402>
 800442c:	e135      	b.n	800469a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004432:	4ba8      	ldr	r3, [pc, #672]	; (80046d4 <UART_SetConfig+0x6a8>)
 8004434:	0052      	lsls	r2, r2, #1
 8004436:	5ad3      	ldrh	r3, [r2, r3]
 8004438:	0019      	movs	r1, r3
 800443a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800443c:	f7fb fe74 	bl	8000128 <__udivsi3>
 8004440:	0003      	movs	r3, r0
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	0013      	movs	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	189b      	adds	r3, r3, r2
 800444e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004450:	429a      	cmp	r2, r3
 8004452:	d305      	bcc.n	8004460 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800445a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800445c:	429a      	cmp	r2, r3
 800445e:	d906      	bls.n	800446e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004460:	231a      	movs	r3, #26
 8004462:	2220      	movs	r2, #32
 8004464:	189b      	adds	r3, r3, r2
 8004466:	19db      	adds	r3, r3, r7
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	e044      	b.n	80044f8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	4b96      	ldr	r3, [pc, #600]	; (80046d4 <UART_SetConfig+0x6a8>)
 800447c:	0052      	lsls	r2, r2, #1
 800447e:	5ad3      	ldrh	r3, [r2, r3]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	69b8      	ldr	r0, [r7, #24]
 800448c:	69f9      	ldr	r1, [r7, #28]
 800448e:	f7fb ffc1 	bl	8000414 <__aeabi_uldivmod>
 8004492:	0002      	movs	r2, r0
 8004494:	000b      	movs	r3, r1
 8004496:	0e11      	lsrs	r1, r2, #24
 8004498:	021d      	lsls	r5, r3, #8
 800449a:	430d      	orrs	r5, r1
 800449c:	0214      	lsls	r4, r2, #8
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	68b8      	ldr	r0, [r7, #8]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	1900      	adds	r0, r0, r4
 80044b0:	4169      	adcs	r1, r5
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f7fb ffa8 	bl	8000414 <__aeabi_uldivmod>
 80044c4:	0002      	movs	r2, r0
 80044c6:	000b      	movs	r3, r1
 80044c8:	0013      	movs	r3, r2
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	23c0      	movs	r3, #192	; 0xc0
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d309      	bcc.n	80044ea <UART_SetConfig+0x4be>
 80044d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	035b      	lsls	r3, r3, #13
 80044dc:	429a      	cmp	r2, r3
 80044de:	d204      	bcs.n	80044ea <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	60da      	str	r2, [r3, #12]
 80044e8:	e006      	b.n	80044f8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80044ea:	231a      	movs	r3, #26
 80044ec:	2220      	movs	r2, #32
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	19db      	adds	r3, r3, r7
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80044f6:	e0d0      	b.n	800469a <UART_SetConfig+0x66e>
 80044f8:	e0cf      	b.n	800469a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	429a      	cmp	r2, r3
 8004504:	d000      	beq.n	8004508 <UART_SetConfig+0x4dc>
 8004506:	e070      	b.n	80045ea <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004508:	231b      	movs	r3, #27
 800450a:	2220      	movs	r2, #32
 800450c:	189b      	adds	r3, r3, r2
 800450e:	19db      	adds	r3, r3, r7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b08      	cmp	r3, #8
 8004514:	d015      	beq.n	8004542 <UART_SetConfig+0x516>
 8004516:	dc18      	bgt.n	800454a <UART_SetConfig+0x51e>
 8004518:	2b04      	cmp	r3, #4
 800451a:	d00d      	beq.n	8004538 <UART_SetConfig+0x50c>
 800451c:	dc15      	bgt.n	800454a <UART_SetConfig+0x51e>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <UART_SetConfig+0x4fc>
 8004522:	2b02      	cmp	r3, #2
 8004524:	d005      	beq.n	8004532 <UART_SetConfig+0x506>
 8004526:	e010      	b.n	800454a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7ff fa3c 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 800452c:	0003      	movs	r3, r0
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004530:	e014      	b.n	800455c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004532:	4b67      	ldr	r3, [pc, #412]	; (80046d0 <UART_SetConfig+0x6a4>)
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004536:	e011      	b.n	800455c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004538:	f7ff f9a8 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800453c:	0003      	movs	r3, r0
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004540:	e00c      	b.n	800455c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004548:	e008      	b.n	800455c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800454e:	231a      	movs	r3, #26
 8004550:	2220      	movs	r2, #32
 8004552:	189b      	adds	r3, r3, r2
 8004554:	19db      	adds	r3, r3, r7
 8004556:	2201      	movs	r2, #1
 8004558:	701a      	strb	r2, [r3, #0]
        break;
 800455a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	2b00      	cmp	r3, #0
 8004560:	d100      	bne.n	8004564 <UART_SetConfig+0x538>
 8004562:	e09a      	b.n	800469a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004568:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <UART_SetConfig+0x6a8>)
 800456a:	0052      	lsls	r2, r2, #1
 800456c:	5ad3      	ldrh	r3, [r2, r3]
 800456e:	0019      	movs	r1, r3
 8004570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004572:	f7fb fdd9 	bl	8000128 <__udivsi3>
 8004576:	0003      	movs	r3, r0
 8004578:	005a      	lsls	r2, r3, #1
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	18d2      	adds	r2, r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	0019      	movs	r1, r3
 8004588:	0010      	movs	r0, r2
 800458a:	f7fb fdcd 	bl	8000128 <__udivsi3>
 800458e:	0003      	movs	r3, r0
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d921      	bls.n	80045dc <UART_SetConfig+0x5b0>
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	025b      	lsls	r3, r3, #9
 800459e:	429a      	cmp	r2, r3
 80045a0:	d21c      	bcs.n	80045dc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	200e      	movs	r0, #14
 80045a8:	2420      	movs	r4, #32
 80045aa:	1903      	adds	r3, r0, r4
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	210f      	movs	r1, #15
 80045b0:	438a      	bics	r2, r1
 80045b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2207      	movs	r2, #7
 80045bc:	4013      	ands	r3, r2
 80045be:	b299      	uxth	r1, r3
 80045c0:	1903      	adds	r3, r0, r4
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	1902      	adds	r2, r0, r4
 80045c6:	19d2      	adds	r2, r2, r7
 80045c8:	8812      	ldrh	r2, [r2, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1902      	adds	r2, r0, r4
 80045d4:	19d2      	adds	r2, r2, r7
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e05e      	b.n	800469a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80045dc:	231a      	movs	r3, #26
 80045de:	2220      	movs	r2, #32
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	19db      	adds	r3, r3, r7
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e057      	b.n	800469a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ea:	231b      	movs	r3, #27
 80045ec:	2220      	movs	r2, #32
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d015      	beq.n	8004624 <UART_SetConfig+0x5f8>
 80045f8:	dc18      	bgt.n	800462c <UART_SetConfig+0x600>
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d00d      	beq.n	800461a <UART_SetConfig+0x5ee>
 80045fe:	dc15      	bgt.n	800462c <UART_SetConfig+0x600>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <UART_SetConfig+0x5de>
 8004604:	2b02      	cmp	r3, #2
 8004606:	d005      	beq.n	8004614 <UART_SetConfig+0x5e8>
 8004608:	e010      	b.n	800462c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7ff f9cb 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 800460e:	0003      	movs	r3, r0
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004612:	e014      	b.n	800463e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <UART_SetConfig+0x6a4>)
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004618:	e011      	b.n	800463e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7ff f937 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800461e:	0003      	movs	r3, r0
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004622:	e00c      	b.n	800463e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800462a:	e008      	b.n	800463e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004630:	231a      	movs	r3, #26
 8004632:	2220      	movs	r2, #32
 8004634:	189b      	adds	r3, r3, r2
 8004636:	19db      	adds	r3, r3, r7
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
        break;
 800463c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02a      	beq.n	800469a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <UART_SetConfig+0x6a8>)
 800464a:	0052      	lsls	r2, r2, #1
 800464c:	5ad3      	ldrh	r3, [r2, r3]
 800464e:	0019      	movs	r1, r3
 8004650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004652:	f7fb fd69 	bl	8000128 <__udivsi3>
 8004656:	0003      	movs	r3, r0
 8004658:	001a      	movs	r2, r3
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	18d2      	adds	r2, r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	0019      	movs	r1, r3
 8004668:	0010      	movs	r0, r2
 800466a:	f7fb fd5d 	bl	8000128 <__udivsi3>
 800466e:	0003      	movs	r3, r0
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2b0f      	cmp	r3, #15
 8004676:	d90a      	bls.n	800468e <UART_SetConfig+0x662>
 8004678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	025b      	lsls	r3, r3, #9
 800467e:	429a      	cmp	r2, r3
 8004680:	d205      	bcs.n	800468e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	b29a      	uxth	r2, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e005      	b.n	800469a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	231a      	movs	r3, #26
 8004690:	2220      	movs	r2, #32
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	226a      	movs	r2, #106	; 0x6a
 800469e:	2101      	movs	r1, #1
 80046a0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	2268      	movs	r2, #104	; 0x68
 80046a6:	2101      	movs	r1, #1
 80046a8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80046b6:	231a      	movs	r3, #26
 80046b8:	2220      	movs	r2, #32
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	19db      	adds	r3, r3, r7
 80046be:	781b      	ldrb	r3, [r3, #0]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b010      	add	sp, #64	; 0x40
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}
 80046c8:	40008000 	.word	0x40008000
 80046cc:	40008400 	.word	0x40008400
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	08008c74 	.word	0x08008c74

080046d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00b      	beq.n	8004702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a4a      	ldr	r2, [pc, #296]	; (800481c <UART_AdvFeatureConfig+0x144>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2202      	movs	r2, #2
 8004708:	4013      	ands	r3, r2
 800470a:	d00b      	beq.n	8004724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a43      	ldr	r2, [pc, #268]	; (8004820 <UART_AdvFeatureConfig+0x148>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	2204      	movs	r2, #4
 800472a:	4013      	ands	r3, r2
 800472c:	d00b      	beq.n	8004746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a3b      	ldr	r2, [pc, #236]	; (8004824 <UART_AdvFeatureConfig+0x14c>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	2208      	movs	r2, #8
 800474c:	4013      	ands	r3, r2
 800474e:	d00b      	beq.n	8004768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4a34      	ldr	r2, [pc, #208]	; (8004828 <UART_AdvFeatureConfig+0x150>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	2210      	movs	r2, #16
 800476e:	4013      	ands	r3, r2
 8004770:	d00b      	beq.n	800478a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <UART_AdvFeatureConfig+0x154>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	2220      	movs	r2, #32
 8004790:	4013      	ands	r3, r2
 8004792:	d00b      	beq.n	80047ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	4a25      	ldr	r2, [pc, #148]	; (8004830 <UART_AdvFeatureConfig+0x158>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2240      	movs	r2, #64	; 0x40
 80047b2:	4013      	ands	r3, r2
 80047b4:	d01d      	beq.n	80047f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <UART_AdvFeatureConfig+0x15c>)
 80047be:	4013      	ands	r3, r2
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	035b      	lsls	r3, r3, #13
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d10b      	bne.n	80047f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <UART_AdvFeatureConfig+0x160>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	4013      	ands	r3, r2
 80047fa:	d00b      	beq.n	8004814 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4a0e      	ldr	r2, [pc, #56]	; (800483c <UART_AdvFeatureConfig+0x164>)
 8004804:	4013      	ands	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]
  }
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}
 800481c:	fffdffff 	.word	0xfffdffff
 8004820:	fffeffff 	.word	0xfffeffff
 8004824:	fffbffff 	.word	0xfffbffff
 8004828:	ffff7fff 	.word	0xffff7fff
 800482c:	ffffefff 	.word	0xffffefff
 8004830:	ffffdfff 	.word	0xffffdfff
 8004834:	ffefffff 	.word	0xffefffff
 8004838:	ff9fffff 	.word	0xff9fffff
 800483c:	fff7ffff 	.word	0xfff7ffff

08004840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2290      	movs	r2, #144	; 0x90
 800484c:	2100      	movs	r1, #0
 800484e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004850:	f7fc fe54 	bl	80014fc <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2208      	movs	r2, #8
 8004860:	4013      	ands	r3, r2
 8004862:	2b08      	cmp	r3, #8
 8004864:	d10c      	bne.n	8004880 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	0391      	lsls	r1, r2, #14
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4a1a      	ldr	r2, [pc, #104]	; (80048d8 <UART_CheckIdleState+0x98>)
 8004870:	9200      	str	r2, [sp, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	f000 f832 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d001      	beq.n	8004880 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e026      	b.n	80048ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2204      	movs	r2, #4
 8004888:	4013      	ands	r3, r2
 800488a:	2b04      	cmp	r3, #4
 800488c:	d10c      	bne.n	80048a8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	03d1      	lsls	r1, r2, #15
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <UART_CheckIdleState+0x98>)
 8004898:	9200      	str	r2, [sp, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	f000 f81e 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 80048a0:	1e03      	subs	r3, r0, #0
 80048a2:	d001      	beq.n	80048a8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e012      	b.n	80048ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2288      	movs	r2, #136	; 0x88
 80048ac:	2120      	movs	r1, #32
 80048ae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	228c      	movs	r2, #140	; 0x8c
 80048b4:	2120      	movs	r1, #32
 80048b6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2284      	movs	r2, #132	; 0x84
 80048c8:	2100      	movs	r1, #0
 80048ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b004      	add	sp, #16
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	01ffffff 	.word	0x01ffffff

080048dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b094      	sub	sp, #80	; 0x50
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	1dfb      	adds	r3, r7, #7
 80048ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	e0a7      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f0:	3301      	adds	r3, #1
 80048f2:	d100      	bne.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80048f4:	e0a3      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fc fe01 	bl	80014fc <HAL_GetTick>
 80048fa:	0002      	movs	r2, r0
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <UART_WaitOnFlagUntilTimeout+0x30>
 8004906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004908:	2b00      	cmp	r3, #0
 800490a:	d13f      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490c:	f3ef 8310 	mrs	r3, PRIMASK
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004914:	647b      	str	r3, [r7, #68]	; 0x44
 8004916:	2301      	movs	r3, #1
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	f383 8810 	msr	PRIMASK, r3
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	494e      	ldr	r1, [pc, #312]	; (8004a68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800492e:	400a      	ands	r2, r1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004934:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	f383 8810 	msr	PRIMASK, r3
}
 800493c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493e:	f3ef 8310 	mrs	r3, PRIMASK
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
 8004948:	2301      	movs	r3, #1
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	f383 8810 	msr	PRIMASK, r3
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2101      	movs	r1, #1
 8004960:	438a      	bics	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	f383 8810 	msr	PRIMASK, r3
}
 800496e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2288      	movs	r2, #136	; 0x88
 8004974:	2120      	movs	r1, #32
 8004976:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	228c      	movs	r2, #140	; 0x8c
 800497c:	2120      	movs	r1, #32
 800497e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2284      	movs	r2, #132	; 0x84
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e069      	b.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2204      	movs	r2, #4
 8004994:	4013      	ands	r3, r2
 8004996:	d052      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	401a      	ands	r2, r3
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d148      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2280      	movs	r2, #128	; 0x80
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ba:	613b      	str	r3, [r7, #16]
  return(result);
 80049bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f383 8810 	msr	PRIMASK, r3
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4924      	ldr	r1, [pc, #144]	; (8004a68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80049d8:	400a      	ands	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f383 8810 	msr	PRIMASK, r3
}
 80049e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80049ee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f2:	2301      	movs	r3, #1
 80049f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2288      	movs	r2, #136	; 0x88
 8004a1e:	2120      	movs	r1, #32
 8004a20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	228c      	movs	r2, #140	; 0x8c
 8004a26:	2120      	movs	r1, #32
 8004a28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2290      	movs	r2, #144	; 0x90
 8004a2e:	2120      	movs	r1, #32
 8004a30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2284      	movs	r2, #132	; 0x84
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e010      	b.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	425a      	negs	r2, r3
 8004a4e:	4153      	adcs	r3, r2
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	001a      	movs	r2, r3
 8004a54:	1dfb      	adds	r3, r7, #7
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d100      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x182>
 8004a5c:	e747      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b014      	add	sp, #80	; 0x50
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	fffffe5f 	.word	0xfffffe5f

08004a6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2284      	movs	r2, #132	; 0x84
 8004a78:	5c9b      	ldrb	r3, [r3, r2]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e027      	b.n	8004ad2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2284      	movs	r2, #132	; 0x84
 8004a86:	2101      	movs	r1, #1
 8004a88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2288      	movs	r2, #136	; 0x88
 8004a8e:	2124      	movs	r1, #36	; 0x24
 8004a90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2288      	movs	r2, #136	; 0x88
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2284      	movs	r2, #132	; 0x84
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	dfffffff 	.word	0xdfffffff

08004ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2284      	movs	r2, #132	; 0x84
 8004aee:	5c9b      	ldrb	r3, [r3, r2]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e02e      	b.n	8004b56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2284      	movs	r2, #132	; 0x84
 8004afc:	2101      	movs	r1, #1
 8004afe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2288      	movs	r2, #136	; 0x88
 8004b04:	2124      	movs	r1, #36	; 0x24
 8004b06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	08d9      	lsrs	r1, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 f854 	bl	8004be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2288      	movs	r2, #136	; 0x88
 8004b48:	2120      	movs	r1, #32
 8004b4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2284      	movs	r2, #132	; 0x84
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2284      	movs	r2, #132	; 0x84
 8004b6e:	5c9b      	ldrb	r3, [r3, r2]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e02f      	b.n	8004bd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2284      	movs	r2, #132	; 0x84
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2288      	movs	r2, #136	; 0x88
 8004b84:	2124      	movs	r1, #36	; 0x24
 8004b86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	438a      	bics	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 f813 	bl	8004be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2288      	movs	r2, #136	; 0x88
 8004bca:	2120      	movs	r1, #32
 8004bcc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2284      	movs	r2, #132	; 0x84
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	f1ffffff 	.word	0xf1ffffff

08004be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d108      	bne.n	8004c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	226a      	movs	r2, #106	; 0x6a
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2268      	movs	r2, #104	; 0x68
 8004c00:	2101      	movs	r1, #1
 8004c02:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c04:	e043      	b.n	8004c8e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c06:	260f      	movs	r6, #15
 8004c08:	19bb      	adds	r3, r7, r6
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c0e:	200e      	movs	r0, #14
 8004c10:	183b      	adds	r3, r7, r0
 8004c12:	2208      	movs	r2, #8
 8004c14:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	0e5b      	lsrs	r3, r3, #25
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	240d      	movs	r4, #13
 8004c22:	193b      	adds	r3, r7, r4
 8004c24:	2107      	movs	r1, #7
 8004c26:	400a      	ands	r2, r1
 8004c28:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	0f5b      	lsrs	r3, r3, #29
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	250c      	movs	r5, #12
 8004c36:	197b      	adds	r3, r7, r5
 8004c38:	2107      	movs	r1, #7
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c3e:	183b      	adds	r3, r7, r0
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	197a      	adds	r2, r7, r5
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	4914      	ldr	r1, [pc, #80]	; (8004c98 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c48:	5c8a      	ldrb	r2, [r1, r2]
 8004c4a:	435a      	muls	r2, r3
 8004c4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c4e:	197b      	adds	r3, r7, r5
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <UARTEx_SetNbDataToProcess+0xb8>)
 8004c54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c56:	0019      	movs	r1, r3
 8004c58:	f7fb faf0 	bl	800023c <__divsi3>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	b299      	uxth	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	226a      	movs	r2, #106	; 0x6a
 8004c64:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c66:	19bb      	adds	r3, r7, r6
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	193a      	adds	r2, r7, r4
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	490a      	ldr	r1, [pc, #40]	; (8004c98 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c70:	5c8a      	ldrb	r2, [r1, r2]
 8004c72:	435a      	muls	r2, r3
 8004c74:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <UARTEx_SetNbDataToProcess+0xb8>)
 8004c7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c7e:	0019      	movs	r1, r3
 8004c80:	f7fb fadc 	bl	800023c <__divsi3>
 8004c84:	0003      	movs	r3, r0
 8004c86:	b299      	uxth	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2268      	movs	r2, #104	; 0x68
 8004c8c:	5299      	strh	r1, [r3, r2]
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b005      	add	sp, #20
 8004c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	08008c8c 	.word	0x08008c8c
 8004c9c:	08008c94 	.word	0x08008c94

08004ca0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <USB_EnableGlobalInt+0x24>)
 8004cb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	0000bf80 	.word	0x0000bf80

08004cc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <USB_DisableGlobalInt+0x24>)
 8004cd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	43d2      	mvns	r2, r2
 8004cdc:	401a      	ands	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b004      	add	sp, #16
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	0000bf80 	.word	0x0000bf80

08004cf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	000a      	movs	r2, r1
 8004cfa:	1cfb      	adds	r3, r7, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8004cfe:	1cfb      	adds	r3, r7, #3
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	085a      	lsrs	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
 8004d12:	e006      	b.n	8004d22 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	2280      	movs	r2, #128	; 0x80
 8004d1a:	0612      	lsls	r2, r2, #24
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	b590      	push	{r4, r7, lr}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	2004      	movs	r0, #4
 8004d38:	2410      	movs	r4, #16
 8004d3a:	1900      	adds	r0, r0, r4
 8004d3c:	2408      	movs	r4, #8
 8004d3e:	46a4      	mov	ip, r4
 8004d40:	44bc      	add	ip, r7
 8004d42:	4460      	add	r0, ip
 8004d44:	6001      	str	r1, [r0, #0]
 8004d46:	6042      	str	r2, [r0, #4]
 8004d48:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2201      	movs	r2, #1
 8004d56:	4393      	bics	r3, r2
 8004d58:	001a      	movs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2100      	movs	r1, #0
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff ffc4 	bl	8004cf0 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b003      	add	sp, #12
 8004d76:	bc90      	pop	{r4, r7}
 8004d78:	bc08      	pop	{r3}
 8004d7a:	b004      	add	sp, #16
 8004d7c:	4718      	bx	r3
	...

08004d80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09e      	sub	sp, #120	; 0x78
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d8a:	2377      	movs	r3, #119	; 0x77
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4ad8      	ldr	r2, [pc, #864]	; (8005100 <USB_ActivateEndpoint+0x380>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	78db      	ldrb	r3, [r3, #3]
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d00e      	beq.n	8004dca <USB_ActivateEndpoint+0x4a>
 8004dac:	dc19      	bgt.n	8004de2 <USB_ActivateEndpoint+0x62>
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d01c      	beq.n	8004dec <USB_ActivateEndpoint+0x6c>
 8004db2:	dc16      	bgt.n	8004de2 <USB_ActivateEndpoint+0x62>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <USB_ActivateEndpoint+0x3e>
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d00c      	beq.n	8004dd6 <USB_ActivateEndpoint+0x56>
 8004dbc:	e011      	b.n	8004de2 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	0092      	lsls	r2, r2, #2
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004dc8:	e011      	b.n	8004dee <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dcc:	22c0      	movs	r2, #192	; 0xc0
 8004dce:	00d2      	lsls	r2, r2, #3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004dd4:	e00b      	b.n	8004dee <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	00d2      	lsls	r2, r2, #3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004de0:	e005      	b.n	8004dee <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8004de2:	2377      	movs	r3, #119	; 0x77
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
      break;
 8004dea:	e000      	b.n	8004dee <USB_ActivateEndpoint+0x6e>
      break;
 8004dec:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	18d3      	adds	r3, r2, r3
 8004df8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004dfa:	49c2      	ldr	r1, [pc, #776]	; (8005104 <USB_ActivateEndpoint+0x384>)
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4abe      	ldr	r2, [pc, #760]	; (8005108 <USB_ActivateEndpoint+0x388>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	7812      	ldrb	r2, [r2, #0]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e24:	49b7      	ldr	r1, [pc, #732]	; (8005104 <USB_ActivateEndpoint+0x384>)
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	7a9b      	ldrb	r3, [r3, #10]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d000      	beq.n	8004e34 <USB_ActivateEndpoint+0xb4>
 8004e32:	e177      	b.n	8005124 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d06e      	beq.n	8004f1a <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4ab2      	ldr	r2, [pc, #712]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004e44:	4694      	mov	ip, r2
 8004e46:	4463      	add	r3, ip
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	49ae      	ldr	r1, [pc, #696]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004e52:	468c      	mov	ip, r1
 8004e54:	4463      	add	r3, ip
 8004e56:	0c12      	lsrs	r2, r2, #16
 8004e58:	0412      	lsls	r2, r2, #16
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4aaa      	ldr	r2, [pc, #680]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004e64:	4694      	mov	ip, r2
 8004e66:	4463      	add	r3, ip
 8004e68:	6819      	ldr	r1, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	889b      	ldrh	r3, [r3, #4]
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	48a4      	ldr	r0, [pc, #656]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004e7c:	4684      	mov	ip, r0
 8004e7e:	4463      	add	r3, ip
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2240      	movs	r2, #64	; 0x40
 8004e96:	4013      	ands	r3, r2
 8004e98:	d011      	beq.n	8004ebe <USB_ActivateEndpoint+0x13e>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	18d3      	adds	r3, r2, r3
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a98      	ldr	r2, [pc, #608]	; (8005108 <USB_ActivateEndpoint+0x388>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	18d3      	adds	r3, r2, r3
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4995      	ldr	r1, [pc, #596]	; (8005110 <USB_ActivateEndpoint+0x390>)
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d016      	beq.n	8004ef4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	18d3      	adds	r3, r2, r3
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a90      	ldr	r2, [pc, #576]	; (8005114 <USB_ActivateEndpoint+0x394>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	4053      	eors	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	18d3      	adds	r3, r2, r3
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4985      	ldr	r1, [pc, #532]	; (8005104 <USB_ActivateEndpoint+0x384>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e270      	b.n	80053d6 <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a84      	ldr	r2, [pc, #528]	; (8005114 <USB_ActivateEndpoint+0x394>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	18d3      	adds	r3, r2, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	497c      	ldr	r1, [pc, #496]	; (8005104 <USB_ActivateEndpoint+0x384>)
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e25d      	b.n	80053d6 <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4a7a      	ldr	r2, [pc, #488]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004f22:	4694      	mov	ip, r2
 8004f24:	4463      	add	r3, ip
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4977      	ldr	r1, [pc, #476]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004f30:	468c      	mov	ip, r1
 8004f32:	4463      	add	r3, ip
 8004f34:	0c12      	lsrs	r2, r2, #16
 8004f36:	0412      	lsls	r2, r2, #16
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4a72      	ldr	r2, [pc, #456]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004f42:	4694      	mov	ip, r2
 8004f44:	4463      	add	r3, ip
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	889b      	ldrh	r3, [r3, #4]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	009a      	lsls	r2, r3, #2
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	486c      	ldr	r0, [pc, #432]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004f5a:	4684      	mov	ip, r0
 8004f5c:	4463      	add	r3, ip
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4a68      	ldr	r2, [pc, #416]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004f6a:	4694      	mov	ip, r2
 8004f6c:	4463      	add	r3, ip
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4965      	ldr	r1, [pc, #404]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004f78:	468c      	mov	ip, r1
 8004f7a:	4463      	add	r3, ip
 8004f7c:	0412      	lsls	r2, r2, #16
 8004f7e:	0c12      	lsrs	r2, r2, #16
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b3e      	cmp	r3, #62	; 0x3e
 8004f88:	d920      	bls.n	8004fcc <USB_ActivateEndpoint+0x24c>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	221f      	movs	r2, #31
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <USB_ActivateEndpoint+0x222>
 8004f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4a58      	ldr	r2, [pc, #352]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004faa:	4694      	mov	ip, r2
 8004fac:	4463      	add	r3, ip
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	069b      	lsls	r3, r3, #26
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4953      	ldr	r1, [pc, #332]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004fbe:	468c      	mov	ip, r1
 8004fc0:	4463      	add	r3, ip
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	0609      	lsls	r1, r1, #24
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	e042      	b.n	8005052 <USB_ActivateEndpoint+0x2d2>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d121      	bne.n	8005018 <USB_ActivateEndpoint+0x298>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4a4c      	ldr	r2, [pc, #304]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004fdc:	4694      	mov	ip, r2
 8004fde:	4463      	add	r3, ip
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4948      	ldr	r1, [pc, #288]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004fea:	468c      	mov	ip, r1
 8004fec:	4463      	add	r3, ip
 8004fee:	494a      	ldr	r1, [pc, #296]	; (8005118 <USB_ActivateEndpoint+0x398>)
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4a44      	ldr	r2, [pc, #272]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	4463      	add	r3, ip
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4940      	ldr	r1, [pc, #256]	; (800510c <USB_ActivateEndpoint+0x38c>)
 800500a:	468c      	mov	ip, r1
 800500c:	4463      	add	r3, ip
 800500e:	2180      	movs	r1, #128	; 0x80
 8005010:	0609      	lsls	r1, r1, #24
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	e01c      	b.n	8005052 <USB_ActivateEndpoint+0x2d2>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2201      	movs	r2, #1
 8005026:	4013      	ands	r3, r2
 8005028:	d002      	beq.n	8005030 <USB_ActivateEndpoint+0x2b0>
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	3301      	adds	r3, #1
 800502e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4a35      	ldr	r2, [pc, #212]	; (800510c <USB_ActivateEndpoint+0x38c>)
 8005038:	4694      	mov	ip, r2
 800503a:	4463      	add	r3, ip
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	069a      	lsls	r2, r3, #26
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4830      	ldr	r0, [pc, #192]	; (800510c <USB_ActivateEndpoint+0x38c>)
 800504a:	4684      	mov	ip, r0
 800504c:	4463      	add	r3, ip
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	18d3      	adds	r3, r2, r3
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	01db      	lsls	r3, r3, #7
 8005066:	4013      	ands	r3, r2
 8005068:	d011      	beq.n	800508e <USB_ActivateEndpoint+0x30e>
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a24      	ldr	r2, [pc, #144]	; (8005108 <USB_ActivateEndpoint+0x388>)
 8005078:	4013      	ands	r3, r2
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	18d3      	adds	r3, r2, r3
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	4924      	ldr	r1, [pc, #144]	; (800511c <USB_ActivateEndpoint+0x39c>)
 800508a:	430a      	orrs	r2, r1
 800508c:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11c      	bne.n	80050d0 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	18d3      	adds	r3, r2, r3
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <USB_ActivateEndpoint+0x3a0>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2280      	movs	r2, #128	; 0x80
 80050ac:	0152      	lsls	r2, r2, #5
 80050ae:	4053      	eors	r3, r2
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2280      	movs	r2, #128	; 0x80
 80050b6:	0192      	lsls	r2, r2, #6
 80050b8:	4053      	eors	r3, r2
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	18d3      	adds	r3, r2, r3
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	490e      	ldr	r1, [pc, #56]	; (8005104 <USB_ActivateEndpoint+0x384>)
 80050ca:	430a      	orrs	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e182      	b.n	80053d6 <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	18d3      	adds	r3, r2, r3
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a10      	ldr	r2, [pc, #64]	; (8005120 <USB_ActivateEndpoint+0x3a0>)
 80050de:	4013      	ands	r3, r2
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	0192      	lsls	r2, r2, #6
 80050e8:	4053      	eors	r3, r2
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	18d3      	adds	r3, r2, r3
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	4902      	ldr	r1, [pc, #8]	; (8005104 <USB_ActivateEndpoint+0x384>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e16a      	b.n	80053d6 <USB_ActivateEndpoint+0x656>
 8005100:	07ff898f 	.word	0x07ff898f
 8005104:	00008080 	.word	0x00008080
 8005108:	07ff8f8f 	.word	0x07ff8f8f
 800510c:	40009800 	.word	0x40009800
 8005110:	000080c0 	.word	0x000080c0
 8005114:	07ff8fbf 	.word	0x07ff8fbf
 8005118:	83ffffff 	.word	0x83ffffff
 800511c:	0000c080 	.word	0x0000c080
 8005120:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	78db      	ldrb	r3, [r3, #3]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d112      	bne.n	8005152 <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	18d3      	adds	r3, r2, r3
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4aaa      	ldr	r2, [pc, #680]	; (80053e4 <USB_ActivateEndpoint+0x664>)
 800513a:	4013      	ands	r3, r2
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800514a:	49a7      	ldr	r1, [pc, #668]	; (80053e8 <USB_ActivateEndpoint+0x668>)
 800514c:	430a      	orrs	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e011      	b.n	8005176 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	18d3      	adds	r3, r2, r3
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4aa3      	ldr	r2, [pc, #652]	; (80053ec <USB_ActivateEndpoint+0x66c>)
 8005160:	4013      	ands	r3, r2
 8005162:	667b      	str	r3, [r7, #100]	; 0x64
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	18d3      	adds	r3, r2, r3
 800516e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005170:	499f      	ldr	r1, [pc, #636]	; (80053f0 <USB_ActivateEndpoint+0x670>)
 8005172:	430a      	orrs	r2, r1
 8005174:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4a9d      	ldr	r2, [pc, #628]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 800517e:	4694      	mov	ip, r2
 8005180:	4463      	add	r3, ip
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	499a      	ldr	r1, [pc, #616]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 800518c:	468c      	mov	ip, r1
 800518e:	4463      	add	r3, ip
 8005190:	0c12      	lsrs	r2, r2, #16
 8005192:	0412      	lsls	r2, r2, #16
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4a95      	ldr	r2, [pc, #596]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 800519e:	4694      	mov	ip, r2
 80051a0:	4463      	add	r3, ip
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	88db      	ldrh	r3, [r3, #6]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	009a      	lsls	r2, r3, #2
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	488f      	ldr	r0, [pc, #572]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 80051b6:	4684      	mov	ip, r0
 80051b8:	4463      	add	r3, ip
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4a8b      	ldr	r2, [pc, #556]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 80051c6:	4694      	mov	ip, r2
 80051c8:	4463      	add	r3, ip
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4988      	ldr	r1, [pc, #544]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 80051d4:	468c      	mov	ip, r1
 80051d6:	4463      	add	r3, ip
 80051d8:	0c12      	lsrs	r2, r2, #16
 80051da:	0412      	lsls	r2, r2, #16
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4a83      	ldr	r2, [pc, #524]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 80051e6:	4694      	mov	ip, r2
 80051e8:	4463      	add	r3, ip
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	891b      	ldrh	r3, [r3, #8]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	009a      	lsls	r2, r3, #2
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	487d      	ldr	r0, [pc, #500]	; (80053f4 <USB_ActivateEndpoint+0x674>)
 80051fe:	4684      	mov	ip, r0
 8005200:	4463      	add	r3, ip
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d169      	bne.n	80052e2 <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	643b      	str	r3, [r7, #64]	; 0x40
 800521c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	01db      	lsls	r3, r3, #7
 8005222:	4013      	ands	r3, r2
 8005224:	d011      	beq.n	800524a <USB_ActivateEndpoint+0x4ca>
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	18d3      	adds	r3, r2, r3
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a6c      	ldr	r2, [pc, #432]	; (80053e4 <USB_ActivateEndpoint+0x664>)
 8005234:	4013      	ands	r3, r2
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	18d3      	adds	r3, r2, r3
 8005242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005244:	496c      	ldr	r1, [pc, #432]	; (80053f8 <USB_ActivateEndpoint+0x678>)
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	18d3      	adds	r3, r2, r3
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	2240      	movs	r2, #64	; 0x40
 800525c:	4013      	ands	r3, r2
 800525e:	d011      	beq.n	8005284 <USB_ActivateEndpoint+0x504>
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	18d3      	adds	r3, r2, r3
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a5d      	ldr	r2, [pc, #372]	; (80053e4 <USB_ActivateEndpoint+0x664>)
 800526e:	4013      	ands	r3, r2
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	18d3      	adds	r3, r2, r3
 800527c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527e:	495f      	ldr	r1, [pc, #380]	; (80053fc <USB_ActivateEndpoint+0x67c>)
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5b      	ldr	r2, [pc, #364]	; (8005400 <USB_ActivateEndpoint+0x680>)
 8005292:	4013      	ands	r3, r2
 8005294:	633b      	str	r3, [r7, #48]	; 0x30
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	2280      	movs	r2, #128	; 0x80
 800529a:	0152      	lsls	r2, r2, #5
 800529c:	4053      	eors	r3, r2
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	0192      	lsls	r2, r2, #6
 80052a6:	4053      	eors	r3, r2
 80052a8:	633b      	str	r3, [r7, #48]	; 0x30
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	18d3      	adds	r3, r2, r3
 80052b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b6:	494e      	ldr	r1, [pc, #312]	; (80053f0 <USB_ActivateEndpoint+0x670>)
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a4e      	ldr	r2, [pc, #312]	; (8005404 <USB_ActivateEndpoint+0x684>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	18d3      	adds	r3, r2, r3
 80052d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052da:	4945      	ldr	r1, [pc, #276]	; (80053f0 <USB_ActivateEndpoint+0x670>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e079      	b.n	80053d6 <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	18d3      	adds	r3, r2, r3
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	01db      	lsls	r3, r3, #7
 80052f6:	4013      	ands	r3, r2
 80052f8:	d011      	beq.n	800531e <USB_ActivateEndpoint+0x59e>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	18d3      	adds	r3, r2, r3
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a37      	ldr	r2, [pc, #220]	; (80053e4 <USB_ActivateEndpoint+0x664>)
 8005308:	4013      	ands	r3, r2
 800530a:	65bb      	str	r3, [r7, #88]	; 0x58
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	18d3      	adds	r3, r2, r3
 8005316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005318:	4937      	ldr	r1, [pc, #220]	; (80053f8 <USB_ActivateEndpoint+0x678>)
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	18d3      	adds	r3, r2, r3
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	657b      	str	r3, [r7, #84]	; 0x54
 800532c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	4013      	ands	r3, r2
 8005332:	d011      	beq.n	8005358 <USB_ActivateEndpoint+0x5d8>
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	18d3      	adds	r3, r2, r3
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <USB_ActivateEndpoint+0x664>)
 8005342:	4013      	ands	r3, r2
 8005344:	653b      	str	r3, [r7, #80]	; 0x50
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	18d3      	adds	r3, r2, r3
 8005350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005352:	492a      	ldr	r1, [pc, #168]	; (80053fc <USB_ActivateEndpoint+0x67c>)
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	78db      	ldrb	r3, [r3, #3]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d016      	beq.n	800538e <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a25      	ldr	r2, [pc, #148]	; (8005404 <USB_ActivateEndpoint+0x684>)
 800536e:	4013      	ands	r3, r2
 8005370:	64bb      	str	r3, [r7, #72]	; 0x48
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005374:	2220      	movs	r2, #32
 8005376:	4053      	eors	r3, r2
 8005378:	64bb      	str	r3, [r7, #72]	; 0x48
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	18d3      	adds	r3, r2, r3
 8005384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005386:	491a      	ldr	r1, [pc, #104]	; (80053f0 <USB_ActivateEndpoint+0x670>)
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e011      	b.n	80053b2 <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	18d3      	adds	r3, r2, r3
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <USB_ActivateEndpoint+0x684>)
 800539c:	4013      	ands	r3, r2
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ac:	4910      	ldr	r1, [pc, #64]	; (80053f0 <USB_ActivateEndpoint+0x670>)
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <USB_ActivateEndpoint+0x680>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	18d3      	adds	r3, r2, r3
 80053ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d0:	4907      	ldr	r1, [pc, #28]	; (80053f0 <USB_ActivateEndpoint+0x670>)
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80053d6:	2377      	movs	r3, #119	; 0x77
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	781b      	ldrb	r3, [r3, #0]
}
 80053dc:	0018      	movs	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	b01e      	add	sp, #120	; 0x78
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	07ff8f8f 	.word	0x07ff8f8f
 80053e8:	00008180 	.word	0x00008180
 80053ec:	07ff8e8f 	.word	0x07ff8e8f
 80053f0:	00008080 	.word	0x00008080
 80053f4:	40009800 	.word	0x40009800
 80053f8:	0000c080 	.word	0x0000c080
 80053fc:	000080c0 	.word	0x000080c0
 8005400:	07ffbf8f 	.word	0x07ffbf8f
 8005404:	07ff8fbf 	.word	0x07ff8fbf

08005408 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b096      	sub	sp, #88	; 0x58
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	7a9b      	ldrb	r3, [r3, #10]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d164      	bne.n	80054e4 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02f      	beq.n	8005482 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2240      	movs	r2, #64	; 0x40
 8005434:	4013      	ands	r3, r2
 8005436:	d011      	beq.n	800545c <USB_DeactivateEndpoint+0x54>
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	18d3      	adds	r3, r2, r3
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a9d      	ldr	r2, [pc, #628]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 8005446:	4013      	ands	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	18d3      	adds	r3, r2, r3
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	499a      	ldr	r1, [pc, #616]	; (80056c0 <USB_DeactivateEndpoint+0x2b8>)
 8005458:	430a      	orrs	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	18d3      	adds	r3, r2, r3
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a96      	ldr	r2, [pc, #600]	; (80056c4 <USB_DeactivateEndpoint+0x2bc>)
 800546a:	4013      	ands	r3, r2
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4993      	ldr	r1, [pc, #588]	; (80056c8 <USB_DeactivateEndpoint+0x2c0>)
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e117      	b.n	80056b2 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	18d3      	adds	r3, r2, r3
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	01db      	lsls	r3, r3, #7
 8005496:	4013      	ands	r3, r2
 8005498:	d011      	beq.n	80054be <USB_DeactivateEndpoint+0xb6>
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18d3      	adds	r3, r2, r3
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a85      	ldr	r2, [pc, #532]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	18d3      	adds	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4984      	ldr	r1, [pc, #528]	; (80056cc <USB_DeactivateEndpoint+0x2c4>)
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	18d3      	adds	r3, r2, r3
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a81      	ldr	r2, [pc, #516]	; (80056d0 <USB_DeactivateEndpoint+0x2c8>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	497a      	ldr	r1, [pc, #488]	; (80056c8 <USB_DeactivateEndpoint+0x2c0>)
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e0e6      	b.n	80056b2 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d171      	bne.n	80055d0 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	18d3      	adds	r3, r2, r3
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4013      	ands	r3, r2
 8005502:	d011      	beq.n	8005528 <USB_DeactivateEndpoint+0x120>
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	18d3      	adds	r3, r2, r3
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6a      	ldr	r2, [pc, #424]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 8005512:	4013      	ands	r3, r2
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	18d3      	adds	r3, r2, r3
 8005520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005522:	496a      	ldr	r1, [pc, #424]	; (80056cc <USB_DeactivateEndpoint+0x2c4>)
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	18d3      	adds	r3, r2, r3
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	2240      	movs	r2, #64	; 0x40
 800553a:	4013      	ands	r3, r2
 800553c:	d011      	beq.n	8005562 <USB_DeactivateEndpoint+0x15a>
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	18d3      	adds	r3, r2, r3
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a5c      	ldr	r2, [pc, #368]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 800554c:	4013      	ands	r3, r2
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555c:	4958      	ldr	r1, [pc, #352]	; (80056c0 <USB_DeactivateEndpoint+0x2b8>)
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	18d3      	adds	r3, r2, r3
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a53      	ldr	r2, [pc, #332]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 8005570:	4013      	ands	r3, r2
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	18d3      	adds	r3, r2, r3
 800557e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005580:	494f      	ldr	r1, [pc, #316]	; (80056c0 <USB_DeactivateEndpoint+0x2b8>)
 8005582:	430a      	orrs	r2, r1
 8005584:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a4f      	ldr	r2, [pc, #316]	; (80056d0 <USB_DeactivateEndpoint+0x2c8>)
 8005594:	4013      	ands	r3, r2
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a4:	4948      	ldr	r1, [pc, #288]	; (80056c8 <USB_DeactivateEndpoint+0x2c0>)
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	18d3      	adds	r3, r2, r3
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a43      	ldr	r2, [pc, #268]	; (80056c4 <USB_DeactivateEndpoint+0x2bc>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	623b      	str	r3, [r7, #32]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	18d3      	adds	r3, r2, r3
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	493f      	ldr	r1, [pc, #252]	; (80056c8 <USB_DeactivateEndpoint+0x2c0>)
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e070      	b.n	80056b2 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	18d3      	adds	r3, r2, r3
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	657b      	str	r3, [r7, #84]	; 0x54
 80055de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	01db      	lsls	r3, r3, #7
 80055e4:	4013      	ands	r3, r2
 80055e6:	d011      	beq.n	800560c <USB_DeactivateEndpoint+0x204>
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	18d3      	adds	r3, r2, r3
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a31      	ldr	r2, [pc, #196]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	653b      	str	r3, [r7, #80]	; 0x50
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	18d3      	adds	r3, r2, r3
 8005604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005606:	4931      	ldr	r1, [pc, #196]	; (80056cc <USB_DeactivateEndpoint+0x2c4>)
 8005608:	430a      	orrs	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	18d3      	adds	r3, r2, r3
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	2240      	movs	r2, #64	; 0x40
 800561e:	4013      	ands	r3, r2
 8005620:	d011      	beq.n	8005646 <USB_DeactivateEndpoint+0x23e>
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	18d3      	adds	r3, r2, r3
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a23      	ldr	r2, [pc, #140]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 8005630:	4013      	ands	r3, r2
 8005632:	64bb      	str	r3, [r7, #72]	; 0x48
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005640:	491f      	ldr	r1, [pc, #124]	; (80056c0 <USB_DeactivateEndpoint+0x2b8>)
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	18d3      	adds	r3, r2, r3
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <USB_DeactivateEndpoint+0x2b4>)
 8005654:	4013      	ands	r3, r2
 8005656:	647b      	str	r3, [r7, #68]	; 0x44
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	18d3      	adds	r3, r2, r3
 8005662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005664:	4919      	ldr	r1, [pc, #100]	; (80056cc <USB_DeactivateEndpoint+0x2c4>)
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	18d3      	adds	r3, r2, r3
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <USB_DeactivateEndpoint+0x2bc>)
 8005678:	4013      	ands	r3, r2
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	18d3      	adds	r3, r2, r3
 8005686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005688:	490f      	ldr	r1, [pc, #60]	; (80056c8 <USB_DeactivateEndpoint+0x2c0>)
 800568a:	430a      	orrs	r2, r1
 800568c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	18d3      	adds	r3, r2, r3
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <USB_DeactivateEndpoint+0x2c8>)
 800569c:	4013      	ands	r3, r2
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	18d3      	adds	r3, r2, r3
 80056aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056ac:	4906      	ldr	r1, [pc, #24]	; (80056c8 <USB_DeactivateEndpoint+0x2c0>)
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b016      	add	sp, #88	; 0x58
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	07ff8f8f 	.word	0x07ff8f8f
 80056c0:	000080c0 	.word	0x000080c0
 80056c4:	07ff8fbf 	.word	0x07ff8fbf
 80056c8:	00008080 	.word	0x00008080
 80056cc:	0000c080 	.word	0x0000c080
 80056d0:	07ffbf8f 	.word	0x07ffbf8f

080056d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b097      	sub	sp, #92	; 0x5c
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d001      	beq.n	80056ea <USB_EPStartXfer+0x16>
 80056e6:	f000 fd24 	bl	8006132 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d903      	bls.n	80056fe <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	657b      	str	r3, [r7, #84]	; 0x54
 80056fc:	e002      	b.n	8005704 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	7a9b      	ldrb	r3, [r3, #10]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d12b      	bne.n	8005764 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6959      	ldr	r1, [r3, #20]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	889a      	ldrh	r2, [r3, #4]
 8005714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005716:	b29b      	uxth	r3, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 f901 	bl	8006920 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4ade      	ldr	r2, [pc, #888]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005726:	4694      	mov	ip, r2
 8005728:	4463      	add	r3, ip
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	49db      	ldr	r1, [pc, #876]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005734:	468c      	mov	ip, r1
 8005736:	4463      	add	r3, ip
 8005738:	0412      	lsls	r2, r2, #16
 800573a:	0c12      	lsrs	r2, r2, #16
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4ad6      	ldr	r2, [pc, #856]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005746:	4694      	mov	ip, r2
 8005748:	4463      	add	r3, ip
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574e:	041a      	lsls	r2, r3, #16
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	48d2      	ldr	r0, [pc, #840]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005758:	4684      	mov	ip, r0
 800575a:	4463      	add	r3, ip
 800575c:	430a      	orrs	r2, r1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f000 fccb 	bl	80060fa <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	78db      	ldrb	r3, [r3, #3]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d000      	beq.n	800576e <USB_EPStartXfer+0x9a>
 800576c:	e35e      	b.n	8005e2c <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	d800      	bhi.n	800577c <USB_EPStartXfer+0xa8>
 800577a:	e309      	b.n	8005d90 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4ac6      	ldr	r2, [pc, #792]	; (8005aa4 <USB_EPStartXfer+0x3d0>)
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	18d3      	adds	r3, r2, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	49c3      	ldr	r1, [pc, #780]	; (8005aa8 <USB_EPStartXfer+0x3d4>)
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a6:	1ad2      	subs	r2, r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	18d3      	adds	r3, r2, r3
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2240      	movs	r2, #64	; 0x40
 80057ba:	4013      	ands	r3, r2
 80057bc:	d100      	bne.n	80057c0 <USB_EPStartXfer+0xec>
 80057be:	e177      	b.n	8005ab0 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d172      	bne.n	80058ae <USB_EPStartXfer+0x1da>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4ab4      	ldr	r2, [pc, #720]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80057d0:	4694      	mov	ip, r2
 80057d2:	4463      	add	r3, ip
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	49b0      	ldr	r1, [pc, #704]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80057de:	468c      	mov	ip, r1
 80057e0:	4463      	add	r3, ip
 80057e2:	0412      	lsls	r2, r2, #16
 80057e4:	0c12      	lsrs	r2, r2, #16
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	2b3e      	cmp	r3, #62	; 0x3e
 80057ec:	d91e      	bls.n	800582c <USB_EPStartXfer+0x158>
 80057ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	653b      	str	r3, [r7, #80]	; 0x50
 80057f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f6:	221f      	movs	r2, #31
 80057f8:	4013      	ands	r3, r2
 80057fa:	d102      	bne.n	8005802 <USB_EPStartXfer+0x12e>
 80057fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fe:	3b01      	subs	r3, #1
 8005800:	653b      	str	r3, [r7, #80]	; 0x50
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4aa5      	ldr	r2, [pc, #660]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 800580a:	4694      	mov	ip, r2
 800580c:	4463      	add	r3, ip
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005812:	069b      	lsls	r3, r3, #26
 8005814:	431a      	orrs	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	49a0      	ldr	r1, [pc, #640]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 800581e:	468c      	mov	ip, r1
 8005820:	4463      	add	r3, ip
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	0609      	lsls	r1, r1, #24
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	e065      	b.n	80058f8 <USB_EPStartXfer+0x224>
 800582c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582e:	2b00      	cmp	r3, #0
 8005830:	d121      	bne.n	8005876 <USB_EPStartXfer+0x1a2>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4a99      	ldr	r2, [pc, #612]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 800583a:	4694      	mov	ip, r2
 800583c:	4463      	add	r3, ip
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4996      	ldr	r1, [pc, #600]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005848:	468c      	mov	ip, r1
 800584a:	4463      	add	r3, ip
 800584c:	4997      	ldr	r1, [pc, #604]	; (8005aac <USB_EPStartXfer+0x3d8>)
 800584e:	400a      	ands	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4a91      	ldr	r2, [pc, #580]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 800585a:	4694      	mov	ip, r2
 800585c:	4463      	add	r3, ip
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	498e      	ldr	r1, [pc, #568]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005868:	468c      	mov	ip, r1
 800586a:	4463      	add	r3, ip
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0609      	lsls	r1, r1, #24
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
 8005874:	e040      	b.n	80058f8 <USB_EPStartXfer+0x224>
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	653b      	str	r3, [r7, #80]	; 0x50
 800587c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587e:	2201      	movs	r2, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d002      	beq.n	800588a <USB_EPStartXfer+0x1b6>
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	3301      	adds	r3, #1
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4a83      	ldr	r2, [pc, #524]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005892:	4694      	mov	ip, r2
 8005894:	4463      	add	r3, ip
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	069a      	lsls	r2, r3, #26
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	487f      	ldr	r0, [pc, #508]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80058a4:	4684      	mov	ip, r0
 80058a6:	4463      	add	r3, ip
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	e024      	b.n	80058f8 <USB_EPStartXfer+0x224>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d120      	bne.n	80058f8 <USB_EPStartXfer+0x224>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4a78      	ldr	r2, [pc, #480]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80058be:	4694      	mov	ip, r2
 80058c0:	4463      	add	r3, ip
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4975      	ldr	r1, [pc, #468]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80058cc:	468c      	mov	ip, r1
 80058ce:	4463      	add	r3, ip
 80058d0:	0412      	lsls	r2, r2, #16
 80058d2:	0c12      	lsrs	r2, r2, #16
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4a70      	ldr	r2, [pc, #448]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80058de:	4694      	mov	ip, r2
 80058e0:	4463      	add	r3, ip
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e6:	041a      	lsls	r2, r3, #16
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	486c      	ldr	r0, [pc, #432]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80058f0:	4684      	mov	ip, r0
 80058f2:	4463      	add	r3, ip
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80058f8:	201a      	movs	r0, #26
 80058fa:	183b      	adds	r3, r7, r0
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	8912      	ldrh	r2, [r2, #8]
 8005900:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6959      	ldr	r1, [r3, #20]
 8005906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005908:	b29c      	uxth	r4, r3
 800590a:	183b      	adds	r3, r7, r0
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	0023      	movs	r3, r4
 8005912:	f001 f805 	bl	8006920 <USB_WritePMA>
            ep->xfer_buff += len;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591c:	18d2      	adds	r2, r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	429a      	cmp	r2, r3
 800592c:	d906      	bls.n	800593c <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005934:	1ad2      	subs	r2, r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	621a      	str	r2, [r3, #32]
 800593a:	e005      	b.n	8005948 <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2200      	movs	r2, #0
 8005946:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d172      	bne.n	8005a36 <USB_EPStartXfer+0x362>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4a52      	ldr	r2, [pc, #328]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005958:	4694      	mov	ip, r2
 800595a:	4463      	add	r3, ip
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	494e      	ldr	r1, [pc, #312]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005966:	468c      	mov	ip, r1
 8005968:	4463      	add	r3, ip
 800596a:	0412      	lsls	r2, r2, #16
 800596c:	0c12      	lsrs	r2, r2, #16
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005972:	2b3e      	cmp	r3, #62	; 0x3e
 8005974:	d91e      	bls.n	80059b4 <USB_EPStartXfer+0x2e0>
 8005976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597e:	221f      	movs	r2, #31
 8005980:	4013      	ands	r3, r2
 8005982:	d102      	bne.n	800598a <USB_EPStartXfer+0x2b6>
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	3b01      	subs	r3, #1
 8005988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4a43      	ldr	r2, [pc, #268]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005992:	4694      	mov	ip, r2
 8005994:	4463      	add	r3, ip
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599a:	069b      	lsls	r3, r3, #26
 800599c:	431a      	orrs	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	493e      	ldr	r1, [pc, #248]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80059a6:	468c      	mov	ip, r1
 80059a8:	4463      	add	r3, ip
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	0609      	lsls	r1, r1, #24
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e065      	b.n	8005a80 <USB_EPStartXfer+0x3ac>
 80059b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d121      	bne.n	80059fe <USB_EPStartXfer+0x32a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4a37      	ldr	r2, [pc, #220]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80059c2:	4694      	mov	ip, r2
 80059c4:	4463      	add	r3, ip
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4934      	ldr	r1, [pc, #208]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80059d0:	468c      	mov	ip, r1
 80059d2:	4463      	add	r3, ip
 80059d4:	4935      	ldr	r1, [pc, #212]	; (8005aac <USB_EPStartXfer+0x3d8>)
 80059d6:	400a      	ands	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80059e2:	4694      	mov	ip, r2
 80059e4:	4463      	add	r3, ip
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	492c      	ldr	r1, [pc, #176]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 80059f0:	468c      	mov	ip, r1
 80059f2:	4463      	add	r3, ip
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	0609      	lsls	r1, r1, #24
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e040      	b.n	8005a80 <USB_EPStartXfer+0x3ac>
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a06:	2201      	movs	r2, #1
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d002      	beq.n	8005a12 <USB_EPStartXfer+0x33e>
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	3301      	adds	r3, #1
 8005a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005a1a:	4694      	mov	ip, r2
 8005a1c:	4463      	add	r3, ip
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a22:	069a      	lsls	r2, r3, #26
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	481d      	ldr	r0, [pc, #116]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005a2c:	4684      	mov	ip, r0
 8005a2e:	4463      	add	r3, ip
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e024      	b.n	8005a80 <USB_EPStartXfer+0x3ac>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d120      	bne.n	8005a80 <USB_EPStartXfer+0x3ac>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005a46:	4694      	mov	ip, r2
 8005a48:	4463      	add	r3, ip
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4913      	ldr	r1, [pc, #76]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005a54:	468c      	mov	ip, r1
 8005a56:	4463      	add	r3, ip
 8005a58:	0412      	lsls	r2, r2, #16
 8005a5a:	0c12      	lsrs	r2, r2, #16
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005a66:	4694      	mov	ip, r2
 8005a68:	4463      	add	r3, ip
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6e:	041a      	lsls	r2, r3, #16
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	480a      	ldr	r0, [pc, #40]	; (8005aa0 <USB_EPStartXfer+0x3cc>)
 8005a78:	4684      	mov	ip, r0
 8005a7a:	4463      	add	r3, ip
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a80:	201a      	movs	r0, #26
 8005a82:	183b      	adds	r3, r7, r0
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	88d2      	ldrh	r2, [r2, #6]
 8005a88:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6959      	ldr	r1, [r3, #20]
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a90:	b29c      	uxth	r4, r3
 8005a92:	183b      	adds	r3, r7, r0
 8005a94:	881a      	ldrh	r2, [r3, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	0023      	movs	r3, r4
 8005a9a:	f000 ff41 	bl	8006920 <USB_WritePMA>
 8005a9e:	e32c      	b.n	80060fa <USB_EPStartXfer+0xa26>
 8005aa0:	40009800 	.word	0x40009800
 8005aa4:	07ff8f8f 	.word	0x07ff8f8f
 8005aa8:	00008180 	.word	0x00008180
 8005aac:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d172      	bne.n	8005b9e <USB_EPStartXfer+0x4ca>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4ad7      	ldr	r2, [pc, #860]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005ac0:	4694      	mov	ip, r2
 8005ac2:	4463      	add	r3, ip
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	49d3      	ldr	r1, [pc, #844]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005ace:	468c      	mov	ip, r1
 8005ad0:	4463      	add	r3, ip
 8005ad2:	0412      	lsls	r2, r2, #16
 8005ad4:	0c12      	lsrs	r2, r2, #16
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ada:	2b3e      	cmp	r3, #62	; 0x3e
 8005adc:	d91e      	bls.n	8005b1c <USB_EPStartXfer+0x448>
 8005ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae6:	221f      	movs	r2, #31
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d102      	bne.n	8005af2 <USB_EPStartXfer+0x41e>
 8005aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aee:	3b01      	subs	r3, #1
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4ac8      	ldr	r2, [pc, #800]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005afa:	4694      	mov	ip, r2
 8005afc:	4463      	add	r3, ip
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b02:	069b      	lsls	r3, r3, #26
 8005b04:	431a      	orrs	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	49c3      	ldr	r1, [pc, #780]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b0e:	468c      	mov	ip, r1
 8005b10:	4463      	add	r3, ip
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	0609      	lsls	r1, r1, #24
 8005b16:	430a      	orrs	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e065      	b.n	8005be8 <USB_EPStartXfer+0x514>
 8005b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d121      	bne.n	8005b66 <USB_EPStartXfer+0x492>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4abc      	ldr	r2, [pc, #752]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b2a:	4694      	mov	ip, r2
 8005b2c:	4463      	add	r3, ip
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	49b9      	ldr	r1, [pc, #740]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b38:	468c      	mov	ip, r1
 8005b3a:	4463      	add	r3, ip
 8005b3c:	49b8      	ldr	r1, [pc, #736]	; (8005e20 <USB_EPStartXfer+0x74c>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4ab4      	ldr	r2, [pc, #720]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b4a:	4694      	mov	ip, r2
 8005b4c:	4463      	add	r3, ip
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	49b1      	ldr	r1, [pc, #708]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b58:	468c      	mov	ip, r1
 8005b5a:	4463      	add	r3, ip
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	0609      	lsls	r1, r1, #24
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	e040      	b.n	8005be8 <USB_EPStartXfer+0x514>
 8005b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4013      	ands	r3, r2
 8005b72:	d002      	beq.n	8005b7a <USB_EPStartXfer+0x4a6>
 8005b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b76:	3301      	adds	r3, #1
 8005b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4aa6      	ldr	r2, [pc, #664]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b82:	4694      	mov	ip, r2
 8005b84:	4463      	add	r3, ip
 8005b86:	6819      	ldr	r1, [r3, #0]
 8005b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8a:	069a      	lsls	r2, r3, #26
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	48a2      	ldr	r0, [pc, #648]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005b94:	4684      	mov	ip, r0
 8005b96:	4463      	add	r3, ip
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e024      	b.n	8005be8 <USB_EPStartXfer+0x514>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d120      	bne.n	8005be8 <USB_EPStartXfer+0x514>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4a9b      	ldr	r2, [pc, #620]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005bae:	4694      	mov	ip, r2
 8005bb0:	4463      	add	r3, ip
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4998      	ldr	r1, [pc, #608]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005bbc:	468c      	mov	ip, r1
 8005bbe:	4463      	add	r3, ip
 8005bc0:	0412      	lsls	r2, r2, #16
 8005bc2:	0c12      	lsrs	r2, r2, #16
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4a93      	ldr	r2, [pc, #588]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005bce:	4694      	mov	ip, r2
 8005bd0:	4463      	add	r3, ip
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	041a      	lsls	r2, r3, #16
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	488f      	ldr	r0, [pc, #572]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005be0:	4684      	mov	ip, r0
 8005be2:	4463      	add	r3, ip
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005be8:	201a      	movs	r0, #26
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	88d2      	ldrh	r2, [r2, #6]
 8005bf0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf8:	b29c      	uxth	r4, r3
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	881a      	ldrh	r2, [r3, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	0023      	movs	r3, r4
 8005c02:	f000 fe8d 	bl	8006920 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	18d2      	adds	r2, r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d906      	bls.n	8005c2c <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c24:	1ad2      	subs	r2, r2, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	621a      	str	r2, [r3, #32]
 8005c2a:	e005      	b.n	8005c38 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d172      	bne.n	8005d26 <USB_EPStartXfer+0x652>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4a75      	ldr	r2, [pc, #468]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005c48:	4694      	mov	ip, r2
 8005c4a:	4463      	add	r3, ip
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4971      	ldr	r1, [pc, #452]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005c56:	468c      	mov	ip, r1
 8005c58:	4463      	add	r3, ip
 8005c5a:	0412      	lsls	r2, r2, #16
 8005c5c:	0c12      	lsrs	r2, r2, #16
 8005c5e:	605a      	str	r2, [r3, #4]
 8005c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c62:	2b3e      	cmp	r3, #62	; 0x3e
 8005c64:	d91e      	bls.n	8005ca4 <USB_EPStartXfer+0x5d0>
 8005c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6e:	221f      	movs	r2, #31
 8005c70:	4013      	ands	r3, r2
 8005c72:	d102      	bne.n	8005c7a <USB_EPStartXfer+0x5a6>
 8005c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c76:	3b01      	subs	r3, #1
 8005c78:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4a66      	ldr	r2, [pc, #408]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005c82:	4694      	mov	ip, r2
 8005c84:	4463      	add	r3, ip
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8a:	069b      	lsls	r3, r3, #26
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4961      	ldr	r1, [pc, #388]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005c96:	468c      	mov	ip, r1
 8005c98:	4463      	add	r3, ip
 8005c9a:	2180      	movs	r1, #128	; 0x80
 8005c9c:	0609      	lsls	r1, r1, #24
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	e065      	b.n	8005d70 <USB_EPStartXfer+0x69c>
 8005ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d121      	bne.n	8005cee <USB_EPStartXfer+0x61a>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4a5a      	ldr	r2, [pc, #360]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005cb2:	4694      	mov	ip, r2
 8005cb4:	4463      	add	r3, ip
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4957      	ldr	r1, [pc, #348]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005cc0:	468c      	mov	ip, r1
 8005cc2:	4463      	add	r3, ip
 8005cc4:	4956      	ldr	r1, [pc, #344]	; (8005e20 <USB_EPStartXfer+0x74c>)
 8005cc6:	400a      	ands	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4a52      	ldr	r2, [pc, #328]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005cd2:	4694      	mov	ip, r2
 8005cd4:	4463      	add	r3, ip
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	494f      	ldr	r1, [pc, #316]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005ce0:	468c      	mov	ip, r1
 8005ce2:	4463      	add	r3, ip
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	0609      	lsls	r1, r1, #24
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	e040      	b.n	8005d70 <USB_EPStartXfer+0x69c>
 8005cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d002      	beq.n	8005d02 <USB_EPStartXfer+0x62e>
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfe:	3301      	adds	r3, #1
 8005d00:	647b      	str	r3, [r7, #68]	; 0x44
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4a44      	ldr	r2, [pc, #272]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005d0a:	4694      	mov	ip, r2
 8005d0c:	4463      	add	r3, ip
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d12:	069a      	lsls	r2, r3, #26
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4840      	ldr	r0, [pc, #256]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005d1c:	4684      	mov	ip, r0
 8005d1e:	4463      	add	r3, ip
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	e024      	b.n	8005d70 <USB_EPStartXfer+0x69c>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d120      	bne.n	8005d70 <USB_EPStartXfer+0x69c>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4a39      	ldr	r2, [pc, #228]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005d36:	4694      	mov	ip, r2
 8005d38:	4463      	add	r3, ip
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4936      	ldr	r1, [pc, #216]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005d44:	468c      	mov	ip, r1
 8005d46:	4463      	add	r3, ip
 8005d48:	0412      	lsls	r2, r2, #16
 8005d4a:	0c12      	lsrs	r2, r2, #16
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4a31      	ldr	r2, [pc, #196]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005d56:	4694      	mov	ip, r2
 8005d58:	4463      	add	r3, ip
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5e:	041a      	lsls	r2, r3, #16
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	482d      	ldr	r0, [pc, #180]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005d68:	4684      	mov	ip, r0
 8005d6a:	4463      	add	r3, ip
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8005d70:	201a      	movs	r0, #26
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	8912      	ldrh	r2, [r2, #8]
 8005d78:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6959      	ldr	r1, [r3, #20]
 8005d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d80:	b29c      	uxth	r4, r3
 8005d82:	183b      	adds	r3, r7, r0
 8005d84:	881a      	ldrh	r2, [r3, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	0023      	movs	r3, r4
 8005d8a:	f000 fdc9 	bl	8006920 <USB_WritePMA>
 8005d8e:	e1b4      	b.n	80060fa <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	18d3      	adds	r3, r2, r3
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a20      	ldr	r2, [pc, #128]	; (8005e24 <USB_EPStartXfer+0x750>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	18d3      	adds	r3, r2, r3
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	491c      	ldr	r1, [pc, #112]	; (8005e28 <USB_EPStartXfer+0x754>)
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005dc2:	4694      	mov	ip, r2
 8005dc4:	4463      	add	r3, ip
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4913      	ldr	r1, [pc, #76]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005dd0:	468c      	mov	ip, r1
 8005dd2:	4463      	add	r3, ip
 8005dd4:	0412      	lsls	r2, r2, #16
 8005dd6:	0c12      	lsrs	r2, r2, #16
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005de2:	4694      	mov	ip, r2
 8005de4:	4463      	add	r3, ip
 8005de6:	6819      	ldr	r1, [r3, #0]
 8005de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dea:	041a      	lsls	r2, r3, #16
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	480a      	ldr	r0, [pc, #40]	; (8005e1c <USB_EPStartXfer+0x748>)
 8005df4:	4684      	mov	ip, r0
 8005df6:	4463      	add	r3, ip
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dfc:	201a      	movs	r0, #26
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	88d2      	ldrh	r2, [r2, #6]
 8005e04:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6959      	ldr	r1, [r3, #20]
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0c:	b29c      	uxth	r4, r3
 8005e0e:	183b      	adds	r3, r7, r0
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	0023      	movs	r3, r4
 8005e16:	f000 fd83 	bl	8006920 <USB_WritePMA>
 8005e1a:	e16e      	b.n	80060fa <USB_EPStartXfer+0xa26>
 8005e1c:	40009800 	.word	0x40009800
 8005e20:	83ffffff 	.word	0x83ffffff
 8005e24:	07ff8e8f 	.word	0x07ff8e8f
 8005e28:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	18d3      	adds	r3, r2, r3
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2240      	movs	r2, #64	; 0x40
 8005e46:	4013      	ands	r3, r2
 8005e48:	d100      	bne.n	8005e4c <USB_EPStartXfer+0x778>
 8005e4a:	e0ab      	b.n	8005fa4 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d172      	bne.n	8005f3a <USB_EPStartXfer+0x866>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4adc      	ldr	r2, [pc, #880]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005e5c:	4694      	mov	ip, r2
 8005e5e:	4463      	add	r3, ip
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	49d8      	ldr	r1, [pc, #864]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005e6a:	468c      	mov	ip, r1
 8005e6c:	4463      	add	r3, ip
 8005e6e:	0412      	lsls	r2, r2, #16
 8005e70:	0c12      	lsrs	r2, r2, #16
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e76:	2b3e      	cmp	r3, #62	; 0x3e
 8005e78:	d91e      	bls.n	8005eb8 <USB_EPStartXfer+0x7e4>
 8005e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	221f      	movs	r2, #31
 8005e84:	4013      	ands	r3, r2
 8005e86:	d102      	bne.n	8005e8e <USB_EPStartXfer+0x7ba>
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4acd      	ldr	r2, [pc, #820]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005e96:	4694      	mov	ip, r2
 8005e98:	4463      	add	r3, ip
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	069b      	lsls	r3, r3, #26
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	49c8      	ldr	r1, [pc, #800]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005eaa:	468c      	mov	ip, r1
 8005eac:	4463      	add	r3, ip
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	0609      	lsls	r1, r1, #24
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	e065      	b.n	8005f84 <USB_EPStartXfer+0x8b0>
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d121      	bne.n	8005f02 <USB_EPStartXfer+0x82e>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4ac1      	ldr	r2, [pc, #772]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005ec6:	4694      	mov	ip, r2
 8005ec8:	4463      	add	r3, ip
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	49be      	ldr	r1, [pc, #760]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005ed4:	468c      	mov	ip, r1
 8005ed6:	4463      	add	r3, ip
 8005ed8:	49bd      	ldr	r1, [pc, #756]	; (80061d0 <USB_EPStartXfer+0xafc>)
 8005eda:	400a      	ands	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4ab9      	ldr	r2, [pc, #740]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005ee6:	4694      	mov	ip, r2
 8005ee8:	4463      	add	r3, ip
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	49b6      	ldr	r1, [pc, #728]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005ef4:	468c      	mov	ip, r1
 8005ef6:	4463      	add	r3, ip
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	0609      	lsls	r1, r1, #24
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	e040      	b.n	8005f84 <USB_EPStartXfer+0x8b0>
 8005f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	643b      	str	r3, [r7, #64]	; 0x40
 8005f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d002      	beq.n	8005f16 <USB_EPStartXfer+0x842>
 8005f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f12:	3301      	adds	r3, #1
 8005f14:	643b      	str	r3, [r7, #64]	; 0x40
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4aab      	ldr	r2, [pc, #684]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005f1e:	4694      	mov	ip, r2
 8005f20:	4463      	add	r3, ip
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f26:	069a      	lsls	r2, r3, #26
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	48a7      	ldr	r0, [pc, #668]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005f30:	4684      	mov	ip, r0
 8005f32:	4463      	add	r3, ip
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	e024      	b.n	8005f84 <USB_EPStartXfer+0x8b0>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	785b      	ldrb	r3, [r3, #1]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d120      	bne.n	8005f84 <USB_EPStartXfer+0x8b0>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4aa0      	ldr	r2, [pc, #640]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005f4a:	4694      	mov	ip, r2
 8005f4c:	4463      	add	r3, ip
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	499d      	ldr	r1, [pc, #628]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005f58:	468c      	mov	ip, r1
 8005f5a:	4463      	add	r3, ip
 8005f5c:	0412      	lsls	r2, r2, #16
 8005f5e:	0c12      	lsrs	r2, r2, #16
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4a98      	ldr	r2, [pc, #608]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005f6a:	4694      	mov	ip, r2
 8005f6c:	4463      	add	r3, ip
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	041a      	lsls	r2, r3, #16
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4894      	ldr	r0, [pc, #592]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005f7c:	4684      	mov	ip, r0
 8005f7e:	4463      	add	r3, ip
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8005f84:	201a      	movs	r0, #26
 8005f86:	183b      	adds	r3, r7, r0
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	8912      	ldrh	r2, [r2, #8]
 8005f8c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6959      	ldr	r1, [r3, #20]
 8005f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f94:	b29c      	uxth	r4, r3
 8005f96:	183b      	adds	r3, r7, r0
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	0023      	movs	r3, r4
 8005f9e:	f000 fcbf 	bl	8006920 <USB_WritePMA>
 8005fa2:	e0aa      	b.n	80060fa <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d172      	bne.n	8006092 <USB_EPStartXfer+0x9be>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4a86      	ldr	r2, [pc, #536]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005fb4:	4694      	mov	ip, r2
 8005fb6:	4463      	add	r3, ip
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4982      	ldr	r1, [pc, #520]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005fc2:	468c      	mov	ip, r1
 8005fc4:	4463      	add	r3, ip
 8005fc6:	0412      	lsls	r2, r2, #16
 8005fc8:	0c12      	lsrs	r2, r2, #16
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fce:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd0:	d91e      	bls.n	8006010 <USB_EPStartXfer+0x93c>
 8005fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fda:	221f      	movs	r2, #31
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d102      	bne.n	8005fe6 <USB_EPStartXfer+0x912>
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4a77      	ldr	r2, [pc, #476]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8005fee:	4694      	mov	ip, r2
 8005ff0:	4463      	add	r3, ip
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	069b      	lsls	r3, r3, #26
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4972      	ldr	r1, [pc, #456]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8006002:	468c      	mov	ip, r1
 8006004:	4463      	add	r3, ip
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	0609      	lsls	r1, r1, #24
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e065      	b.n	80060dc <USB_EPStartXfer+0xa08>
 8006010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006012:	2b00      	cmp	r3, #0
 8006014:	d121      	bne.n	800605a <USB_EPStartXfer+0x986>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4a6b      	ldr	r2, [pc, #428]	; (80061cc <USB_EPStartXfer+0xaf8>)
 800601e:	4694      	mov	ip, r2
 8006020:	4463      	add	r3, ip
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4968      	ldr	r1, [pc, #416]	; (80061cc <USB_EPStartXfer+0xaf8>)
 800602c:	468c      	mov	ip, r1
 800602e:	4463      	add	r3, ip
 8006030:	4967      	ldr	r1, [pc, #412]	; (80061d0 <USB_EPStartXfer+0xafc>)
 8006032:	400a      	ands	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4a63      	ldr	r2, [pc, #396]	; (80061cc <USB_EPStartXfer+0xaf8>)
 800603e:	4694      	mov	ip, r2
 8006040:	4463      	add	r3, ip
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4960      	ldr	r1, [pc, #384]	; (80061cc <USB_EPStartXfer+0xaf8>)
 800604c:	468c      	mov	ip, r1
 800604e:	4463      	add	r3, ip
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	0609      	lsls	r1, r1, #24
 8006054:	430a      	orrs	r2, r1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e040      	b.n	80060dc <USB_EPStartXfer+0xa08>
 800605a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006062:	2201      	movs	r2, #1
 8006064:	4013      	ands	r3, r2
 8006066:	d002      	beq.n	800606e <USB_EPStartXfer+0x99a>
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	3301      	adds	r3, #1
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4a55      	ldr	r2, [pc, #340]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8006076:	4694      	mov	ip, r2
 8006078:	4463      	add	r3, ip
 800607a:	6819      	ldr	r1, [r3, #0]
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607e:	069a      	lsls	r2, r3, #26
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4851      	ldr	r0, [pc, #324]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8006088:	4684      	mov	ip, r0
 800608a:	4463      	add	r3, ip
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e024      	b.n	80060dc <USB_EPStartXfer+0xa08>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d120      	bne.n	80060dc <USB_EPStartXfer+0xa08>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <USB_EPStartXfer+0xaf8>)
 80060a2:	4694      	mov	ip, r2
 80060a4:	4463      	add	r3, ip
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4947      	ldr	r1, [pc, #284]	; (80061cc <USB_EPStartXfer+0xaf8>)
 80060b0:	468c      	mov	ip, r1
 80060b2:	4463      	add	r3, ip
 80060b4:	0412      	lsls	r2, r2, #16
 80060b6:	0c12      	lsrs	r2, r2, #16
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4a42      	ldr	r2, [pc, #264]	; (80061cc <USB_EPStartXfer+0xaf8>)
 80060c2:	4694      	mov	ip, r2
 80060c4:	4463      	add	r3, ip
 80060c6:	6819      	ldr	r1, [r3, #0]
 80060c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ca:	041a      	lsls	r2, r3, #16
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	483e      	ldr	r0, [pc, #248]	; (80061cc <USB_EPStartXfer+0xaf8>)
 80060d4:	4684      	mov	ip, r0
 80060d6:	4463      	add	r3, ip
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060dc:	201a      	movs	r0, #26
 80060de:	183b      	adds	r3, r7, r0
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	88d2      	ldrh	r2, [r2, #6]
 80060e4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6959      	ldr	r1, [r3, #20]
 80060ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ec:	b29c      	uxth	r4, r3
 80060ee:	183b      	adds	r3, r7, r0
 80060f0:	881a      	ldrh	r2, [r3, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	0023      	movs	r3, r4
 80060f6:	f000 fc13 	bl	8006920 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	18d3      	adds	r3, r2, r3
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a33      	ldr	r2, [pc, #204]	; (80061d4 <USB_EPStartXfer+0xb00>)
 8006108:	4013      	ands	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2210      	movs	r2, #16
 8006110:	4053      	eors	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	4053      	eors	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	18d3      	adds	r3, r2, r3
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	492b      	ldr	r1, [pc, #172]	; (80061d8 <USB_EPStartXfer+0xb04>)
 800612a:	430a      	orrs	r2, r1
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	f000 fb97 	bl	8006860 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	7a9b      	ldrb	r3, [r3, #10]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <USB_EPStartXfer+0xa68>
 800613a:	e090      	b.n	800625e <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	d909      	bls.n	800615c <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	619a      	str	r2, [r3, #24]
 800615a:	e005      	b.n	8006168 <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2200      	movs	r2, #0
 8006166:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4a17      	ldr	r2, [pc, #92]	; (80061cc <USB_EPStartXfer+0xaf8>)
 8006170:	4694      	mov	ip, r2
 8006172:	4463      	add	r3, ip
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4913      	ldr	r1, [pc, #76]	; (80061cc <USB_EPStartXfer+0xaf8>)
 800617e:	468c      	mov	ip, r1
 8006180:	4463      	add	r3, ip
 8006182:	0412      	lsls	r2, r2, #16
 8006184:	0c12      	lsrs	r2, r2, #16
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	2b3e      	cmp	r3, #62	; 0x3e
 800618c:	d926      	bls.n	80061dc <USB_EPStartXfer+0xb08>
 800618e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
 8006194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006196:	221f      	movs	r2, #31
 8006198:	4013      	ands	r3, r2
 800619a:	d102      	bne.n	80061a2 <USB_EPStartXfer+0xace>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	3b01      	subs	r3, #1
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4a08      	ldr	r2, [pc, #32]	; (80061cc <USB_EPStartXfer+0xaf8>)
 80061aa:	4694      	mov	ip, r2
 80061ac:	4463      	add	r3, ip
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	069b      	lsls	r3, r3, #26
 80061b4:	431a      	orrs	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <USB_EPStartXfer+0xaf8>)
 80061be:	468c      	mov	ip, r1
 80061c0:	4463      	add	r3, ip
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	0609      	lsls	r1, r1, #24
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	e32d      	b.n	8006828 <USB_EPStartXfer+0x1154>
 80061cc:	40009800 	.word	0x40009800
 80061d0:	83ffffff 	.word	0x83ffffff
 80061d4:	07ff8fbf 	.word	0x07ff8fbf
 80061d8:	00008080 	.word	0x00008080
 80061dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d121      	bne.n	8006226 <USB_EPStartXfer+0xb52>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4ae0      	ldr	r2, [pc, #896]	; (800656c <USB_EPStartXfer+0xe98>)
 80061ea:	4694      	mov	ip, r2
 80061ec:	4463      	add	r3, ip
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	49dd      	ldr	r1, [pc, #884]	; (800656c <USB_EPStartXfer+0xe98>)
 80061f8:	468c      	mov	ip, r1
 80061fa:	4463      	add	r3, ip
 80061fc:	49dc      	ldr	r1, [pc, #880]	; (8006570 <USB_EPStartXfer+0xe9c>)
 80061fe:	400a      	ands	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4ad8      	ldr	r2, [pc, #864]	; (800656c <USB_EPStartXfer+0xe98>)
 800620a:	4694      	mov	ip, r2
 800620c:	4463      	add	r3, ip
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	49d5      	ldr	r1, [pc, #852]	; (800656c <USB_EPStartXfer+0xe98>)
 8006218:	468c      	mov	ip, r1
 800621a:	4463      	add	r3, ip
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	0609      	lsls	r1, r1, #24
 8006220:	430a      	orrs	r2, r1
 8006222:	605a      	str	r2, [r3, #4]
 8006224:	e300      	b.n	8006828 <USB_EPStartXfer+0x1154>
 8006226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	63bb      	str	r3, [r7, #56]	; 0x38
 800622c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622e:	2201      	movs	r2, #1
 8006230:	4013      	ands	r3, r2
 8006232:	d002      	beq.n	800623a <USB_EPStartXfer+0xb66>
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	3301      	adds	r3, #1
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4aca      	ldr	r2, [pc, #808]	; (800656c <USB_EPStartXfer+0xe98>)
 8006242:	4694      	mov	ip, r2
 8006244:	4463      	add	r3, ip
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	069a      	lsls	r2, r3, #26
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	48c6      	ldr	r0, [pc, #792]	; (800656c <USB_EPStartXfer+0xe98>)
 8006254:	4684      	mov	ip, r0
 8006256:	4463      	add	r3, ip
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
 800625c:	e2e4      	b.n	8006828 <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	78db      	ldrb	r3, [r3, #3]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d000      	beq.n	8006268 <USB_EPStartXfer+0xb94>
 8006266:	e189      	b.n	800657c <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d000      	beq.n	8006272 <USB_EPStartXfer+0xb9e>
 8006270:	e078      	b.n	8006364 <USB_EPStartXfer+0xc90>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4abc      	ldr	r2, [pc, #752]	; (800656c <USB_EPStartXfer+0xe98>)
 800627a:	4694      	mov	ip, r2
 800627c:	4463      	add	r3, ip
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	49b9      	ldr	r1, [pc, #740]	; (800656c <USB_EPStartXfer+0xe98>)
 8006288:	468c      	mov	ip, r1
 800628a:	4463      	add	r3, ip
 800628c:	0412      	lsls	r2, r2, #16
 800628e:	0c12      	lsrs	r2, r2, #16
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b3e      	cmp	r3, #62	; 0x3e
 8006298:	d920      	bls.n	80062dc <USB_EPStartXfer+0xc08>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	221f      	movs	r2, #31
 80062a8:	4013      	ands	r3, r2
 80062aa:	d102      	bne.n	80062b2 <USB_EPStartXfer+0xbde>
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	3b01      	subs	r3, #1
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4aac      	ldr	r2, [pc, #688]	; (800656c <USB_EPStartXfer+0xe98>)
 80062ba:	4694      	mov	ip, r2
 80062bc:	4463      	add	r3, ip
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c2:	069b      	lsls	r3, r3, #26
 80062c4:	431a      	orrs	r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	49a7      	ldr	r1, [pc, #668]	; (800656c <USB_EPStartXfer+0xe98>)
 80062ce:	468c      	mov	ip, r1
 80062d0:	4463      	add	r3, ip
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	0609      	lsls	r1, r1, #24
 80062d6:	430a      	orrs	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e069      	b.n	80063b0 <USB_EPStartXfer+0xcdc>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d121      	bne.n	8006328 <USB_EPStartXfer+0xc54>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4aa0      	ldr	r2, [pc, #640]	; (800656c <USB_EPStartXfer+0xe98>)
 80062ec:	4694      	mov	ip, r2
 80062ee:	4463      	add	r3, ip
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	499c      	ldr	r1, [pc, #624]	; (800656c <USB_EPStartXfer+0xe98>)
 80062fa:	468c      	mov	ip, r1
 80062fc:	4463      	add	r3, ip
 80062fe:	499c      	ldr	r1, [pc, #624]	; (8006570 <USB_EPStartXfer+0xe9c>)
 8006300:	400a      	ands	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4a98      	ldr	r2, [pc, #608]	; (800656c <USB_EPStartXfer+0xe98>)
 800630c:	4694      	mov	ip, r2
 800630e:	4463      	add	r3, ip
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4994      	ldr	r1, [pc, #592]	; (800656c <USB_EPStartXfer+0xe98>)
 800631a:	468c      	mov	ip, r1
 800631c:	4463      	add	r3, ip
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	0609      	lsls	r1, r1, #24
 8006322:	430a      	orrs	r2, r1
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e043      	b.n	80063b0 <USB_EPStartXfer+0xcdc>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2201      	movs	r2, #1
 8006336:	4013      	ands	r3, r2
 8006338:	d002      	beq.n	8006340 <USB_EPStartXfer+0xc6c>
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	3301      	adds	r3, #1
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4a89      	ldr	r2, [pc, #548]	; (800656c <USB_EPStartXfer+0xe98>)
 8006348:	4694      	mov	ip, r2
 800634a:	4463      	add	r3, ip
 800634c:	6819      	ldr	r1, [r3, #0]
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	069a      	lsls	r2, r3, #26
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4884      	ldr	r0, [pc, #528]	; (800656c <USB_EPStartXfer+0xe98>)
 800635a:	4684      	mov	ip, r0
 800635c:	4463      	add	r3, ip
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e025      	b.n	80063b0 <USB_EPStartXfer+0xcdc>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d121      	bne.n	80063b0 <USB_EPStartXfer+0xcdc>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4a7e      	ldr	r2, [pc, #504]	; (800656c <USB_EPStartXfer+0xe98>)
 8006374:	4694      	mov	ip, r2
 8006376:	4463      	add	r3, ip
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	497a      	ldr	r1, [pc, #488]	; (800656c <USB_EPStartXfer+0xe98>)
 8006382:	468c      	mov	ip, r1
 8006384:	4463      	add	r3, ip
 8006386:	0412      	lsls	r2, r2, #16
 8006388:	0c12      	lsrs	r2, r2, #16
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4a76      	ldr	r2, [pc, #472]	; (800656c <USB_EPStartXfer+0xe98>)
 8006394:	4694      	mov	ip, r2
 8006396:	4463      	add	r3, ip
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	041a      	lsls	r2, r3, #16
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4871      	ldr	r0, [pc, #452]	; (800656c <USB_EPStartXfer+0xe98>)
 80063a8:	4684      	mov	ip, r0
 80063aa:	4463      	add	r3, ip
 80063ac:	430a      	orrs	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d000      	beq.n	80063ba <USB_EPStartXfer+0xce6>
 80063b8:	e078      	b.n	80064ac <USB_EPStartXfer+0xdd8>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4a6a      	ldr	r2, [pc, #424]	; (800656c <USB_EPStartXfer+0xe98>)
 80063c2:	4694      	mov	ip, r2
 80063c4:	4463      	add	r3, ip
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4967      	ldr	r1, [pc, #412]	; (800656c <USB_EPStartXfer+0xe98>)
 80063d0:	468c      	mov	ip, r1
 80063d2:	4463      	add	r3, ip
 80063d4:	0412      	lsls	r2, r2, #16
 80063d6:	0c12      	lsrs	r2, r2, #16
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b3e      	cmp	r3, #62	; 0x3e
 80063e0:	d920      	bls.n	8006424 <USB_EPStartXfer+0xd50>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	221f      	movs	r2, #31
 80063f0:	4013      	ands	r3, r2
 80063f2:	d102      	bne.n	80063fa <USB_EPStartXfer+0xd26>
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	3b01      	subs	r3, #1
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4a5a      	ldr	r2, [pc, #360]	; (800656c <USB_EPStartXfer+0xe98>)
 8006402:	4694      	mov	ip, r2
 8006404:	4463      	add	r3, ip
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	069b      	lsls	r3, r3, #26
 800640c:	431a      	orrs	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4955      	ldr	r1, [pc, #340]	; (800656c <USB_EPStartXfer+0xe98>)
 8006416:	468c      	mov	ip, r1
 8006418:	4463      	add	r3, ip
 800641a:	2180      	movs	r1, #128	; 0x80
 800641c:	0609      	lsls	r1, r1, #24
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
 8006422:	e069      	b.n	80064f8 <USB_EPStartXfer+0xe24>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d121      	bne.n	8006470 <USB_EPStartXfer+0xd9c>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4a4e      	ldr	r2, [pc, #312]	; (800656c <USB_EPStartXfer+0xe98>)
 8006434:	4694      	mov	ip, r2
 8006436:	4463      	add	r3, ip
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	494a      	ldr	r1, [pc, #296]	; (800656c <USB_EPStartXfer+0xe98>)
 8006442:	468c      	mov	ip, r1
 8006444:	4463      	add	r3, ip
 8006446:	494a      	ldr	r1, [pc, #296]	; (8006570 <USB_EPStartXfer+0xe9c>)
 8006448:	400a      	ands	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	4a46      	ldr	r2, [pc, #280]	; (800656c <USB_EPStartXfer+0xe98>)
 8006454:	4694      	mov	ip, r2
 8006456:	4463      	add	r3, ip
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4942      	ldr	r1, [pc, #264]	; (800656c <USB_EPStartXfer+0xe98>)
 8006462:	468c      	mov	ip, r1
 8006464:	4463      	add	r3, ip
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	0609      	lsls	r1, r1, #24
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	e043      	b.n	80064f8 <USB_EPStartXfer+0xe24>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	085b      	lsrs	r3, r3, #1
 8006476:	633b      	str	r3, [r7, #48]	; 0x30
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2201      	movs	r2, #1
 800647e:	4013      	ands	r3, r2
 8006480:	d002      	beq.n	8006488 <USB_EPStartXfer+0xdb4>
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	3301      	adds	r3, #1
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4a37      	ldr	r2, [pc, #220]	; (800656c <USB_EPStartXfer+0xe98>)
 8006490:	4694      	mov	ip, r2
 8006492:	4463      	add	r3, ip
 8006494:	6859      	ldr	r1, [r3, #4]
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	069a      	lsls	r2, r3, #26
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4832      	ldr	r0, [pc, #200]	; (800656c <USB_EPStartXfer+0xe98>)
 80064a2:	4684      	mov	ip, r0
 80064a4:	4463      	add	r3, ip
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	e025      	b.n	80064f8 <USB_EPStartXfer+0xe24>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d121      	bne.n	80064f8 <USB_EPStartXfer+0xe24>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4a2c      	ldr	r2, [pc, #176]	; (800656c <USB_EPStartXfer+0xe98>)
 80064bc:	4694      	mov	ip, r2
 80064be:	4463      	add	r3, ip
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4928      	ldr	r1, [pc, #160]	; (800656c <USB_EPStartXfer+0xe98>)
 80064ca:	468c      	mov	ip, r1
 80064cc:	4463      	add	r3, ip
 80064ce:	0412      	lsls	r2, r2, #16
 80064d0:	0c12      	lsrs	r2, r2, #16
 80064d2:	605a      	str	r2, [r3, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4a24      	ldr	r2, [pc, #144]	; (800656c <USB_EPStartXfer+0xe98>)
 80064dc:	4694      	mov	ip, r2
 80064de:	4463      	add	r3, ip
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	041a      	lsls	r2, r3, #16
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	481f      	ldr	r0, [pc, #124]	; (800656c <USB_EPStartXfer+0xe98>)
 80064f0:	4684      	mov	ip, r0
 80064f2:	4463      	add	r3, ip
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d100      	bne.n	8006502 <USB_EPStartXfer+0xe2e>
 8006500:	e192      	b.n	8006828 <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	18d3      	adds	r3, r2, r3
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	2126      	movs	r1, #38	; 0x26
 8006510:	187b      	adds	r3, r7, r1
 8006512:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006514:	187b      	adds	r3, r7, r1
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	2380      	movs	r3, #128	; 0x80
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	4013      	ands	r3, r2
 800651e:	d004      	beq.n	800652a <USB_EPStartXfer+0xe56>
 8006520:	187b      	adds	r3, r7, r1
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	2240      	movs	r2, #64	; 0x40
 8006526:	4013      	ands	r3, r2
 8006528:	d10d      	bne.n	8006546 <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800652a:	2126      	movs	r1, #38	; 0x26
 800652c:	187b      	adds	r3, r7, r1
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	01db      	lsls	r3, r3, #7
 8006534:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006536:	d000      	beq.n	800653a <USB_EPStartXfer+0xe66>
 8006538:	e176      	b.n	8006828 <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800653a:	187b      	adds	r3, r7, r1
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	4013      	ands	r3, r2
 8006542:	d000      	beq.n	8006546 <USB_EPStartXfer+0xe72>
 8006544:	e170      	b.n	8006828 <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	18d3      	adds	r3, r2, r3
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a08      	ldr	r2, [pc, #32]	; (8006574 <USB_EPStartXfer+0xea0>)
 8006554:	4013      	ands	r3, r2
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	18d3      	adds	r3, r2, r3
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <USB_EPStartXfer+0xea4>)
 8006566:	430a      	orrs	r2, r1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e15d      	b.n	8006828 <USB_EPStartXfer+0x1154>
 800656c:	40009800 	.word	0x40009800
 8006570:	83ffffff 	.word	0x83ffffff
 8006574:	07ff8f8f 	.word	0x07ff8f8f
 8006578:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	78db      	ldrb	r3, [r3, #3]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d000      	beq.n	8006586 <USB_EPStartXfer+0xeb2>
 8006584:	e14e      	b.n	8006824 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	429a      	cmp	r2, r3
 8006590:	d909      	bls.n	80065a6 <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	619a      	str	r2, [r3, #24]
 80065a4:	e005      	b.n	80065b2 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d172      	bne.n	80066a0 <USB_EPStartXfer+0xfcc>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4aaa      	ldr	r2, [pc, #680]	; (800686c <USB_EPStartXfer+0x1198>)
 80065c2:	4694      	mov	ip, r2
 80065c4:	4463      	add	r3, ip
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	49a7      	ldr	r1, [pc, #668]	; (800686c <USB_EPStartXfer+0x1198>)
 80065d0:	468c      	mov	ip, r1
 80065d2:	4463      	add	r3, ip
 80065d4:	0412      	lsls	r2, r2, #16
 80065d6:	0c12      	lsrs	r2, r2, #16
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065dc:	2b3e      	cmp	r3, #62	; 0x3e
 80065de:	d91e      	bls.n	800661e <USB_EPStartXfer+0xf4a>
 80065e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e8:	221f      	movs	r2, #31
 80065ea:	4013      	ands	r3, r2
 80065ec:	d102      	bne.n	80065f4 <USB_EPStartXfer+0xf20>
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	3b01      	subs	r3, #1
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4a9c      	ldr	r2, [pc, #624]	; (800686c <USB_EPStartXfer+0x1198>)
 80065fc:	4694      	mov	ip, r2
 80065fe:	4463      	add	r3, ip
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	069b      	lsls	r3, r3, #26
 8006606:	431a      	orrs	r2, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4997      	ldr	r1, [pc, #604]	; (800686c <USB_EPStartXfer+0x1198>)
 8006610:	468c      	mov	ip, r1
 8006612:	4463      	add	r3, ip
 8006614:	2180      	movs	r1, #128	; 0x80
 8006616:	0609      	lsls	r1, r1, #24
 8006618:	430a      	orrs	r2, r1
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e065      	b.n	80066ea <USB_EPStartXfer+0x1016>
 800661e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006620:	2b00      	cmp	r3, #0
 8006622:	d121      	bne.n	8006668 <USB_EPStartXfer+0xf94>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4a90      	ldr	r2, [pc, #576]	; (800686c <USB_EPStartXfer+0x1198>)
 800662c:	4694      	mov	ip, r2
 800662e:	4463      	add	r3, ip
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	498c      	ldr	r1, [pc, #560]	; (800686c <USB_EPStartXfer+0x1198>)
 800663a:	468c      	mov	ip, r1
 800663c:	4463      	add	r3, ip
 800663e:	498c      	ldr	r1, [pc, #560]	; (8006870 <USB_EPStartXfer+0x119c>)
 8006640:	400a      	ands	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4a88      	ldr	r2, [pc, #544]	; (800686c <USB_EPStartXfer+0x1198>)
 800664c:	4694      	mov	ip, r2
 800664e:	4463      	add	r3, ip
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4984      	ldr	r1, [pc, #528]	; (800686c <USB_EPStartXfer+0x1198>)
 800665a:	468c      	mov	ip, r1
 800665c:	4463      	add	r3, ip
 800665e:	2180      	movs	r1, #128	; 0x80
 8006660:	0609      	lsls	r1, r1, #24
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e040      	b.n	80066ea <USB_EPStartXfer+0x1016>
 8006668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006670:	2201      	movs	r2, #1
 8006672:	4013      	ands	r3, r2
 8006674:	d002      	beq.n	800667c <USB_EPStartXfer+0xfa8>
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	3301      	adds	r3, #1
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4a7a      	ldr	r2, [pc, #488]	; (800686c <USB_EPStartXfer+0x1198>)
 8006684:	4694      	mov	ip, r2
 8006686:	4463      	add	r3, ip
 8006688:	6819      	ldr	r1, [r3, #0]
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	069a      	lsls	r2, r3, #26
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4875      	ldr	r0, [pc, #468]	; (800686c <USB_EPStartXfer+0x1198>)
 8006696:	4684      	mov	ip, r0
 8006698:	4463      	add	r3, ip
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e024      	b.n	80066ea <USB_EPStartXfer+0x1016>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d120      	bne.n	80066ea <USB_EPStartXfer+0x1016>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	4a6f      	ldr	r2, [pc, #444]	; (800686c <USB_EPStartXfer+0x1198>)
 80066b0:	4694      	mov	ip, r2
 80066b2:	4463      	add	r3, ip
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	496b      	ldr	r1, [pc, #428]	; (800686c <USB_EPStartXfer+0x1198>)
 80066be:	468c      	mov	ip, r1
 80066c0:	4463      	add	r3, ip
 80066c2:	0412      	lsls	r2, r2, #16
 80066c4:	0c12      	lsrs	r2, r2, #16
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4a67      	ldr	r2, [pc, #412]	; (800686c <USB_EPStartXfer+0x1198>)
 80066d0:	4694      	mov	ip, r2
 80066d2:	4463      	add	r3, ip
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d8:	041a      	lsls	r2, r3, #16
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4862      	ldr	r0, [pc, #392]	; (800686c <USB_EPStartXfer+0x1198>)
 80066e2:	4684      	mov	ip, r0
 80066e4:	4463      	add	r3, ip
 80066e6:	430a      	orrs	r2, r1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d172      	bne.n	80067d8 <USB_EPStartXfer+0x1104>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4a5c      	ldr	r2, [pc, #368]	; (800686c <USB_EPStartXfer+0x1198>)
 80066fa:	4694      	mov	ip, r2
 80066fc:	4463      	add	r3, ip
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4959      	ldr	r1, [pc, #356]	; (800686c <USB_EPStartXfer+0x1198>)
 8006708:	468c      	mov	ip, r1
 800670a:	4463      	add	r3, ip
 800670c:	0412      	lsls	r2, r2, #16
 800670e:	0c12      	lsrs	r2, r2, #16
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006714:	2b3e      	cmp	r3, #62	; 0x3e
 8006716:	d91e      	bls.n	8006756 <USB_EPStartXfer+0x1082>
 8006718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
 800671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006720:	221f      	movs	r2, #31
 8006722:	4013      	ands	r3, r2
 8006724:	d102      	bne.n	800672c <USB_EPStartXfer+0x1058>
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	3b01      	subs	r3, #1
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4a4e      	ldr	r2, [pc, #312]	; (800686c <USB_EPStartXfer+0x1198>)
 8006734:	4694      	mov	ip, r2
 8006736:	4463      	add	r3, ip
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	069b      	lsls	r3, r3, #26
 800673e:	431a      	orrs	r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4949      	ldr	r1, [pc, #292]	; (800686c <USB_EPStartXfer+0x1198>)
 8006748:	468c      	mov	ip, r1
 800674a:	4463      	add	r3, ip
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	0609      	lsls	r1, r1, #24
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
 8006754:	e068      	b.n	8006828 <USB_EPStartXfer+0x1154>
 8006756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006758:	2b00      	cmp	r3, #0
 800675a:	d121      	bne.n	80067a0 <USB_EPStartXfer+0x10cc>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4a42      	ldr	r2, [pc, #264]	; (800686c <USB_EPStartXfer+0x1198>)
 8006764:	4694      	mov	ip, r2
 8006766:	4463      	add	r3, ip
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	493e      	ldr	r1, [pc, #248]	; (800686c <USB_EPStartXfer+0x1198>)
 8006772:	468c      	mov	ip, r1
 8006774:	4463      	add	r3, ip
 8006776:	493e      	ldr	r1, [pc, #248]	; (8006870 <USB_EPStartXfer+0x119c>)
 8006778:	400a      	ands	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4a3a      	ldr	r2, [pc, #232]	; (800686c <USB_EPStartXfer+0x1198>)
 8006784:	4694      	mov	ip, r2
 8006786:	4463      	add	r3, ip
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4936      	ldr	r1, [pc, #216]	; (800686c <USB_EPStartXfer+0x1198>)
 8006792:	468c      	mov	ip, r1
 8006794:	4463      	add	r3, ip
 8006796:	2180      	movs	r1, #128	; 0x80
 8006798:	0609      	lsls	r1, r1, #24
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	e043      	b.n	8006828 <USB_EPStartXfer+0x1154>
 80067a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a8:	2201      	movs	r2, #1
 80067aa:	4013      	ands	r3, r2
 80067ac:	d002      	beq.n	80067b4 <USB_EPStartXfer+0x10e0>
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	3301      	adds	r3, #1
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4a2c      	ldr	r2, [pc, #176]	; (800686c <USB_EPStartXfer+0x1198>)
 80067bc:	4694      	mov	ip, r2
 80067be:	4463      	add	r3, ip
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	069a      	lsls	r2, r3, #26
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4827      	ldr	r0, [pc, #156]	; (800686c <USB_EPStartXfer+0x1198>)
 80067ce:	4684      	mov	ip, r0
 80067d0:	4463      	add	r3, ip
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	e027      	b.n	8006828 <USB_EPStartXfer+0x1154>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d123      	bne.n	8006828 <USB_EPStartXfer+0x1154>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4a21      	ldr	r2, [pc, #132]	; (800686c <USB_EPStartXfer+0x1198>)
 80067e8:	4694      	mov	ip, r2
 80067ea:	4463      	add	r3, ip
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	491d      	ldr	r1, [pc, #116]	; (800686c <USB_EPStartXfer+0x1198>)
 80067f6:	468c      	mov	ip, r1
 80067f8:	4463      	add	r3, ip
 80067fa:	0412      	lsls	r2, r2, #16
 80067fc:	0c12      	lsrs	r2, r2, #16
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4a19      	ldr	r2, [pc, #100]	; (800686c <USB_EPStartXfer+0x1198>)
 8006808:	4694      	mov	ip, r2
 800680a:	4463      	add	r3, ip
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006810:	041a      	lsls	r2, r3, #16
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4814      	ldr	r0, [pc, #80]	; (800686c <USB_EPStartXfer+0x1198>)
 800681a:	4684      	mov	ip, r0
 800681c:	4463      	add	r3, ip
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	e001      	b.n	8006828 <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e01c      	b.n	8006862 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	18d3      	adds	r3, r2, r3
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a0f      	ldr	r2, [pc, #60]	; (8006874 <USB_EPStartXfer+0x11a0>)
 8006836:	4013      	ands	r3, r2
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2280      	movs	r2, #128	; 0x80
 800683e:	0152      	lsls	r2, r2, #5
 8006840:	4053      	eors	r3, r2
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	0192      	lsls	r2, r2, #6
 800684a:	4053      	eors	r3, r2
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	18d3      	adds	r3, r2, r3
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	4907      	ldr	r1, [pc, #28]	; (8006878 <USB_EPStartXfer+0x11a4>)
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	0018      	movs	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	b017      	add	sp, #92	; 0x5c
 8006868:	bd90      	pop	{r4, r7, pc}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	40009800 	.word	0x40009800
 8006870:	83ffffff 	.word	0x83ffffff
 8006874:	07ffbf8f 	.word	0x07ffbf8f
 8006878:	00008080 	.word	0x00008080

0800687c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	18d3      	adds	r3, r2, r3
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <USB_EPSetStall+0x78>)
 800689c:	4013      	ands	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2210      	movs	r2, #16
 80068a4:	4053      	eors	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	18d3      	adds	r3, r2, r3
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	4910      	ldr	r1, [pc, #64]	; (80068f8 <USB_EPSetStall+0x7c>)
 80068b6:	430a      	orrs	r2, r1
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e016      	b.n	80068ea <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	18d3      	adds	r3, r2, r3
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a0c      	ldr	r2, [pc, #48]	; (80068fc <USB_EPSetStall+0x80>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2280      	movs	r2, #128	; 0x80
 80068d2:	0152      	lsls	r2, r2, #5
 80068d4:	4053      	eors	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	18d3      	adds	r3, r2, r3
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <USB_EPSetStall+0x7c>)
 80068e6:	430a      	orrs	r2, r1
 80068e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b004      	add	sp, #16
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	07ff8fbf 	.word	0x07ff8fbf
 80068f8:	00008080 	.word	0x00008080
 80068fc:	07ffbf8f 	.word	0x07ffbf8f

08006900 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690c:	2280      	movs	r2, #128	; 0x80
 800690e:	0212      	lsls	r2, r2, #8
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	b002      	add	sp, #8
 800691e:	bd80      	pop	{r7, pc}

08006920 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	0019      	movs	r1, r3
 800692c:	1dbb      	adds	r3, r7, #6
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	1c0a      	adds	r2, r1, #0
 8006934:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	3303      	adds	r3, #3
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006940:	2016      	movs	r0, #22
 8006942:	183b      	adds	r3, r7, r0
 8006944:	1d3a      	adds	r2, r7, #4
 8006946:	8812      	ldrh	r2, [r2, #0]
 8006948:	2103      	movs	r1, #3
 800694a:	400a      	ands	r2, r1
 800694c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8006952:	183b      	adds	r3, r7, r0
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <USB_WritePMA+0x40>
  {
    NbWords--;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	3b01      	subs	r3, #1
 800695e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006960:	1dbb      	adds	r3, r7, #6
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <USB_WritePMA+0xe8>)
 8006966:	4694      	mov	ip, r2
 8006968:	4463      	add	r3, ip
 800696a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	623b      	str	r3, [r7, #32]
 8006970:	e01f      	b.n	80069b2 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	7859      	ldrb	r1, [r3, #1]
 8006978:	0209      	lsls	r1, r1, #8
 800697a:	430a      	orrs	r2, r1
 800697c:	7899      	ldrb	r1, [r3, #2]
 800697e:	0409      	lsls	r1, r1, #16
 8006980:	430a      	orrs	r2, r1
 8006982:	78db      	ldrb	r3, [r3, #3]
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	4313      	orrs	r3, r2
 8006988:	001a      	movs	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3304      	adds	r3, #4
 8006992:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	3301      	adds	r3, #1
 8006998:	613b      	str	r3, [r7, #16]
    pBuf++;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3301      	adds	r3, #1
 800699e:	613b      	str	r3, [r7, #16]
    pBuf++;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	613b      	str	r3, [r7, #16]
    pBuf++;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1dc      	bne.n	8006972 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 80069b8:	2316      	movs	r3, #22
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	001a      	movs	r2, r3
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	409a      	lsls	r2, r3
 80069d2:	0013      	movs	r3, r2
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	4313      	orrs	r3, r2
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	3301      	adds	r3, #1
 80069de:	623b      	str	r3, [r7, #32]
      pBuf++;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3301      	adds	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 80069e6:	2116      	movs	r1, #22
 80069e8:	187b      	adds	r3, r7, r1
 80069ea:	881a      	ldrh	r2, [r3, #0]
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	3a01      	subs	r2, #1
 80069f0:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80069f2:	187b      	adds	r3, r7, r1
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fe:	601a      	str	r2, [r3, #0]
  }
}
 8006a00:	46c0      	nop			; (mov r8, r8)
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b00a      	add	sp, #40	; 0x28
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40009800 	.word	0x40009800

08006a0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	000a      	movs	r2, r1
 8006a16:	1cfb      	adds	r3, r7, #3
 8006a18:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a1a:	2387      	movs	r3, #135	; 0x87
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f001 fa80 	bl	8007f24 <USBD_static_malloc>
 8006a24:	0003      	movs	r3, r0
 8006a26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	23b5      	movs	r3, #181	; 0xb5
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	58d2      	ldr	r2, [r2, r3]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32b0      	adds	r2, #176	; 0xb0
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8006a40:	2302      	movs	r3, #2
 8006a42:	e0e9      	b.n	8006c18 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a44:	2387      	movs	r3, #135	; 0x87
 8006a46:	009a      	lsls	r2, r3, #2
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f001 fadf 	bl	8008010 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	23b5      	movs	r3, #181	; 0xb5
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	58d2      	ldr	r2, [r2, r3]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32b0      	adds	r2, #176	; 0xb0
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	23b5      	movs	r3, #181	; 0xb5
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	58d2      	ldr	r2, [r2, r3]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	32b0      	adds	r2, #176	; 0xb0
 8006a70:	0092      	lsls	r2, r2, #2
 8006a72:	58d1      	ldr	r1, [r2, r3]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	23af      	movs	r3, #175	; 0xaf
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7c1b      	ldrb	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13c      	bne.n	8006afe <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a84:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <USBD_CDC_Init+0x214>)
 8006a86:	7819      	ldrb	r1, [r3, #0]
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f001 f945 	bl	8007d1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a94:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <USBD_CDC_Init+0x214>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	001a      	movs	r2, r3
 8006a9a:	230f      	movs	r3, #15
 8006a9c:	401a      	ands	r2, r3
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	0013      	movs	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	189b      	adds	r3, r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	18cb      	adds	r3, r1, r3
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	2201      	movs	r2, #1
 8006aae:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ab0:	4b5c      	ldr	r3, [pc, #368]	; (8006c24 <USBD_CDC_Init+0x218>)
 8006ab2:	7819      	ldrb	r1, [r3, #0]
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f001 f92f 	bl	8007d1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ac0:	4b58      	ldr	r3, [pc, #352]	; (8006c24 <USBD_CDC_Init+0x218>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	001a      	movs	r2, r3
 8006ac6:	230f      	movs	r3, #15
 8006ac8:	401a      	ands	r2, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	23b2      	movs	r3, #178	; 0xb2
 8006ace:	0059      	lsls	r1, r3, #1
 8006ad0:	0013      	movs	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	189b      	adds	r3, r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	18c3      	adds	r3, r0, r3
 8006ada:	185b      	adds	r3, r3, r1
 8006adc:	2201      	movs	r2, #1
 8006ade:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ae0:	4b51      	ldr	r3, [pc, #324]	; (8006c28 <USBD_CDC_Init+0x21c>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	001a      	movs	r2, r3
 8006ae6:	230f      	movs	r3, #15
 8006ae8:	401a      	ands	r2, r3
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	0013      	movs	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	18cb      	adds	r3, r1, r3
 8006af6:	3326      	adds	r3, #38	; 0x26
 8006af8:	2210      	movs	r2, #16
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	e039      	b.n	8006b72 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006afe:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <USBD_CDC_Init+0x214>)
 8006b00:	7819      	ldrb	r1, [r3, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	2202      	movs	r2, #2
 8006b08:	f001 f909 	bl	8007d1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b0c:	4b44      	ldr	r3, [pc, #272]	; (8006c20 <USBD_CDC_Init+0x214>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	001a      	movs	r2, r3
 8006b12:	230f      	movs	r3, #15
 8006b14:	401a      	ands	r2, r3
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	0013      	movs	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	189b      	adds	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	18cb      	adds	r3, r1, r3
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	2201      	movs	r2, #1
 8006b26:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b28:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <USBD_CDC_Init+0x218>)
 8006b2a:	7819      	ldrb	r1, [r3, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2202      	movs	r2, #2
 8006b32:	f001 f8f4 	bl	8007d1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b36:	4b3b      	ldr	r3, [pc, #236]	; (8006c24 <USBD_CDC_Init+0x218>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	001a      	movs	r2, r3
 8006b3c:	230f      	movs	r3, #15
 8006b3e:	401a      	ands	r2, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	23b2      	movs	r3, #178	; 0xb2
 8006b44:	0059      	lsls	r1, r3, #1
 8006b46:	0013      	movs	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	18c3      	adds	r3, r0, r3
 8006b50:	185b      	adds	r3, r3, r1
 8006b52:	2201      	movs	r2, #1
 8006b54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b56:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <USBD_CDC_Init+0x21c>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	230f      	movs	r3, #15
 8006b5e:	401a      	ands	r2, r3
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	0013      	movs	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	18cb      	adds	r3, r1, r3
 8006b6c:	3326      	adds	r3, #38	; 0x26
 8006b6e:	2210      	movs	r2, #16
 8006b70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b72:	4b2d      	ldr	r3, [pc, #180]	; (8006c28 <USBD_CDC_Init+0x21c>)
 8006b74:	7819      	ldrb	r1, [r3, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	2308      	movs	r3, #8
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	f001 f8cf 	bl	8007d1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <USBD_CDC_Init+0x21c>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	001a      	movs	r2, r3
 8006b86:	230f      	movs	r3, #15
 8006b88:	401a      	ands	r2, r3
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	0013      	movs	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	18cb      	adds	r3, r1, r3
 8006b96:	3324      	adds	r3, #36	; 0x24
 8006b98:	2201      	movs	r2, #1
 8006b9a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	2381      	movs	r3, #129	; 0x81
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	23b5      	movs	r3, #181	; 0xb5
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	58d3      	ldr	r3, [r2, r3]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	33b0      	adds	r3, #176	; 0xb0
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	18d3      	adds	r3, r2, r3
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	2385      	movs	r3, #133	; 0x85
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	2386      	movs	r3, #134	; 0x86
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	2100      	movs	r1, #0
 8006bd0:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	2381      	movs	r3, #129	; 0x81
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	58d3      	ldr	r3, [r2, r3]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8006bde:	2302      	movs	r3, #2
 8006be0:	e01a      	b.n	8006c18 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7c1b      	ldrb	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bea:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <USBD_CDC_Init+0x218>)
 8006bec:	7819      	ldrb	r1, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	2381      	movs	r3, #129	; 0x81
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	58d2      	ldr	r2, [r2, r3]
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f94c 	bl	8007e98 <USBD_LL_PrepareReceive>
 8006c00:	e009      	b.n	8006c16 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <USBD_CDC_Init+0x218>)
 8006c04:	7819      	ldrb	r1, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	2381      	movs	r3, #129	; 0x81
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	58d2      	ldr	r2, [r2, r3]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	f001 f941 	bl	8007e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000097 	.word	0x20000097
 8006c24:	20000098 	.word	0x20000098
 8006c28:	20000099 	.word	0x20000099

08006c2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	000a      	movs	r2, r1
 8006c36:	1cfb      	adds	r3, r7, #3
 8006c38:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c3a:	4b41      	ldr	r3, [pc, #260]	; (8006d40 <USBD_CDC_DeInit+0x114>)
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0011      	movs	r1, r2
 8006c42:	0018      	movs	r0, r3
 8006c44:	f001 f8a2 	bl	8007d8c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c48:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <USBD_CDC_DeInit+0x114>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	230f      	movs	r3, #15
 8006c50:	401a      	ands	r2, r3
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	0013      	movs	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	18cb      	adds	r3, r1, r3
 8006c5e:	3324      	adds	r3, #36	; 0x24
 8006c60:	2200      	movs	r2, #0
 8006c62:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c64:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <USBD_CDC_DeInit+0x118>)
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	0011      	movs	r1, r2
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f001 f88d 	bl	8007d8c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c72:	4b34      	ldr	r3, [pc, #208]	; (8006d44 <USBD_CDC_DeInit+0x118>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	001a      	movs	r2, r3
 8006c78:	230f      	movs	r3, #15
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	23b2      	movs	r3, #178	; 0xb2
 8006c80:	0059      	lsls	r1, r3, #1
 8006c82:	0013      	movs	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	189b      	adds	r3, r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	18c3      	adds	r3, r0, r3
 8006c8c:	185b      	adds	r3, r3, r1
 8006c8e:	2200      	movs	r2, #0
 8006c90:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c92:	4b2d      	ldr	r3, [pc, #180]	; (8006d48 <USBD_CDC_DeInit+0x11c>)
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0011      	movs	r1, r2
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f001 f876 	bl	8007d8c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <USBD_CDC_DeInit+0x11c>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	230f      	movs	r3, #15
 8006ca8:	401a      	ands	r2, r3
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	0013      	movs	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	18cb      	adds	r3, r1, r3
 8006cb6:	3324      	adds	r3, #36	; 0x24
 8006cb8:	2200      	movs	r2, #0
 8006cba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cbc:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <USBD_CDC_DeInit+0x11c>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	230f      	movs	r3, #15
 8006cc4:	401a      	ands	r2, r3
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	0013      	movs	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	189b      	adds	r3, r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	18cb      	adds	r3, r1, r3
 8006cd2:	3326      	adds	r3, #38	; 0x26
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	23b5      	movs	r3, #181	; 0xb5
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	58d2      	ldr	r2, [r2, r3]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	32b0      	adds	r2, #176	; 0xb0
 8006ce4:	0092      	lsls	r2, r2, #2
 8006ce6:	58d3      	ldr	r3, [r2, r3]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d024      	beq.n	8006d36 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	23b5      	movs	r3, #181	; 0xb5
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	58d3      	ldr	r3, [r2, r3]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	33b0      	adds	r3, #176	; 0xb0
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	18d3      	adds	r3, r2, r3
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	23b5      	movs	r3, #181	; 0xb5
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	58d2      	ldr	r2, [r2, r3]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32b0      	adds	r2, #176	; 0xb0
 8006d10:	0092      	lsls	r2, r2, #2
 8006d12:	58d3      	ldr	r3, [r2, r3]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f001 f911 	bl	8007f3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	23b5      	movs	r3, #181	; 0xb5
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	58d2      	ldr	r2, [r2, r3]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32b0      	adds	r2, #176	; 0xb0
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	2100      	movs	r1, #0
 8006d2a:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	23af      	movs	r3, #175	; 0xaf
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	2100      	movs	r1, #0
 8006d34:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000097 	.word	0x20000097
 8006d44:	20000098 	.word	0x20000098
 8006d48:	20000099 	.word	0x20000099

08006d4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	23b5      	movs	r3, #181	; 0xb5
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	58d2      	ldr	r2, [r2, r3]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	32b0      	adds	r2, #176	; 0xb0
 8006d62:	0092      	lsls	r2, r2, #2
 8006d64:	58d3      	ldr	r3, [r2, r3]
 8006d66:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d68:	230d      	movs	r3, #13
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8006d70:	230a      	movs	r3, #10
 8006d72:	18fb      	adds	r3, r7, r3
 8006d74:	2200      	movs	r2, #0
 8006d76:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d78:	2317      	movs	r3, #23
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e0d1      	b.n	8006f2e <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	001a      	movs	r2, r3
 8006d90:	2360      	movs	r3, #96	; 0x60
 8006d92:	4013      	ands	r3, r2
 8006d94:	d05b      	beq.n	8006e4e <USBD_CDC_Setup+0x102>
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d000      	beq.n	8006d9c <USBD_CDC_Setup+0x50>
 8006d9a:	e0ba      	b.n	8006f12 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	88db      	ldrh	r3, [r3, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d043      	beq.n	8006e2c <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da22      	bge.n	8006df4 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	23b5      	movs	r3, #181	; 0xb5
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	58d3      	ldr	r3, [r2, r3]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	33b0      	adds	r3, #176	; 0xb0
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006dc8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	88d2      	ldrh	r2, [r2, #6]
 8006dce:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	220e      	movs	r2, #14
 8006dd6:	18ba      	adds	r2, r7, r2
 8006dd8:	b299      	uxth	r1, r3
 8006dda:	2907      	cmp	r1, #7
 8006ddc:	d900      	bls.n	8006de0 <USBD_CDC_Setup+0x94>
 8006dde:	2307      	movs	r3, #7
 8006de0:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006de2:	6939      	ldr	r1, [r7, #16]
 8006de4:	230e      	movs	r3, #14
 8006de6:	18fb      	adds	r3, r7, r3
 8006de8:	881a      	ldrh	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 fca7 	bl	8007740 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006df2:	e099      	b.n	8006f28 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	7859      	ldrb	r1, [r3, #1]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	88db      	ldrh	r3, [r3, #6]
 8006e04:	2b3f      	cmp	r3, #63	; 0x3f
 8006e06:	d803      	bhi.n	8006e10 <USBD_CDC_Setup+0xc4>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	e000      	b.n	8006e12 <USBD_CDC_Setup+0xc6>
 8006e10:	2240      	movs	r2, #64	; 0x40
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	4948      	ldr	r1, [pc, #288]	; (8006f38 <USBD_CDC_Setup+0x1ec>)
 8006e16:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e18:	6939      	ldr	r1, [r7, #16]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4a46      	ldr	r2, [pc, #280]	; (8006f38 <USBD_CDC_Setup+0x1ec>)
 8006e1e:	5c9b      	ldrb	r3, [r3, r2]
 8006e20:	001a      	movs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f000 fca7 	bl	8007778 <USBD_CtlPrepareRx>
      break;
 8006e2a:	e07d      	b.n	8006f28 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	23b5      	movs	r3, #181	; 0xb5
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	58d3      	ldr	r3, [r2, r3]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	33b0      	adds	r3, #176	; 0xb0
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	18d3      	adds	r3, r2, r3
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	7850      	ldrb	r0, [r2, #1]
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4798      	blx	r3
      break;
 8006e4c:	e06c      	b.n	8006f28 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b0b      	cmp	r3, #11
 8006e54:	d03c      	beq.n	8006ed0 <USBD_CDC_Setup+0x184>
 8006e56:	dc4d      	bgt.n	8006ef4 <USBD_CDC_Setup+0x1a8>
 8006e58:	2b0a      	cmp	r3, #10
 8006e5a:	d01f      	beq.n	8006e9c <USBD_CDC_Setup+0x150>
 8006e5c:	dc4a      	bgt.n	8006ef4 <USBD_CDC_Setup+0x1a8>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <USBD_CDC_Setup+0x11c>
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d051      	beq.n	8006f0a <USBD_CDC_Setup+0x1be>
 8006e66:	e045      	b.n	8006ef4 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	23a7      	movs	r3, #167	; 0xa7
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	5cd3      	ldrb	r3, [r2, r3]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d107      	bne.n	8006e86 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e76:	230a      	movs	r3, #10
 8006e78:	18f9      	adds	r1, r7, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 fc5e 	bl	8007740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e84:	e044      	b.n	8006f10 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	0011      	movs	r1, r2
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f000 fbcf 	bl	8007630 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e92:	2317      	movs	r3, #23
 8006e94:	18fb      	adds	r3, r7, r3
 8006e96:	2203      	movs	r2, #3
 8006e98:	701a      	strb	r2, [r3, #0]
          break;
 8006e9a:	e039      	b.n	8006f10 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	23a7      	movs	r3, #167	; 0xa7
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	5cd3      	ldrb	r3, [r2, r3]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d107      	bne.n	8006eba <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eaa:	230d      	movs	r3, #13
 8006eac:	18f9      	adds	r1, r7, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 fc44 	bl	8007740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb8:	e02a      	b.n	8006f10 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	0011      	movs	r1, r2
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f000 fbb5 	bl	8007630 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ec6:	2317      	movs	r3, #23
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	2203      	movs	r2, #3
 8006ecc:	701a      	strb	r2, [r3, #0]
          break;
 8006ece:	e01f      	b.n	8006f10 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	23a7      	movs	r3, #167	; 0xa7
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	5cd3      	ldrb	r3, [r2, r3]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d017      	beq.n	8006f0e <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 fba3 	bl	8007630 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eea:	2317      	movs	r3, #23
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2203      	movs	r2, #3
 8006ef0:	701a      	strb	r2, [r3, #0]
          }
          break;
 8006ef2:	e00c      	b.n	8006f0e <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0011      	movs	r1, r2
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 fb98 	bl	8007630 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f00:	2317      	movs	r3, #23
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	2203      	movs	r2, #3
 8006f06:	701a      	strb	r2, [r3, #0]
          break;
 8006f08:	e002      	b.n	8006f10 <USBD_CDC_Setup+0x1c4>
          break;
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	e00c      	b.n	8006f28 <USBD_CDC_Setup+0x1dc>
          break;
 8006f0e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006f10:	e00a      	b.n	8006f28 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0011      	movs	r1, r2
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 fb89 	bl	8007630 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f1e:	2317      	movs	r3, #23
 8006f20:	18fb      	adds	r3, r7, r3
 8006f22:	2203      	movs	r2, #3
 8006f24:	701a      	strb	r2, [r3, #0]
      break;
 8006f26:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8006f28:	2317      	movs	r3, #23
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	781b      	ldrb	r3, [r3, #0]
}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b006      	add	sp, #24
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	00000201 	.word	0x00000201

08006f3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f3c:	b590      	push	{r4, r7, lr}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	000a      	movs	r2, r1
 8006f46:	1cfb      	adds	r3, r7, #3
 8006f48:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	23b2      	movs	r3, #178	; 0xb2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	58d3      	ldr	r3, [r2, r3]
 8006f52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	23b5      	movs	r3, #181	; 0xb5
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	58d2      	ldr	r2, [r2, r3]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	32b0      	adds	r2, #176	; 0xb0
 8006f60:	0092      	lsls	r2, r2, #2
 8006f62:	58d3      	ldr	r3, [r2, r3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e072      	b.n	8007052 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	23b5      	movs	r3, #181	; 0xb5
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	58d2      	ldr	r2, [r2, r3]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32b0      	adds	r2, #176	; 0xb0
 8006f78:	0092      	lsls	r2, r2, #2
 8006f7a:	58d3      	ldr	r3, [r2, r3]
 8006f7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f7e:	1cfb      	adds	r3, r7, #3
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	220f      	movs	r2, #15
 8006f84:	401a      	ands	r2, r3
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	0013      	movs	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	189b      	adds	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	18cb      	adds	r3, r1, r3
 8006f92:	3318      	adds	r3, #24
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d031      	beq.n	8006ffe <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f9a:	1cfb      	adds	r3, r7, #3
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	220f      	movs	r2, #15
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	0013      	movs	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	18cb      	adds	r3, r1, r3
 8006fae:	3318      	adds	r3, #24
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	1cfb      	adds	r3, r7, #3
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	220f      	movs	r2, #15
 8006fb8:	401a      	ands	r2, r3
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	0013      	movs	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	18cb      	adds	r3, r1, r3
 8006fc6:	334c      	adds	r3, #76	; 0x4c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	0019      	movs	r1, r3
 8006fcc:	f7f9 f932 	bl	8000234 <__aeabi_uidivmod>
 8006fd0:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fd2:	d114      	bne.n	8006ffe <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fd4:	1cfb      	adds	r3, r7, #3
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	220f      	movs	r2, #15
 8006fda:	401a      	ands	r2, r3
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	0013      	movs	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	18cb      	adds	r3, r1, r3
 8006fe8:	3318      	adds	r3, #24
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fee:	1cfb      	adds	r3, r7, #3
 8006ff0:	7819      	ldrb	r1, [r3, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f000 ff1e 	bl	8007e38 <USBD_LL_Transmit>
 8006ffc:	e028      	b.n	8007050 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	2385      	movs	r3, #133	; 0x85
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	2100      	movs	r1, #0
 8007006:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	23b5      	movs	r3, #181	; 0xb5
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	58d3      	ldr	r3, [r2, r3]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	33b0      	adds	r3, #176	; 0xb0
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	18d3      	adds	r3, r2, r3
 8007018:	3304      	adds	r3, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d016      	beq.n	8007050 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	23b5      	movs	r3, #181	; 0xb5
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	58d3      	ldr	r3, [r2, r3]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	33b0      	adds	r3, #176	; 0xb0
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	18d3      	adds	r3, r2, r3
 8007032:	3304      	adds	r3, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691c      	ldr	r4, [r3, #16]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	2382      	movs	r3, #130	; 0x82
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	58d0      	ldr	r0, [r2, r3]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2284      	movs	r2, #132	; 0x84
 8007044:	0092      	lsls	r2, r2, #2
 8007046:	1899      	adds	r1, r3, r2
 8007048:	1cfb      	adds	r3, r7, #3
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	001a      	movs	r2, r3
 800704e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	b005      	add	sp, #20
 8007058:	bd90      	pop	{r4, r7, pc}

0800705a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	000a      	movs	r2, r1
 8007064:	1cfb      	adds	r3, r7, #3
 8007066:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	23b5      	movs	r3, #181	; 0xb5
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	58d2      	ldr	r2, [r2, r3]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	32b0      	adds	r2, #176	; 0xb0
 8007074:	0092      	lsls	r2, r2, #2
 8007076:	58d3      	ldr	r3, [r2, r3]
 8007078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	23b5      	movs	r3, #181	; 0xb5
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	58d2      	ldr	r2, [r2, r3]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	; 0xb0
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	58d3      	ldr	r3, [r2, r3]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	e022      	b.n	80070d8 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007092:	1cfb      	adds	r3, r7, #3
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0011      	movs	r1, r2
 800709a:	0018      	movs	r0, r3
 800709c:	f000 ff2c 	bl	8007ef8 <USBD_LL_GetRxDataSize>
 80070a0:	0001      	movs	r1, r0
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	2383      	movs	r3, #131	; 0x83
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	23b5      	movs	r3, #181	; 0xb5
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	58d3      	ldr	r3, [r2, r3]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	33b0      	adds	r3, #176	; 0xb0
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	18d3      	adds	r3, r2, r3
 80070ba:	3304      	adds	r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	68f9      	ldr	r1, [r7, #12]
 80070c2:	2381      	movs	r3, #129	; 0x81
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	58c8      	ldr	r0, [r1, r3]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2183      	movs	r1, #131	; 0x83
 80070cc:	0089      	lsls	r1, r1, #2
 80070ce:	468c      	mov	ip, r1
 80070d0:	4463      	add	r3, ip
 80070d2:	0019      	movs	r1, r3
 80070d4:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	0018      	movs	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	b004      	add	sp, #16
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	23b5      	movs	r3, #181	; 0xb5
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	58d2      	ldr	r2, [r2, r3]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	32b0      	adds	r2, #176	; 0xb0
 80070f4:	0092      	lsls	r2, r2, #2
 80070f6:	58d3      	ldr	r3, [r2, r3]
 80070f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	e02c      	b.n	800715e <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	23b5      	movs	r3, #181	; 0xb5
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	58d3      	ldr	r3, [r2, r3]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	33b0      	adds	r3, #176	; 0xb0
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	18d3      	adds	r3, r2, r3
 8007114:	3304      	adds	r3, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01f      	beq.n	800715c <USBD_CDC_EP0_RxReady+0x7c>
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	2bff      	cmp	r3, #255	; 0xff
 8007126:	d019      	beq.n	800715c <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	23b5      	movs	r3, #181	; 0xb5
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	58d3      	ldr	r3, [r2, r3]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	33b0      	adds	r3, #176	; 0xb0
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	18d3      	adds	r3, r2, r3
 8007138:	3304      	adds	r3, #4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	2280      	movs	r2, #128	; 0x80
 8007142:	0092      	lsls	r2, r2, #2
 8007144:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 8007146:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4c07      	ldr	r4, [pc, #28]	; (8007168 <USBD_CDC_EP0_RxReady+0x88>)
 800714c:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800714e:	b292      	uxth	r2, r2
 8007150:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	21ff      	movs	r1, #255	; 0xff
 800715a:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	0018      	movs	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	b005      	add	sp, #20
 8007164:	bd90      	pop	{r4, r7, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	00000201 	.word	0x00000201

0800716c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007174:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8007176:	2182      	movs	r1, #130	; 0x82
 8007178:	0018      	movs	r0, r3
 800717a:	f000 f9f6 	bl	800756a <USBD_GetEpDesc>
 800717e:	0003      	movs	r3, r0
 8007180:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8007184:	2101      	movs	r1, #1
 8007186:	0018      	movs	r0, r3
 8007188:	f000 f9ef 	bl	800756a <USBD_GetEpDesc>
 800718c:	0003      	movs	r3, r0
 800718e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007190:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8007192:	2181      	movs	r1, #129	; 0x81
 8007194:	0018      	movs	r0, r3
 8007196:	f000 f9e8 	bl	800756a <USBD_GetEpDesc>
 800719a:	0003      	movs	r3, r0
 800719c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2210      	movs	r2, #16
 80071a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	791a      	ldrb	r2, [r3, #4]
 80071b4:	2100      	movs	r1, #0
 80071b6:	400a      	ands	r2, r1
 80071b8:	1c11      	adds	r1, r2, #0
 80071ba:	2240      	movs	r2, #64	; 0x40
 80071bc:	430a      	orrs	r2, r1
 80071be:	711a      	strb	r2, [r3, #4]
 80071c0:	795a      	ldrb	r2, [r3, #5]
 80071c2:	2100      	movs	r1, #0
 80071c4:	400a      	ands	r2, r1
 80071c6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	791a      	ldrb	r2, [r3, #4]
 80071d2:	2100      	movs	r1, #0
 80071d4:	400a      	ands	r2, r1
 80071d6:	1c11      	adds	r1, r2, #0
 80071d8:	2240      	movs	r2, #64	; 0x40
 80071da:	430a      	orrs	r2, r1
 80071dc:	711a      	strb	r2, [r3, #4]
 80071de:	795a      	ldrb	r2, [r3, #5]
 80071e0:	2100      	movs	r1, #0
 80071e2:	400a      	ands	r2, r1
 80071e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2243      	movs	r2, #67	; 0x43
 80071ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 80071ee:	0018      	movs	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b006      	add	sp, #24
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	20000054 	.word	0x20000054

080071fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007204:	4b20      	ldr	r3, [pc, #128]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8007206:	2182      	movs	r1, #130	; 0x82
 8007208:	0018      	movs	r0, r3
 800720a:	f000 f9ae 	bl	800756a <USBD_GetEpDesc>
 800720e:	0003      	movs	r3, r0
 8007210:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007212:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8007214:	2101      	movs	r1, #1
 8007216:	0018      	movs	r0, r3
 8007218:	f000 f9a7 	bl	800756a <USBD_GetEpDesc>
 800721c:	0003      	movs	r3, r0
 800721e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007220:	4b19      	ldr	r3, [pc, #100]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8007222:	2181      	movs	r1, #129	; 0x81
 8007224:	0018      	movs	r0, r3
 8007226:	f000 f9a0 	bl	800756a <USBD_GetEpDesc>
 800722a:	0003      	movs	r3, r0
 800722c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2210      	movs	r2, #16
 8007238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	791a      	ldrb	r2, [r3, #4]
 8007244:	2100      	movs	r1, #0
 8007246:	400a      	ands	r2, r1
 8007248:	711a      	strb	r2, [r3, #4]
 800724a:	795a      	ldrb	r2, [r3, #5]
 800724c:	2100      	movs	r1, #0
 800724e:	400a      	ands	r2, r1
 8007250:	1c11      	adds	r1, r2, #0
 8007252:	2202      	movs	r2, #2
 8007254:	430a      	orrs	r2, r1
 8007256:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	791a      	ldrb	r2, [r3, #4]
 8007262:	2100      	movs	r1, #0
 8007264:	400a      	ands	r2, r1
 8007266:	711a      	strb	r2, [r3, #4]
 8007268:	795a      	ldrb	r2, [r3, #5]
 800726a:	2100      	movs	r1, #0
 800726c:	400a      	ands	r2, r1
 800726e:	1c11      	adds	r1, r2, #0
 8007270:	2202      	movs	r2, #2
 8007272:	430a      	orrs	r2, r1
 8007274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2243      	movs	r2, #67	; 0x43
 800727a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b006      	add	sp, #24
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20000054 	.word	0x20000054

0800728c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8007296:	2182      	movs	r1, #130	; 0x82
 8007298:	0018      	movs	r0, r3
 800729a:	f000 f966 	bl	800756a <USBD_GetEpDesc>
 800729e:	0003      	movs	r3, r0
 80072a0:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80072a4:	2101      	movs	r1, #1
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f95f 	bl	800756a <USBD_GetEpDesc>
 80072ac:	0003      	movs	r3, r0
 80072ae:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80072b2:	2181      	movs	r1, #129	; 0x81
 80072b4:	0018      	movs	r0, r3
 80072b6:	f000 f958 	bl	800756a <USBD_GetEpDesc>
 80072ba:	0003      	movs	r3, r0
 80072bc:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2210      	movs	r2, #16
 80072c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	791a      	ldrb	r2, [r3, #4]
 80072d4:	2100      	movs	r1, #0
 80072d6:	400a      	ands	r2, r1
 80072d8:	1c11      	adds	r1, r2, #0
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	430a      	orrs	r2, r1
 80072de:	711a      	strb	r2, [r3, #4]
 80072e0:	795a      	ldrb	r2, [r3, #5]
 80072e2:	2100      	movs	r1, #0
 80072e4:	400a      	ands	r2, r1
 80072e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	791a      	ldrb	r2, [r3, #4]
 80072f2:	2100      	movs	r1, #0
 80072f4:	400a      	ands	r2, r1
 80072f6:	1c11      	adds	r1, r2, #0
 80072f8:	2240      	movs	r2, #64	; 0x40
 80072fa:	430a      	orrs	r2, r1
 80072fc:	711a      	strb	r2, [r3, #4]
 80072fe:	795a      	ldrb	r2, [r3, #5]
 8007300:	2100      	movs	r1, #0
 8007302:	400a      	ands	r2, r1
 8007304:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2243      	movs	r2, #67	; 0x43
 800730a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	b006      	add	sp, #24
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	20000054 	.word	0x20000054

0800731c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	220a      	movs	r2, #10
 8007328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800732a:	4b02      	ldr	r3, [pc, #8]	; (8007334 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800732c:	0018      	movs	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	b002      	add	sp, #8
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000010 	.word	0x20000010

08007338 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007348:	2303      	movs	r3, #3
 800734a:	e00b      	b.n	8007364 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	23b5      	movs	r3, #181	; 0xb5
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	58d3      	ldr	r3, [r2, r3]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	33b0      	adds	r3, #176	; 0xb0
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	18d3      	adds	r3, r2, r3
 800735c:	3304      	adds	r3, #4
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	0018      	movs	r0, r3
 8007366:	46bd      	mov	sp, r7
 8007368:	b002      	add	sp, #8
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	23b5      	movs	r3, #181	; 0xb5
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	58d2      	ldr	r2, [r2, r3]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	32b0      	adds	r2, #176	; 0xb0
 8007384:	0092      	lsls	r2, r2, #2
 8007386:	58d3      	ldr	r3, [r2, r3]
 8007388:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e00a      	b.n	80073aa <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	2382      	movs	r3, #130	; 0x82
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	2384      	movs	r3, #132	; 0x84
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	0018      	movs	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	b006      	add	sp, #24
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	23b5      	movs	r3, #181	; 0xb5
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	58d2      	ldr	r2, [r2, r3]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	32b0      	adds	r2, #176	; 0xb0
 80073c8:	0092      	lsls	r2, r2, #2
 80073ca:	58d3      	ldr	r3, [r2, r3]
 80073cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e005      	b.n	80073e4 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	2381      	movs	r3, #129	; 0x81
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	0018      	movs	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b004      	add	sp, #16
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	23b5      	movs	r3, #181	; 0xb5
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	58d2      	ldr	r2, [r2, r3]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32b0      	adds	r2, #176	; 0xb0
 8007400:	0092      	lsls	r2, r2, #2
 8007402:	58d3      	ldr	r3, [r2, r3]
 8007404:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	23b5      	movs	r3, #181	; 0xb5
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	58d2      	ldr	r2, [r2, r3]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32b0      	adds	r2, #176	; 0xb0
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	58d3      	ldr	r3, [r2, r3]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800741a:	2303      	movs	r3, #3
 800741c:	e01a      	b.n	8007454 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	7c1b      	ldrb	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007426:	4b0d      	ldr	r3, [pc, #52]	; (800745c <USBD_CDC_ReceivePacket+0x70>)
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	2381      	movs	r3, #129	; 0x81
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	58d2      	ldr	r2, [r2, r3]
 8007432:	2380      	movs	r3, #128	; 0x80
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fd2e 	bl	8007e98 <USBD_LL_PrepareReceive>
 800743c:	e009      	b.n	8007452 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800743e:	4b07      	ldr	r3, [pc, #28]	; (800745c <USBD_CDC_ReceivePacket+0x70>)
 8007440:	7819      	ldrb	r1, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	2381      	movs	r3, #129	; 0x81
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	58d2      	ldr	r2, [r2, r3]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	2340      	movs	r3, #64	; 0x40
 800744e:	f000 fd23 	bl	8007e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	0018      	movs	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	b004      	add	sp, #16
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000098 	.word	0x20000098

08007460 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007460:	b5b0      	push	{r4, r5, r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	1dfb      	adds	r3, r7, #7
 800746c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e029      	b.n	80074cc <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	23ae      	movs	r3, #174	; 0xae
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	2100      	movs	r1, #0
 8007480:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	23b1      	movs	r3, #177	; 0xb1
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	2100      	movs	r1, #0
 800748a:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	23b4      	movs	r3, #180	; 0xb4
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	2100      	movs	r1, #0
 8007494:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	23ad      	movs	r3, #173	; 0xad
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	23a7      	movs	r3, #167	; 0xa7
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	2101      	movs	r1, #1
 80074ae:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1dfa      	adds	r2, r7, #7
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074b8:	2517      	movs	r5, #23
 80074ba:	197c      	adds	r4, r7, r5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	0018      	movs	r0, r3
 80074c0:	f000 fb96 	bl	8007bf0 <USBD_LL_Init>
 80074c4:	0003      	movs	r3, r0
 80074c6:	7023      	strb	r3, [r4, #0]

  return ret;
 80074c8:	197b      	adds	r3, r7, r5
 80074ca:	781b      	ldrb	r3, [r3, #0]
}
 80074cc:	0018      	movs	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b006      	add	sp, #24
 80074d2:	bdb0      	pop	{r4, r5, r7, pc}

080074d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074de:	230e      	movs	r3, #14
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	2200      	movs	r2, #0
 80074e4:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e02b      	b.n	8007548 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	23ae      	movs	r3, #174	; 0xae
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	23b5      	movs	r3, #181	; 0xb5
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	58d2      	ldr	r2, [r2, r3]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	; 0xae
 8007506:	0092      	lsls	r2, r2, #2
 8007508:	58d3      	ldr	r3, [r2, r3]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d011      	beq.n	8007534 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	23b5      	movs	r3, #181	; 0xb5
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	58d2      	ldr	r2, [r2, r3]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	32ae      	adds	r2, #174	; 0xae
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	58d3      	ldr	r3, [r2, r3]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	220e      	movs	r2, #14
 8007524:	18ba      	adds	r2, r7, r2
 8007526:	0010      	movs	r0, r2
 8007528:	4798      	blx	r3
 800752a:	0001      	movs	r1, r0
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	23b4      	movs	r3, #180	; 0xb4
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	23b6      	movs	r3, #182	; 0xb6
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	58d3      	ldr	r3, [r2, r3]
 800753c:	1c59      	adds	r1, r3, #1
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	23b6      	movs	r3, #182	; 0xb6
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	0018      	movs	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	b004      	add	sp, #16
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0018      	movs	r0, r3
 800755c:	f000 fbba 	bl	8007cd4 <USBD_LL_Start>
 8007560:	0003      	movs	r3, r0
}
 8007562:	0018      	movs	r0, r3
 8007564:	46bd      	mov	sp, r7
 8007566:	b002      	add	sp, #8
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	000a      	movs	r2, r1
 8007574:	1cfb      	adds	r3, r7, #3
 8007576:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	789a      	ldrb	r2, [r3, #2]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	4313      	orrs	r3, r2
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	429a      	cmp	r2, r3
 8007598:	d92a      	bls.n	80075f0 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	230a      	movs	r3, #10
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 80075a6:	e016      	b.n	80075d6 <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075a8:	230a      	movs	r3, #10
 80075aa:	18fa      	adds	r2, r7, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	0011      	movs	r1, r2
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f822 	bl	80075fa <USBD_GetNextDesc>
 80075b6:	0003      	movs	r3, r0
 80075b8:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d109      	bne.n	80075d6 <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	789b      	ldrb	r3, [r3, #2]
 80075ca:	1cfa      	adds	r2, r7, #3
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d00d      	beq.n	80075ee <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	789a      	ldrb	r2, [r3, #2]
 80075da:	78db      	ldrb	r3, [r3, #3]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	4313      	orrs	r3, r2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	230a      	movs	r3, #10
 80075e4:	18fb      	adds	r3, r7, r3
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d8dd      	bhi.n	80075a8 <USBD_GetEpDesc+0x3e>
 80075ec:	e000      	b.n	80075f0 <USBD_GetEpDesc+0x86>
          break;
 80075ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075f0:	693b      	ldr	r3, [r7, #16]
}
 80075f2:	0018      	movs	r0, r3
 80075f4:	46bd      	mov	sp, r7
 80075f6:	b006      	add	sp, #24
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	881a      	ldrh	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	18d3      	adds	r3, r2, r3
 8007614:	b29a      	uxth	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	001a      	movs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	189b      	adds	r3, r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007626:	68fb      	ldr	r3, [r7, #12]
}
 8007628:	0018      	movs	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	b004      	add	sp, #16
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2180      	movs	r1, #128	; 0x80
 800763e:	0018      	movs	r0, r3
 8007640:	f000 fbcf 	bl	8007de2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2100      	movs	r1, #0
 8007648:	0018      	movs	r0, r3
 800764a:	f000 fbca 	bl	8007de2 <USBD_LL_StallEP>
}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	46bd      	mov	sp, r7
 8007652:	b002      	add	sp, #8
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007656:	b590      	push	{r4, r7, lr}
 8007658:	b087      	sub	sp, #28
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007662:	2417      	movs	r4, #23
 8007664:	193b      	adds	r3, r7, r4
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d044      	beq.n	80076fa <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	0018      	movs	r0, r3
 8007678:	f000 f843 	bl	8007702 <USBD_GetLen>
 800767c:	0003      	movs	r3, r0
 800767e:	3301      	adds	r3, #1
 8007680:	b29b      	uxth	r3, r3
 8007682:	18db      	adds	r3, r3, r3
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800768a:	193b      	adds	r3, r7, r4
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	18d3      	adds	r3, r2, r3
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	701a      	strb	r2, [r3, #0]
  idx++;
 8007698:	193b      	adds	r3, r7, r4
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	193b      	adds	r3, r7, r4
 800769e:	3201      	adds	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076a2:	193b      	adds	r3, r7, r4
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	18d3      	adds	r3, r2, r3
 80076aa:	2203      	movs	r2, #3
 80076ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80076ae:	193b      	adds	r3, r7, r4
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	193b      	adds	r3, r7, r4
 80076b4:	3201      	adds	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 80076b8:	e01a      	b.n	80076f0 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 80076ba:	2117      	movs	r1, #23
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	18d3      	adds	r3, r2, r3
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3301      	adds	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
    idx++;
 80076d0:	187b      	adds	r3, r7, r1
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	3201      	adds	r2, #1
 80076d8:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 80076da:	187b      	adds	r3, r7, r1
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	18d3      	adds	r3, r2, r3
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80076e6:	187b      	adds	r3, r7, r1
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	187b      	adds	r3, r7, r1
 80076ec:	3201      	adds	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e0      	bne.n	80076ba <USBD_GetString+0x64>
 80076f8:	e000      	b.n	80076fc <USBD_GetString+0xa6>
    return;
 80076fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b007      	add	sp, #28
 8007700:	bd90      	pop	{r4, r7, pc}

08007702 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800770a:	230f      	movs	r3, #15
 800770c:	18fb      	adds	r3, r7, r3
 800770e:	2200      	movs	r2, #0
 8007710:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007716:	e008      	b.n	800772a <USBD_GetLen+0x28>
  {
    len++;
 8007718:	210f      	movs	r1, #15
 800771a:	187b      	adds	r3, r7, r1
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	187b      	adds	r3, r7, r1
 8007720:	3201      	adds	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3301      	adds	r3, #1
 8007728:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f2      	bne.n	8007718 <USBD_GetLen+0x16>
  }

  return len;
 8007732:	230f      	movs	r3, #15
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	781b      	ldrb	r3, [r3, #0]
}
 8007738:	0018      	movs	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	b004      	add	sp, #16
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	23a5      	movs	r3, #165	; 0xa5
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	2102      	movs	r1, #2
 8007754:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	2100      	movs	r1, #0
 800776a:	f000 fb65 	bl	8007e38 <USBD_LL_Transmit>

  return USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	0018      	movs	r0, r3
 8007772:	46bd      	mov	sp, r7
 8007774:	b004      	add	sp, #16
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	23a5      	movs	r3, #165	; 0xa5
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	2103      	movs	r1, #3
 800778c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	23ac      	movs	r3, #172	; 0xac
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	23ae      	movs	r3, #174	; 0xae
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	2100      	movs	r1, #0
 80077aa:	f000 fb75 	bl	8007e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	0018      	movs	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b004      	add	sp, #16
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80077bc:	4914      	ldr	r1, [pc, #80]	; (8007810 <MX_USB_Device_Init+0x58>)
 80077be:	4b15      	ldr	r3, [pc, #84]	; (8007814 <MX_USB_Device_Init+0x5c>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	0018      	movs	r0, r3
 80077c4:	f7ff fe4c 	bl	8007460 <USBD_Init>
 80077c8:	1e03      	subs	r3, r0, #0
 80077ca:	d001      	beq.n	80077d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80077cc:	f7f9 fb9c 	bl	8000f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80077d0:	4a11      	ldr	r2, [pc, #68]	; (8007818 <MX_USB_Device_Init+0x60>)
 80077d2:	4b10      	ldr	r3, [pc, #64]	; (8007814 <MX_USB_Device_Init+0x5c>)
 80077d4:	0011      	movs	r1, r2
 80077d6:	0018      	movs	r0, r3
 80077d8:	f7ff fe7c 	bl	80074d4 <USBD_RegisterClass>
 80077dc:	1e03      	subs	r3, r0, #0
 80077de:	d001      	beq.n	80077e4 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 80077e0:	f7f9 fb92 	bl	8000f08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80077e4:	4a0d      	ldr	r2, [pc, #52]	; (800781c <MX_USB_Device_Init+0x64>)
 80077e6:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <MX_USB_Device_Init+0x5c>)
 80077e8:	0011      	movs	r1, r2
 80077ea:	0018      	movs	r0, r3
 80077ec:	f7ff fda4 	bl	8007338 <USBD_CDC_RegisterInterface>
 80077f0:	1e03      	subs	r3, r0, #0
 80077f2:	d001      	beq.n	80077f8 <MX_USB_Device_Init+0x40>
    Error_Handler();
 80077f4:	f7f9 fb88 	bl	8000f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80077f8:	4b06      	ldr	r3, [pc, #24]	; (8007814 <MX_USB_Device_Init+0x5c>)
 80077fa:	0018      	movs	r0, r3
 80077fc:	f7ff fea8 	bl	8007550 <USBD_Start>
 8007800:	1e03      	subs	r3, r0, #0
 8007802:	d001      	beq.n	8007808 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8007804:	f7f9 fb80 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007808:	46c0      	nop			; (mov r8, r8)
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	200000b0 	.word	0x200000b0
 8007814:	20000460 	.word	0x20000460
 8007818:	2000001c 	.word	0x2000001c
 800781c:	2000009c 	.word	0x2000009c

08007820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007824:	4907      	ldr	r1, [pc, #28]	; (8007844 <CDC_Init_FS+0x24>)
 8007826:	4b08      	ldr	r3, [pc, #32]	; (8007848 <CDC_Init_FS+0x28>)
 8007828:	2200      	movs	r2, #0
 800782a:	0018      	movs	r0, r3
 800782c:	f7ff fd9e 	bl	800736c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007830:	4a06      	ldr	r2, [pc, #24]	; (800784c <CDC_Init_FS+0x2c>)
 8007832:	4b05      	ldr	r3, [pc, #20]	; (8007848 <CDC_Init_FS+0x28>)
 8007834:	0011      	movs	r1, r2
 8007836:	0018      	movs	r0, r3
 8007838:	f7ff fdbb 	bl	80073b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800783c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800783e:	0018      	movs	r0, r3
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000f3c 	.word	0x20000f3c
 8007848:	20000460 	.word	0x20000460
 800784c:	2000073c 	.word	0x2000073c

08007850 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007854:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6039      	str	r1, [r7, #0]
 8007864:	0011      	movs	r1, r2
 8007866:	1dfb      	adds	r3, r7, #7
 8007868:	1c02      	adds	r2, r0, #0
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	1d3b      	adds	r3, r7, #4
 800786e:	1c0a      	adds	r2, r1, #0
 8007870:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b23      	cmp	r3, #35	; 0x23
 8007878:	d804      	bhi.n	8007884 <CDC_Control_FS+0x28>
 800787a:	009a      	lsls	r2, r3, #2
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <CDC_Control_FS+0x34>)
 800787e:	18d3      	adds	r3, r2, r3
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007884:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8007886:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007888:	0018      	movs	r0, r3
 800788a:	46bd      	mov	sp, r7
 800788c:	b002      	add	sp, #8
 800788e:	bd80      	pop	{r7, pc}
 8007890:	08008c9c 	.word	0x08008c9c

08007894 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <CDC_Receive_FS+0x28>)
 80078a2:	0011      	movs	r1, r2
 80078a4:	0018      	movs	r0, r3
 80078a6:	f7ff fd84 	bl	80073b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <CDC_Receive_FS+0x28>)
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7ff fd9d 	bl	80073ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078b4:	0018      	movs	r0, r3
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b002      	add	sp, #8
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20000460 	.word	0x20000460

080078c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	1dfb      	adds	r3, r7, #7
 80078cc:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80078ce:	2117      	movs	r1, #23
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80078d6:	187b      	adds	r3, r7, r1
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b25b      	sxtb	r3, r3
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b006      	add	sp, #24
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	0002      	movs	r2, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	1dfb      	adds	r3, r7, #7
 80078f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2212      	movs	r2, #18
 80078f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80078fa:	0018      	movs	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	b002      	add	sp, #8
 8007900:	bd80      	pop	{r7, pc}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	200000d0 	.word	0x200000d0

08007908 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	0002      	movs	r2, r0
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	1dfb      	adds	r3, r7, #7
 8007914:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2204      	movs	r2, #4
 800791a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b002      	add	sp, #8
 8007924:	bd80      	pop	{r7, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	200000e4 	.word	0x200000e4

0800792c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	0002      	movs	r2, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	1dfb      	adds	r3, r7, #7
 8007938:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800793a:	1dfb      	adds	r3, r7, #7
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	4908      	ldr	r1, [pc, #32]	; (8007968 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <USBD_CDC_ProductStrDescriptor+0x40>)
 8007948:	0018      	movs	r0, r3
 800794a:	f7ff fe84 	bl	8007656 <USBD_GetString>
 800794e:	e005      	b.n	800795c <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	4905      	ldr	r1, [pc, #20]	; (8007968 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <USBD_CDC_ProductStrDescriptor+0x40>)
 8007956:	0018      	movs	r0, r3
 8007958:	f7ff fe7d 	bl	8007656 <USBD_GetString>
  }
  return USBD_StrDesc;
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b002      	add	sp, #8
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	2000173c 	.word	0x2000173c
 800796c:	08008bbc 	.word	0x08008bbc

08007970 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	0002      	movs	r2, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	1dfb      	adds	r3, r7, #7
 800797c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4904      	ldr	r1, [pc, #16]	; (8007994 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8007984:	0018      	movs	r0, r3
 8007986:	f7ff fe66 	bl	8007656 <USBD_GetString>
  return USBD_StrDesc;
 800798a:	4b02      	ldr	r3, [pc, #8]	; (8007994 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}
 8007994:	2000173c 	.word	0x2000173c
 8007998:	08008bd4 	.word	0x08008bd4

0800799c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	0002      	movs	r2, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	1dfb      	adds	r3, r7, #7
 80079a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	221a      	movs	r2, #26
 80079ae:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079b0:	f000 f84c 	bl	8007a4c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 80079b6:	0018      	movs	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b002      	add	sp, #8
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	200000e8 	.word	0x200000e8

080079c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	0002      	movs	r2, r0
 80079cc:	6039      	str	r1, [r7, #0]
 80079ce:	1dfb      	adds	r3, r7, #7
 80079d0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80079d2:	1dfb      	adds	r3, r7, #7
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4908      	ldr	r1, [pc, #32]	; (8007a00 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <USBD_CDC_ConfigStrDescriptor+0x40>)
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7ff fe38 	bl	8007656 <USBD_GetString>
 80079e6:	e005      	b.n	80079f4 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	4905      	ldr	r1, [pc, #20]	; (8007a00 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <USBD_CDC_ConfigStrDescriptor+0x40>)
 80079ee:	0018      	movs	r0, r3
 80079f0:	f7ff fe31 	bl	8007656 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 80079f6:	0018      	movs	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	b002      	add	sp, #8
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	2000173c 	.word	0x2000173c
 8007a04:	08008be8 	.word	0x08008be8

08007a08 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	0002      	movs	r2, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	1dfb      	adds	r3, r7, #7
 8007a14:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007a16:	1dfb      	adds	r3, r7, #7
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	4908      	ldr	r1, [pc, #32]	; (8007a44 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8007a24:	0018      	movs	r0, r3
 8007a26:	f7ff fe16 	bl	8007656 <USBD_GetString>
 8007a2a:	e005      	b.n	8007a38 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	4905      	ldr	r1, [pc, #20]	; (8007a44 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8007a32:	0018      	movs	r0, r3
 8007a34:	f7ff fe0f 	bl	8007656 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b002      	add	sp, #8
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	2000173c 	.word	0x2000173c
 8007a48:	08008bf4 	.word	0x08008bf4

08007a4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a52:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <Get_SerialNum+0x48>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <Get_SerialNum+0x4c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <Get_SerialNum+0x50>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	18d3      	adds	r3, r2, r3
 8007a6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a72:	490b      	ldr	r1, [pc, #44]	; (8007aa0 <Get_SerialNum+0x54>)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2208      	movs	r2, #8
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f000 f815 	bl	8007aa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a7e:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <Get_SerialNum+0x58>)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2204      	movs	r2, #4
 8007a84:	0018      	movs	r0, r3
 8007a86:	f000 f80f 	bl	8007aa8 <IntToUnicode>
  }
}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	1fff7590 	.word	0x1fff7590
 8007a98:	1fff7594 	.word	0x1fff7594
 8007a9c:	1fff7598 	.word	0x1fff7598
 8007aa0:	200000ea 	.word	0x200000ea
 8007aa4:	200000fa 	.word	0x200000fa

08007aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	1dfb      	adds	r3, r7, #7
 8007ab4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007ab6:	2117      	movs	r1, #23
 8007ab8:	187b      	adds	r3, r7, r1
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007abe:	187b      	adds	r3, r7, r1
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
 8007ac4:	e02f      	b.n	8007b26 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	0f1b      	lsrs	r3, r3, #28
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d80d      	bhi.n	8007aea <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	0f1b      	lsrs	r3, r3, #28
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	2317      	movs	r3, #23
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	0019      	movs	r1, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	185b      	adds	r3, r3, r1
 8007ae2:	3230      	adds	r2, #48	; 0x30
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e00c      	b.n	8007b04 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	0f1b      	lsrs	r3, r3, #28
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	2317      	movs	r3, #23
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	0019      	movs	r1, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	185b      	adds	r3, r3, r1
 8007afe:	3237      	adds	r2, #55	; 0x37
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b0a:	2117      	movs	r1, #23
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	3301      	adds	r3, #1
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	18d3      	adds	r3, r2, r3
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b1c:	187b      	adds	r3, r7, r1
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	187b      	adds	r3, r7, r1
 8007b22:	3201      	adds	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	2317      	movs	r3, #23
 8007b28:	18fa      	adds	r2, r7, r3
 8007b2a:	1dfb      	adds	r3, r7, #7
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d3c8      	bcc.n	8007ac6 <IntToUnicode+0x1e>
  }
}
 8007b34:	46c0      	nop			; (mov r8, r8)
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b006      	add	sp, #24
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b099      	sub	sp, #100	; 0x64
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b48:	2414      	movs	r4, #20
 8007b4a:	193b      	adds	r3, r7, r4
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	234c      	movs	r3, #76	; 0x4c
 8007b50:	001a      	movs	r2, r3
 8007b52:	2100      	movs	r1, #0
 8007b54:	f000 fa5c 	bl	8008010 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a21      	ldr	r2, [pc, #132]	; (8007be4 <HAL_PCD_MspInit+0xa4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d13b      	bne.n	8007bda <HAL_PCD_MspInit+0x9a>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007b62:	193b      	adds	r3, r7, r4
 8007b64:	2280      	movs	r2, #128	; 0x80
 8007b66:	0452      	lsls	r2, r2, #17
 8007b68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007b6a:	193b      	adds	r3, r7, r4
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b70:	193b      	adds	r3, r7, r4
 8007b72:	0018      	movs	r0, r3
 8007b74:	f7fb ff2c 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d001      	beq.n	8007b80 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8007b7c:	f7f9 f9c4 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b80:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b84:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007b86:	2180      	movs	r1, #128	; 0x80
 8007b88:	0189      	lsls	r1, r1, #6
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b92:	2380      	movs	r3, #128	; 0x80
 8007b94:	019b      	lsls	r3, r3, #6
 8007b96:	4013      	ands	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b9c:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ba0:	2380      	movs	r3, #128	; 0x80
 8007ba2:	055b      	lsls	r3, r3, #21
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	d116      	bne.n	8007bd6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ba8:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007bae:	2180      	movs	r1, #128	; 0x80
 8007bb0:	0549      	lsls	r1, r1, #21
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bba:	2380      	movs	r3, #128	; 0x80
 8007bbc:	055b      	lsls	r3, r3, #21
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8007bc4:	f7fb f9a0 	bl	8002f08 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_PCD_MspInit+0xa8>)
 8007bce:	4907      	ldr	r1, [pc, #28]	; (8007bec <HAL_PCD_MspInit+0xac>)
 8007bd0:	400a      	ands	r2, r1
 8007bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8007bd4:	e001      	b.n	8007bda <HAL_PCD_MspInit+0x9a>
      HAL_PWREx_EnableVddUSB();
 8007bd6:	f7fb f997 	bl	8002f08 <HAL_PWREx_EnableVddUSB>
}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b019      	add	sp, #100	; 0x64
 8007be0:	bd90      	pop	{r4, r7, pc}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	40005c00 	.word	0x40005c00
 8007be8:	40021000 	.word	0x40021000
 8007bec:	efffffff 	.word	0xefffffff

08007bf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 8007bf8:	4a34      	ldr	r2, [pc, #208]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007bfa:	23c1      	movs	r3, #193	; 0xc1
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	23b2      	movs	r3, #178	; 0xb2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4930      	ldr	r1, [pc, #192]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c0a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8007c0c:	4b2f      	ldr	r3, [pc, #188]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c0e:	4a30      	ldr	r2, [pc, #192]	; (8007cd0 <USBD_LL_Init+0xe0>)
 8007c10:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8007c12:	4b2e      	ldr	r3, [pc, #184]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c14:	2208      	movs	r2, #8
 8007c16:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8007c18:	4b2c      	ldr	r3, [pc, #176]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c20:	2202      	movs	r2, #2
 8007c22:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c24:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c26:	2202      	movs	r2, #2
 8007c28:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8007c2a:	4b28      	ldr	r3, [pc, #160]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8007c30:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8007c36:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8007c3c:	4b23      	ldr	r3, [pc, #140]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8007c42:	4b22      	ldr	r3, [pc, #136]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8007c48:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8007c4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8007c54:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <USBD_LL_Init+0xdc>)
 8007c56:	0018      	movs	r0, r3
 8007c58:	f7fa fdd2 	bl	8002800 <HAL_PCD_Init>
 8007c5c:	1e03      	subs	r3, r0, #0
 8007c5e:	d001      	beq.n	8007c64 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8007c60:	f7f9 f952 	bl	8000f08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	23b2      	movs	r3, #178	; 0xb2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	58d0      	ldr	r0, [r2, r3]
 8007c6c:	2318      	movs	r3, #24
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	f7fb f8d7 	bl	8002e24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	23b2      	movs	r3, #178	; 0xb2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	58d0      	ldr	r0, [r2, r3]
 8007c7e:	2358      	movs	r3, #88	; 0x58
 8007c80:	2200      	movs	r2, #0
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	f7fb f8ce 	bl	8002e24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	23b2      	movs	r3, #178	; 0xb2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	58d0      	ldr	r0, [r2, r3]
 8007c90:	23c0      	movs	r3, #192	; 0xc0
 8007c92:	2200      	movs	r2, #0
 8007c94:	2181      	movs	r1, #129	; 0x81
 8007c96:	f7fb f8c5 	bl	8002e24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	23b2      	movs	r3, #178	; 0xb2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	58d0      	ldr	r0, [r2, r3]
 8007ca2:	2388      	movs	r3, #136	; 0x88
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2101      	movs	r1, #1
 8007caa:	f7fb f8bb 	bl	8002e24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	23b2      	movs	r3, #178	; 0xb2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	58d0      	ldr	r0, [r2, r3]
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2182      	movs	r1, #130	; 0x82
 8007cbe:	f7fb f8b1 	bl	8002e24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b002      	add	sp, #8
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	2000193c 	.word	0x2000193c
 8007cd0:	40005c00 	.word	0x40005c00

08007cd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cdc:	210f      	movs	r1, #15
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce4:	260e      	movs	r6, #14
 8007ce6:	19bb      	adds	r3, r7, r6
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	23b2      	movs	r3, #178	; 0xb2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	58d3      	ldr	r3, [r2, r3]
 8007cf4:	000d      	movs	r5, r1
 8007cf6:	187c      	adds	r4, r7, r1
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f7fa fe9b 	bl	8002a34 <HAL_PCD_Start>
 8007cfe:	0003      	movs	r3, r0
 8007d00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d02:	19bc      	adds	r4, r7, r6
 8007d04:	197b      	adds	r3, r7, r5
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 f91f 	bl	8007f4c <USBD_Get_USB_Status>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d12:	19bb      	adds	r3, r7, r6
 8007d14:	781b      	ldrb	r3, [r3, #0]
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b005      	add	sp, #20
 8007d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	000c      	movs	r4, r1
 8007d28:	0010      	movs	r0, r2
 8007d2a:	0019      	movs	r1, r3
 8007d2c:	1cfb      	adds	r3, r7, #3
 8007d2e:	1c22      	adds	r2, r4, #0
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	1cbb      	adds	r3, r7, #2
 8007d34:	1c02      	adds	r2, r0, #0
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	003b      	movs	r3, r7
 8007d3a:	1c0a      	adds	r2, r1, #0
 8007d3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d3e:	260f      	movs	r6, #15
 8007d40:	19bb      	adds	r3, r7, r6
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d46:	250e      	movs	r5, #14
 8007d48:	197b      	adds	r3, r7, r5
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	23b2      	movs	r3, #178	; 0xb2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	58d0      	ldr	r0, [r2, r3]
 8007d56:	19bc      	adds	r4, r7, r6
 8007d58:	1cbb      	adds	r3, r7, #2
 8007d5a:	781d      	ldrb	r5, [r3, #0]
 8007d5c:	003b      	movs	r3, r7
 8007d5e:	881a      	ldrh	r2, [r3, #0]
 8007d60:	1cfb      	adds	r3, r7, #3
 8007d62:	7819      	ldrb	r1, [r3, #0]
 8007d64:	002b      	movs	r3, r5
 8007d66:	f7fa fe8a 	bl	8002a7e <HAL_PCD_EP_Open>
 8007d6a:	0003      	movs	r3, r0
 8007d6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6e:	250e      	movs	r5, #14
 8007d70:	197c      	adds	r4, r7, r5
 8007d72:	19bb      	adds	r3, r7, r6
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f000 f8e8 	bl	8007f4c <USBD_Get_USB_Status>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d80:	197b      	adds	r3, r7, r5
 8007d82:	781b      	ldrb	r3, [r3, #0]
}
 8007d84:	0018      	movs	r0, r3
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b005      	add	sp, #20
 8007d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d8c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	000a      	movs	r2, r1
 8007d96:	1cfb      	adds	r3, r7, #3
 8007d98:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9a:	210f      	movs	r1, #15
 8007d9c:	187b      	adds	r3, r7, r1
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da2:	260e      	movs	r6, #14
 8007da4:	19bb      	adds	r3, r7, r6
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	23b2      	movs	r3, #178	; 0xb2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	58d2      	ldr	r2, [r2, r3]
 8007db2:	000d      	movs	r5, r1
 8007db4:	187c      	adds	r4, r7, r1
 8007db6:	1cfb      	adds	r3, r7, #3
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	0019      	movs	r1, r3
 8007dbc:	0010      	movs	r0, r2
 8007dbe:	f7fa fed8 	bl	8002b72 <HAL_PCD_EP_Close>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc6:	19bc      	adds	r4, r7, r6
 8007dc8:	197b      	adds	r3, r7, r5
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 f8bd 	bl	8007f4c <USBD_Get_USB_Status>
 8007dd2:	0003      	movs	r3, r0
 8007dd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007dd6:	19bb      	adds	r3, r7, r6
 8007dd8:	781b      	ldrb	r3, [r3, #0]
}
 8007dda:	0018      	movs	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b005      	add	sp, #20
 8007de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007de2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	000a      	movs	r2, r1
 8007dec:	1cfb      	adds	r3, r7, #3
 8007dee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df0:	210f      	movs	r1, #15
 8007df2:	187b      	adds	r3, r7, r1
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df8:	260e      	movs	r6, #14
 8007dfa:	19bb      	adds	r3, r7, r6
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	23b2      	movs	r3, #178	; 0xb2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	58d2      	ldr	r2, [r2, r3]
 8007e08:	000d      	movs	r5, r1
 8007e0a:	187c      	adds	r4, r7, r1
 8007e0c:	1cfb      	adds	r3, r7, #3
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	0019      	movs	r1, r3
 8007e12:	0010      	movs	r0, r2
 8007e14:	f7fa ffa8 	bl	8002d68 <HAL_PCD_EP_SetStall>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1c:	19bc      	adds	r4, r7, r6
 8007e1e:	197b      	adds	r3, r7, r5
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	0018      	movs	r0, r3
 8007e24:	f000 f892 	bl	8007f4c <USBD_Get_USB_Status>
 8007e28:	0003      	movs	r3, r0
 8007e2a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e2c:	19bb      	adds	r3, r7, r6
 8007e2e:	781b      	ldrb	r3, [r3, #0]
}
 8007e30:	0018      	movs	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b005      	add	sp, #20
 8007e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	230b      	movs	r3, #11
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	1c0a      	adds	r2, r1, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2617      	movs	r6, #23
 8007e4e:	19bb      	adds	r3, r7, r6
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e54:	2516      	movs	r5, #22
 8007e56:	197b      	adds	r3, r7, r5
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	23b2      	movs	r3, #178	; 0xb2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	58d0      	ldr	r0, [r2, r3]
 8007e64:	19bc      	adds	r4, r7, r6
 8007e66:	683d      	ldr	r5, [r7, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	230b      	movs	r3, #11
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	7819      	ldrb	r1, [r3, #0]
 8007e70:	002b      	movs	r3, r5
 8007e72:	f7fa ff2f 	bl	8002cd4 <HAL_PCD_EP_Transmit>
 8007e76:	0003      	movs	r3, r0
 8007e78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7a:	2516      	movs	r5, #22
 8007e7c:	197c      	adds	r4, r7, r5
 8007e7e:	19bb      	adds	r3, r7, r6
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	0018      	movs	r0, r3
 8007e84:	f000 f862 	bl	8007f4c <USBD_Get_USB_Status>
 8007e88:	0003      	movs	r3, r0
 8007e8a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e8c:	197b      	adds	r3, r7, r5
 8007e8e:	781b      	ldrb	r3, [r3, #0]
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b007      	add	sp, #28
 8007e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	230b      	movs	r3, #11
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	1c0a      	adds	r2, r1, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eac:	2617      	movs	r6, #23
 8007eae:	19bb      	adds	r3, r7, r6
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb4:	2516      	movs	r5, #22
 8007eb6:	197b      	adds	r3, r7, r5
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	23b2      	movs	r3, #178	; 0xb2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	58d0      	ldr	r0, [r2, r3]
 8007ec4:	19bc      	adds	r4, r7, r6
 8007ec6:	683d      	ldr	r5, [r7, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	230b      	movs	r3, #11
 8007ecc:	18fb      	adds	r3, r7, r3
 8007ece:	7819      	ldrb	r1, [r3, #0]
 8007ed0:	002b      	movs	r3, r5
 8007ed2:	f7fa fea1 	bl	8002c18 <HAL_PCD_EP_Receive>
 8007ed6:	0003      	movs	r3, r0
 8007ed8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eda:	2516      	movs	r5, #22
 8007edc:	197c      	adds	r4, r7, r5
 8007ede:	19bb      	adds	r3, r7, r6
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f000 f832 	bl	8007f4c <USBD_Get_USB_Status>
 8007ee8:	0003      	movs	r3, r0
 8007eea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007eec:	197b      	adds	r3, r7, r5
 8007eee:	781b      	ldrb	r3, [r3, #0]
}
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b007      	add	sp, #28
 8007ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ef8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	000a      	movs	r2, r1
 8007f02:	1cfb      	adds	r3, r7, #3
 8007f04:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	23b2      	movs	r3, #178	; 0xb2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	58d2      	ldr	r2, [r2, r3]
 8007f0e:	1cfb      	adds	r3, r7, #3
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	0019      	movs	r1, r3
 8007f14:	0010      	movs	r0, r2
 8007f16:	f7fa fec4 	bl	8002ca2 <HAL_PCD_EP_GetRxCount>
 8007f1a:	0003      	movs	r3, r0
}
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b002      	add	sp, #8
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <USBD_static_malloc+0x14>)
}
 8007f2e:	0018      	movs	r0, r3
 8007f30:	46bd      	mov	sp, r7
 8007f32:	b002      	add	sp, #8
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	20001c44 	.word	0x20001c44

08007f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b002      	add	sp, #8
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	0002      	movs	r2, r0
 8007f54:	1dfb      	adds	r3, r7, #7
 8007f56:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	230f      	movs	r3, #15
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007f60:	1dfb      	adds	r3, r7, #7
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d017      	beq.n	8007f98 <USBD_Get_USB_Status+0x4c>
 8007f68:	dc1b      	bgt.n	8007fa2 <USBD_Get_USB_Status+0x56>
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d00f      	beq.n	8007f8e <USBD_Get_USB_Status+0x42>
 8007f6e:	dc18      	bgt.n	8007fa2 <USBD_Get_USB_Status+0x56>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <USBD_Get_USB_Status+0x2e>
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d005      	beq.n	8007f84 <USBD_Get_USB_Status+0x38>
 8007f78:	e013      	b.n	8007fa2 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f7a:	230f      	movs	r3, #15
 8007f7c:	18fb      	adds	r3, r7, r3
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
    break;
 8007f82:	e013      	b.n	8007fac <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f84:	230f      	movs	r3, #15
 8007f86:	18fb      	adds	r3, r7, r3
 8007f88:	2203      	movs	r2, #3
 8007f8a:	701a      	strb	r2, [r3, #0]
    break;
 8007f8c:	e00e      	b.n	8007fac <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f8e:	230f      	movs	r3, #15
 8007f90:	18fb      	adds	r3, r7, r3
 8007f92:	2201      	movs	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]
    break;
 8007f96:	e009      	b.n	8007fac <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f98:	230f      	movs	r3, #15
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	701a      	strb	r2, [r3, #0]
    break;
 8007fa0:	e004      	b.n	8007fac <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007fa2:	230f      	movs	r3, #15
 8007fa4:	18fb      	adds	r3, r7, r3
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	701a      	strb	r2, [r3, #0]
    break;
 8007faa:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007fac:	230f      	movs	r3, #15
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
}
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b004      	add	sp, #16
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <__errno>:
 8007fbc:	4b01      	ldr	r3, [pc, #4]	; (8007fc4 <__errno+0x8>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	46c0      	nop			; (mov r8, r8)
 8007fc4:	20000104 	.word	0x20000104

08007fc8 <__libc_init_array>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	2600      	movs	r6, #0
 8007fcc:	4d0c      	ldr	r5, [pc, #48]	; (8008000 <__libc_init_array+0x38>)
 8007fce:	4c0d      	ldr	r4, [pc, #52]	; (8008004 <__libc_init_array+0x3c>)
 8007fd0:	1b64      	subs	r4, r4, r5
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	42a6      	cmp	r6, r4
 8007fd6:	d109      	bne.n	8007fec <__libc_init_array+0x24>
 8007fd8:	2600      	movs	r6, #0
 8007fda:	f000 fca3 	bl	8008924 <_init>
 8007fde:	4d0a      	ldr	r5, [pc, #40]	; (8008008 <__libc_init_array+0x40>)
 8007fe0:	4c0a      	ldr	r4, [pc, #40]	; (800800c <__libc_init_array+0x44>)
 8007fe2:	1b64      	subs	r4, r4, r5
 8007fe4:	10a4      	asrs	r4, r4, #2
 8007fe6:	42a6      	cmp	r6, r4
 8007fe8:	d105      	bne.n	8007ff6 <__libc_init_array+0x2e>
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	00b3      	lsls	r3, r6, #2
 8007fee:	58eb      	ldr	r3, [r5, r3]
 8007ff0:	4798      	blx	r3
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	e7ee      	b.n	8007fd4 <__libc_init_array+0xc>
 8007ff6:	00b3      	lsls	r3, r6, #2
 8007ff8:	58eb      	ldr	r3, [r5, r3]
 8007ffa:	4798      	blx	r3
 8007ffc:	3601      	adds	r6, #1
 8007ffe:	e7f2      	b.n	8007fe6 <__libc_init_array+0x1e>
 8008000:	08008d68 	.word	0x08008d68
 8008004:	08008d68 	.word	0x08008d68
 8008008:	08008d68 	.word	0x08008d68
 800800c:	08008d6c 	.word	0x08008d6c

08008010 <memset>:
 8008010:	0003      	movs	r3, r0
 8008012:	1882      	adds	r2, r0, r2
 8008014:	4293      	cmp	r3, r2
 8008016:	d100      	bne.n	800801a <memset+0xa>
 8008018:	4770      	bx	lr
 800801a:	7019      	strb	r1, [r3, #0]
 800801c:	3301      	adds	r3, #1
 800801e:	e7f9      	b.n	8008014 <memset+0x4>

08008020 <_vsniprintf_r>:
 8008020:	b530      	push	{r4, r5, lr}
 8008022:	0014      	movs	r4, r2
 8008024:	0005      	movs	r5, r0
 8008026:	001a      	movs	r2, r3
 8008028:	b09b      	sub	sp, #108	; 0x6c
 800802a:	2c00      	cmp	r4, #0
 800802c:	da05      	bge.n	800803a <_vsniprintf_r+0x1a>
 800802e:	238b      	movs	r3, #139	; 0x8b
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	2001      	movs	r0, #1
 8008034:	4240      	negs	r0, r0
 8008036:	b01b      	add	sp, #108	; 0x6c
 8008038:	bd30      	pop	{r4, r5, pc}
 800803a:	2382      	movs	r3, #130	; 0x82
 800803c:	4668      	mov	r0, sp
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	8183      	strh	r3, [r0, #12]
 8008042:	2300      	movs	r3, #0
 8008044:	9100      	str	r1, [sp, #0]
 8008046:	9104      	str	r1, [sp, #16]
 8008048:	429c      	cmp	r4, r3
 800804a:	d000      	beq.n	800804e <_vsniprintf_r+0x2e>
 800804c:	1e63      	subs	r3, r4, #1
 800804e:	9302      	str	r3, [sp, #8]
 8008050:	9305      	str	r3, [sp, #20]
 8008052:	2301      	movs	r3, #1
 8008054:	4669      	mov	r1, sp
 8008056:	425b      	negs	r3, r3
 8008058:	81cb      	strh	r3, [r1, #14]
 800805a:	0028      	movs	r0, r5
 800805c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800805e:	f000 f879 	bl	8008154 <_svfiprintf_r>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	da01      	bge.n	800806a <_vsniprintf_r+0x4a>
 8008066:	238b      	movs	r3, #139	; 0x8b
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	2c00      	cmp	r4, #0
 800806c:	d0e3      	beq.n	8008036 <_vsniprintf_r+0x16>
 800806e:	2300      	movs	r3, #0
 8008070:	9a00      	ldr	r2, [sp, #0]
 8008072:	7013      	strb	r3, [r2, #0]
 8008074:	e7df      	b.n	8008036 <_vsniprintf_r+0x16>
	...

08008078 <vsniprintf>:
 8008078:	b507      	push	{r0, r1, r2, lr}
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	0013      	movs	r3, r2
 800807e:	000a      	movs	r2, r1
 8008080:	0001      	movs	r1, r0
 8008082:	4802      	ldr	r0, [pc, #8]	; (800808c <vsniprintf+0x14>)
 8008084:	6800      	ldr	r0, [r0, #0]
 8008086:	f7ff ffcb 	bl	8008020 <_vsniprintf_r>
 800808a:	bd0e      	pop	{r1, r2, r3, pc}
 800808c:	20000104 	.word	0x20000104

08008090 <__ssputs_r>:
 8008090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008092:	688e      	ldr	r6, [r1, #8]
 8008094:	b085      	sub	sp, #20
 8008096:	0007      	movs	r7, r0
 8008098:	000c      	movs	r4, r1
 800809a:	9203      	str	r2, [sp, #12]
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	429e      	cmp	r6, r3
 80080a0:	d83c      	bhi.n	800811c <__ssputs_r+0x8c>
 80080a2:	2390      	movs	r3, #144	; 0x90
 80080a4:	898a      	ldrh	r2, [r1, #12]
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	421a      	tst	r2, r3
 80080aa:	d034      	beq.n	8008116 <__ssputs_r+0x86>
 80080ac:	6909      	ldr	r1, [r1, #16]
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	6960      	ldr	r0, [r4, #20]
 80080b2:	1a5b      	subs	r3, r3, r1
 80080b4:	9302      	str	r3, [sp, #8]
 80080b6:	2303      	movs	r3, #3
 80080b8:	4343      	muls	r3, r0
 80080ba:	0fdd      	lsrs	r5, r3, #31
 80080bc:	18ed      	adds	r5, r5, r3
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	9802      	ldr	r0, [sp, #8]
 80080c2:	3301      	adds	r3, #1
 80080c4:	181b      	adds	r3, r3, r0
 80080c6:	106d      	asrs	r5, r5, #1
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	d900      	bls.n	80080ce <__ssputs_r+0x3e>
 80080cc:	001d      	movs	r5, r3
 80080ce:	0553      	lsls	r3, r2, #21
 80080d0:	d532      	bpl.n	8008138 <__ssputs_r+0xa8>
 80080d2:	0029      	movs	r1, r5
 80080d4:	0038      	movs	r0, r7
 80080d6:	f000 fb53 	bl	8008780 <_malloc_r>
 80080da:	1e06      	subs	r6, r0, #0
 80080dc:	d109      	bne.n	80080f2 <__ssputs_r+0x62>
 80080de:	230c      	movs	r3, #12
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	2001      	movs	r0, #1
 80080e6:	89a2      	ldrh	r2, [r4, #12]
 80080e8:	4240      	negs	r0, r0
 80080ea:	4313      	orrs	r3, r2
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	b005      	add	sp, #20
 80080f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f2:	9a02      	ldr	r2, [sp, #8]
 80080f4:	6921      	ldr	r1, [r4, #16]
 80080f6:	f000 faba 	bl	800866e <memcpy>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	4a14      	ldr	r2, [pc, #80]	; (8008150 <__ssputs_r+0xc0>)
 80080fe:	401a      	ands	r2, r3
 8008100:	2380      	movs	r3, #128	; 0x80
 8008102:	4313      	orrs	r3, r2
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	9b02      	ldr	r3, [sp, #8]
 8008108:	6126      	str	r6, [r4, #16]
 800810a:	18f6      	adds	r6, r6, r3
 800810c:	6026      	str	r6, [r4, #0]
 800810e:	6165      	str	r5, [r4, #20]
 8008110:	9e01      	ldr	r6, [sp, #4]
 8008112:	1aed      	subs	r5, r5, r3
 8008114:	60a5      	str	r5, [r4, #8]
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	429e      	cmp	r6, r3
 800811a:	d900      	bls.n	800811e <__ssputs_r+0x8e>
 800811c:	9e01      	ldr	r6, [sp, #4]
 800811e:	0032      	movs	r2, r6
 8008120:	9903      	ldr	r1, [sp, #12]
 8008122:	6820      	ldr	r0, [r4, #0]
 8008124:	f000 faac 	bl	8008680 <memmove>
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	2000      	movs	r0, #0
 800812c:	1b9b      	subs	r3, r3, r6
 800812e:	60a3      	str	r3, [r4, #8]
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	199e      	adds	r6, r3, r6
 8008134:	6026      	str	r6, [r4, #0]
 8008136:	e7da      	b.n	80080ee <__ssputs_r+0x5e>
 8008138:	002a      	movs	r2, r5
 800813a:	0038      	movs	r0, r7
 800813c:	f000 fb96 	bl	800886c <_realloc_r>
 8008140:	1e06      	subs	r6, r0, #0
 8008142:	d1e0      	bne.n	8008106 <__ssputs_r+0x76>
 8008144:	0038      	movs	r0, r7
 8008146:	6921      	ldr	r1, [r4, #16]
 8008148:	f000 faae 	bl	80086a8 <_free_r>
 800814c:	e7c7      	b.n	80080de <__ssputs_r+0x4e>
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	fffffb7f 	.word	0xfffffb7f

08008154 <_svfiprintf_r>:
 8008154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008156:	b0a1      	sub	sp, #132	; 0x84
 8008158:	9003      	str	r0, [sp, #12]
 800815a:	001d      	movs	r5, r3
 800815c:	898b      	ldrh	r3, [r1, #12]
 800815e:	000f      	movs	r7, r1
 8008160:	0016      	movs	r6, r2
 8008162:	061b      	lsls	r3, r3, #24
 8008164:	d511      	bpl.n	800818a <_svfiprintf_r+0x36>
 8008166:	690b      	ldr	r3, [r1, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10e      	bne.n	800818a <_svfiprintf_r+0x36>
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	f000 fb07 	bl	8008780 <_malloc_r>
 8008172:	6038      	str	r0, [r7, #0]
 8008174:	6138      	str	r0, [r7, #16]
 8008176:	2800      	cmp	r0, #0
 8008178:	d105      	bne.n	8008186 <_svfiprintf_r+0x32>
 800817a:	230c      	movs	r3, #12
 800817c:	9a03      	ldr	r2, [sp, #12]
 800817e:	3801      	subs	r0, #1
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	b021      	add	sp, #132	; 0x84
 8008184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008186:	2340      	movs	r3, #64	; 0x40
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	2300      	movs	r3, #0
 800818c:	ac08      	add	r4, sp, #32
 800818e:	6163      	str	r3, [r4, #20]
 8008190:	3320      	adds	r3, #32
 8008192:	7663      	strb	r3, [r4, #25]
 8008194:	3310      	adds	r3, #16
 8008196:	76a3      	strb	r3, [r4, #26]
 8008198:	9507      	str	r5, [sp, #28]
 800819a:	0035      	movs	r5, r6
 800819c:	782b      	ldrb	r3, [r5, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <_svfiprintf_r+0x52>
 80081a2:	2b25      	cmp	r3, #37	; 0x25
 80081a4:	d147      	bne.n	8008236 <_svfiprintf_r+0xe2>
 80081a6:	1bab      	subs	r3, r5, r6
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	42b5      	cmp	r5, r6
 80081ac:	d00c      	beq.n	80081c8 <_svfiprintf_r+0x74>
 80081ae:	0032      	movs	r2, r6
 80081b0:	0039      	movs	r1, r7
 80081b2:	9803      	ldr	r0, [sp, #12]
 80081b4:	f7ff ff6c 	bl	8008090 <__ssputs_r>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d100      	bne.n	80081be <_svfiprintf_r+0x6a>
 80081bc:	e0ae      	b.n	800831c <_svfiprintf_r+0x1c8>
 80081be:	6962      	ldr	r2, [r4, #20]
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	4694      	mov	ip, r2
 80081c4:	4463      	add	r3, ip
 80081c6:	6163      	str	r3, [r4, #20]
 80081c8:	782b      	ldrb	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d100      	bne.n	80081d0 <_svfiprintf_r+0x7c>
 80081ce:	e0a5      	b.n	800831c <_svfiprintf_r+0x1c8>
 80081d0:	2201      	movs	r2, #1
 80081d2:	2300      	movs	r3, #0
 80081d4:	4252      	negs	r2, r2
 80081d6:	6062      	str	r2, [r4, #4]
 80081d8:	a904      	add	r1, sp, #16
 80081da:	3254      	adds	r2, #84	; 0x54
 80081dc:	1852      	adds	r2, r2, r1
 80081de:	1c6e      	adds	r6, r5, #1
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	60e3      	str	r3, [r4, #12]
 80081e4:	60a3      	str	r3, [r4, #8]
 80081e6:	7013      	strb	r3, [r2, #0]
 80081e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80081ea:	2205      	movs	r2, #5
 80081ec:	7831      	ldrb	r1, [r6, #0]
 80081ee:	4854      	ldr	r0, [pc, #336]	; (8008340 <_svfiprintf_r+0x1ec>)
 80081f0:	f000 fa32 	bl	8008658 <memchr>
 80081f4:	1c75      	adds	r5, r6, #1
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d11f      	bne.n	800823a <_svfiprintf_r+0xe6>
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	06d3      	lsls	r3, r2, #27
 80081fe:	d504      	bpl.n	800820a <_svfiprintf_r+0xb6>
 8008200:	2353      	movs	r3, #83	; 0x53
 8008202:	a904      	add	r1, sp, #16
 8008204:	185b      	adds	r3, r3, r1
 8008206:	2120      	movs	r1, #32
 8008208:	7019      	strb	r1, [r3, #0]
 800820a:	0713      	lsls	r3, r2, #28
 800820c:	d504      	bpl.n	8008218 <_svfiprintf_r+0xc4>
 800820e:	2353      	movs	r3, #83	; 0x53
 8008210:	a904      	add	r1, sp, #16
 8008212:	185b      	adds	r3, r3, r1
 8008214:	212b      	movs	r1, #43	; 0x2b
 8008216:	7019      	strb	r1, [r3, #0]
 8008218:	7833      	ldrb	r3, [r6, #0]
 800821a:	2b2a      	cmp	r3, #42	; 0x2a
 800821c:	d016      	beq.n	800824c <_svfiprintf_r+0xf8>
 800821e:	0035      	movs	r5, r6
 8008220:	2100      	movs	r1, #0
 8008222:	200a      	movs	r0, #10
 8008224:	68e3      	ldr	r3, [r4, #12]
 8008226:	782a      	ldrb	r2, [r5, #0]
 8008228:	1c6e      	adds	r6, r5, #1
 800822a:	3a30      	subs	r2, #48	; 0x30
 800822c:	2a09      	cmp	r2, #9
 800822e:	d94e      	bls.n	80082ce <_svfiprintf_r+0x17a>
 8008230:	2900      	cmp	r1, #0
 8008232:	d111      	bne.n	8008258 <_svfiprintf_r+0x104>
 8008234:	e017      	b.n	8008266 <_svfiprintf_r+0x112>
 8008236:	3501      	adds	r5, #1
 8008238:	e7b0      	b.n	800819c <_svfiprintf_r+0x48>
 800823a:	4b41      	ldr	r3, [pc, #260]	; (8008340 <_svfiprintf_r+0x1ec>)
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	1ac0      	subs	r0, r0, r3
 8008240:	2301      	movs	r3, #1
 8008242:	4083      	lsls	r3, r0
 8008244:	4313      	orrs	r3, r2
 8008246:	002e      	movs	r6, r5
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	e7ce      	b.n	80081ea <_svfiprintf_r+0x96>
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9107      	str	r1, [sp, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	db01      	blt.n	800825c <_svfiprintf_r+0x108>
 8008258:	930b      	str	r3, [sp, #44]	; 0x2c
 800825a:	e004      	b.n	8008266 <_svfiprintf_r+0x112>
 800825c:	425b      	negs	r3, r3
 800825e:	60e3      	str	r3, [r4, #12]
 8008260:	2302      	movs	r3, #2
 8008262:	4313      	orrs	r3, r2
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	782b      	ldrb	r3, [r5, #0]
 8008268:	2b2e      	cmp	r3, #46	; 0x2e
 800826a:	d10a      	bne.n	8008282 <_svfiprintf_r+0x12e>
 800826c:	786b      	ldrb	r3, [r5, #1]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d135      	bne.n	80082de <_svfiprintf_r+0x18a>
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	3502      	adds	r5, #2
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	9207      	str	r2, [sp, #28]
 800827c:	2b00      	cmp	r3, #0
 800827e:	db2b      	blt.n	80082d8 <_svfiprintf_r+0x184>
 8008280:	9309      	str	r3, [sp, #36]	; 0x24
 8008282:	4e30      	ldr	r6, [pc, #192]	; (8008344 <_svfiprintf_r+0x1f0>)
 8008284:	2203      	movs	r2, #3
 8008286:	0030      	movs	r0, r6
 8008288:	7829      	ldrb	r1, [r5, #0]
 800828a:	f000 f9e5 	bl	8008658 <memchr>
 800828e:	2800      	cmp	r0, #0
 8008290:	d006      	beq.n	80082a0 <_svfiprintf_r+0x14c>
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	1b80      	subs	r0, r0, r6
 8008296:	4083      	lsls	r3, r0
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	3501      	adds	r5, #1
 800829c:	4313      	orrs	r3, r2
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	7829      	ldrb	r1, [r5, #0]
 80082a2:	2206      	movs	r2, #6
 80082a4:	4828      	ldr	r0, [pc, #160]	; (8008348 <_svfiprintf_r+0x1f4>)
 80082a6:	1c6e      	adds	r6, r5, #1
 80082a8:	7621      	strb	r1, [r4, #24]
 80082aa:	f000 f9d5 	bl	8008658 <memchr>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d03c      	beq.n	800832c <_svfiprintf_r+0x1d8>
 80082b2:	4b26      	ldr	r3, [pc, #152]	; (800834c <_svfiprintf_r+0x1f8>)
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d125      	bne.n	8008304 <_svfiprintf_r+0x1b0>
 80082b8:	2207      	movs	r2, #7
 80082ba:	9b07      	ldr	r3, [sp, #28]
 80082bc:	3307      	adds	r3, #7
 80082be:	4393      	bics	r3, r2
 80082c0:	3308      	adds	r3, #8
 80082c2:	9307      	str	r3, [sp, #28]
 80082c4:	6963      	ldr	r3, [r4, #20]
 80082c6:	9a04      	ldr	r2, [sp, #16]
 80082c8:	189b      	adds	r3, r3, r2
 80082ca:	6163      	str	r3, [r4, #20]
 80082cc:	e765      	b.n	800819a <_svfiprintf_r+0x46>
 80082ce:	4343      	muls	r3, r0
 80082d0:	0035      	movs	r5, r6
 80082d2:	2101      	movs	r1, #1
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	e7a6      	b.n	8008226 <_svfiprintf_r+0xd2>
 80082d8:	2301      	movs	r3, #1
 80082da:	425b      	negs	r3, r3
 80082dc:	e7d0      	b.n	8008280 <_svfiprintf_r+0x12c>
 80082de:	2300      	movs	r3, #0
 80082e0:	200a      	movs	r0, #10
 80082e2:	001a      	movs	r2, r3
 80082e4:	3501      	adds	r5, #1
 80082e6:	6063      	str	r3, [r4, #4]
 80082e8:	7829      	ldrb	r1, [r5, #0]
 80082ea:	1c6e      	adds	r6, r5, #1
 80082ec:	3930      	subs	r1, #48	; 0x30
 80082ee:	2909      	cmp	r1, #9
 80082f0:	d903      	bls.n	80082fa <_svfiprintf_r+0x1a6>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0c5      	beq.n	8008282 <_svfiprintf_r+0x12e>
 80082f6:	9209      	str	r2, [sp, #36]	; 0x24
 80082f8:	e7c3      	b.n	8008282 <_svfiprintf_r+0x12e>
 80082fa:	4342      	muls	r2, r0
 80082fc:	0035      	movs	r5, r6
 80082fe:	2301      	movs	r3, #1
 8008300:	1852      	adds	r2, r2, r1
 8008302:	e7f1      	b.n	80082e8 <_svfiprintf_r+0x194>
 8008304:	ab07      	add	r3, sp, #28
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	003a      	movs	r2, r7
 800830a:	0021      	movs	r1, r4
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <_svfiprintf_r+0x1fc>)
 800830e:	9803      	ldr	r0, [sp, #12]
 8008310:	e000      	b.n	8008314 <_svfiprintf_r+0x1c0>
 8008312:	bf00      	nop
 8008314:	9004      	str	r0, [sp, #16]
 8008316:	9b04      	ldr	r3, [sp, #16]
 8008318:	3301      	adds	r3, #1
 800831a:	d1d3      	bne.n	80082c4 <_svfiprintf_r+0x170>
 800831c:	89bb      	ldrh	r3, [r7, #12]
 800831e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008320:	065b      	lsls	r3, r3, #25
 8008322:	d400      	bmi.n	8008326 <_svfiprintf_r+0x1d2>
 8008324:	e72d      	b.n	8008182 <_svfiprintf_r+0x2e>
 8008326:	2001      	movs	r0, #1
 8008328:	4240      	negs	r0, r0
 800832a:	e72a      	b.n	8008182 <_svfiprintf_r+0x2e>
 800832c:	ab07      	add	r3, sp, #28
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	003a      	movs	r2, r7
 8008332:	0021      	movs	r1, r4
 8008334:	4b06      	ldr	r3, [pc, #24]	; (8008350 <_svfiprintf_r+0x1fc>)
 8008336:	9803      	ldr	r0, [sp, #12]
 8008338:	f000 f87c 	bl	8008434 <_printf_i>
 800833c:	e7ea      	b.n	8008314 <_svfiprintf_r+0x1c0>
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	08008d2c 	.word	0x08008d2c
 8008344:	08008d32 	.word	0x08008d32
 8008348:	08008d36 	.word	0x08008d36
 800834c:	00000000 	.word	0x00000000
 8008350:	08008091 	.word	0x08008091

08008354 <_printf_common>:
 8008354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008356:	0015      	movs	r5, r2
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	688a      	ldr	r2, [r1, #8]
 800835c:	690b      	ldr	r3, [r1, #16]
 800835e:	000c      	movs	r4, r1
 8008360:	9000      	str	r0, [sp, #0]
 8008362:	4293      	cmp	r3, r2
 8008364:	da00      	bge.n	8008368 <_printf_common+0x14>
 8008366:	0013      	movs	r3, r2
 8008368:	0022      	movs	r2, r4
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	3243      	adds	r2, #67	; 0x43
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	2a00      	cmp	r2, #0
 8008372:	d001      	beq.n	8008378 <_printf_common+0x24>
 8008374:	3301      	adds	r3, #1
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	069b      	lsls	r3, r3, #26
 800837c:	d502      	bpl.n	8008384 <_printf_common+0x30>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	3302      	adds	r3, #2
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	2306      	movs	r3, #6
 8008388:	0017      	movs	r7, r2
 800838a:	401f      	ands	r7, r3
 800838c:	421a      	tst	r2, r3
 800838e:	d027      	beq.n	80083e0 <_printf_common+0x8c>
 8008390:	0023      	movs	r3, r4
 8008392:	3343      	adds	r3, #67	; 0x43
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	1e5a      	subs	r2, r3, #1
 8008398:	4193      	sbcs	r3, r2
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	0692      	lsls	r2, r2, #26
 800839e:	d430      	bmi.n	8008402 <_printf_common+0xae>
 80083a0:	0022      	movs	r2, r4
 80083a2:	9901      	ldr	r1, [sp, #4]
 80083a4:	9800      	ldr	r0, [sp, #0]
 80083a6:	9e08      	ldr	r6, [sp, #32]
 80083a8:	3243      	adds	r2, #67	; 0x43
 80083aa:	47b0      	blx	r6
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d025      	beq.n	80083fc <_printf_common+0xa8>
 80083b0:	2306      	movs	r3, #6
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	682a      	ldr	r2, [r5, #0]
 80083b6:	68e1      	ldr	r1, [r4, #12]
 80083b8:	2500      	movs	r5, #0
 80083ba:	4003      	ands	r3, r0
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d103      	bne.n	80083c8 <_printf_common+0x74>
 80083c0:	1a8d      	subs	r5, r1, r2
 80083c2:	43eb      	mvns	r3, r5
 80083c4:	17db      	asrs	r3, r3, #31
 80083c6:	401d      	ands	r5, r3
 80083c8:	68a3      	ldr	r3, [r4, #8]
 80083ca:	6922      	ldr	r2, [r4, #16]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	dd01      	ble.n	80083d4 <_printf_common+0x80>
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	18ed      	adds	r5, r5, r3
 80083d4:	2700      	movs	r7, #0
 80083d6:	42bd      	cmp	r5, r7
 80083d8:	d120      	bne.n	800841c <_printf_common+0xc8>
 80083da:	2000      	movs	r0, #0
 80083dc:	e010      	b.n	8008400 <_printf_common+0xac>
 80083de:	3701      	adds	r7, #1
 80083e0:	68e3      	ldr	r3, [r4, #12]
 80083e2:	682a      	ldr	r2, [r5, #0]
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	ddd2      	ble.n	8008390 <_printf_common+0x3c>
 80083ea:	0022      	movs	r2, r4
 80083ec:	2301      	movs	r3, #1
 80083ee:	9901      	ldr	r1, [sp, #4]
 80083f0:	9800      	ldr	r0, [sp, #0]
 80083f2:	9e08      	ldr	r6, [sp, #32]
 80083f4:	3219      	adds	r2, #25
 80083f6:	47b0      	blx	r6
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d1f0      	bne.n	80083de <_printf_common+0x8a>
 80083fc:	2001      	movs	r0, #1
 80083fe:	4240      	negs	r0, r0
 8008400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008402:	2030      	movs	r0, #48	; 0x30
 8008404:	18e1      	adds	r1, r4, r3
 8008406:	3143      	adds	r1, #67	; 0x43
 8008408:	7008      	strb	r0, [r1, #0]
 800840a:	0021      	movs	r1, r4
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	3145      	adds	r1, #69	; 0x45
 8008410:	7809      	ldrb	r1, [r1, #0]
 8008412:	18a2      	adds	r2, r4, r2
 8008414:	3243      	adds	r2, #67	; 0x43
 8008416:	3302      	adds	r3, #2
 8008418:	7011      	strb	r1, [r2, #0]
 800841a:	e7c1      	b.n	80083a0 <_printf_common+0x4c>
 800841c:	0022      	movs	r2, r4
 800841e:	2301      	movs	r3, #1
 8008420:	9901      	ldr	r1, [sp, #4]
 8008422:	9800      	ldr	r0, [sp, #0]
 8008424:	9e08      	ldr	r6, [sp, #32]
 8008426:	321a      	adds	r2, #26
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d0e6      	beq.n	80083fc <_printf_common+0xa8>
 800842e:	3701      	adds	r7, #1
 8008430:	e7d1      	b.n	80083d6 <_printf_common+0x82>
	...

08008434 <_printf_i>:
 8008434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008436:	b08b      	sub	sp, #44	; 0x2c
 8008438:	9206      	str	r2, [sp, #24]
 800843a:	000a      	movs	r2, r1
 800843c:	3243      	adds	r2, #67	; 0x43
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	9005      	str	r0, [sp, #20]
 8008442:	9204      	str	r2, [sp, #16]
 8008444:	7e0a      	ldrb	r2, [r1, #24]
 8008446:	000c      	movs	r4, r1
 8008448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800844a:	2a78      	cmp	r2, #120	; 0x78
 800844c:	d807      	bhi.n	800845e <_printf_i+0x2a>
 800844e:	2a62      	cmp	r2, #98	; 0x62
 8008450:	d809      	bhi.n	8008466 <_printf_i+0x32>
 8008452:	2a00      	cmp	r2, #0
 8008454:	d100      	bne.n	8008458 <_printf_i+0x24>
 8008456:	e0c1      	b.n	80085dc <_printf_i+0x1a8>
 8008458:	2a58      	cmp	r2, #88	; 0x58
 800845a:	d100      	bne.n	800845e <_printf_i+0x2a>
 800845c:	e08c      	b.n	8008578 <_printf_i+0x144>
 800845e:	0026      	movs	r6, r4
 8008460:	3642      	adds	r6, #66	; 0x42
 8008462:	7032      	strb	r2, [r6, #0]
 8008464:	e022      	b.n	80084ac <_printf_i+0x78>
 8008466:	0010      	movs	r0, r2
 8008468:	3863      	subs	r0, #99	; 0x63
 800846a:	2815      	cmp	r0, #21
 800846c:	d8f7      	bhi.n	800845e <_printf_i+0x2a>
 800846e:	f7f7 fe51 	bl	8000114 <__gnu_thumb1_case_shi>
 8008472:	0016      	.short	0x0016
 8008474:	fff6001f 	.word	0xfff6001f
 8008478:	fff6fff6 	.word	0xfff6fff6
 800847c:	001ffff6 	.word	0x001ffff6
 8008480:	fff6fff6 	.word	0xfff6fff6
 8008484:	fff6fff6 	.word	0xfff6fff6
 8008488:	003600a8 	.word	0x003600a8
 800848c:	fff6009a 	.word	0xfff6009a
 8008490:	00b9fff6 	.word	0x00b9fff6
 8008494:	0036fff6 	.word	0x0036fff6
 8008498:	fff6fff6 	.word	0xfff6fff6
 800849c:	009e      	.short	0x009e
 800849e:	0026      	movs	r6, r4
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	3642      	adds	r6, #66	; 0x42
 80084a4:	1d11      	adds	r1, r2, #4
 80084a6:	6019      	str	r1, [r3, #0]
 80084a8:	6813      	ldr	r3, [r2, #0]
 80084aa:	7033      	strb	r3, [r6, #0]
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0a7      	b.n	8008600 <_printf_i+0x1cc>
 80084b0:	6808      	ldr	r0, [r1, #0]
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	1d0a      	adds	r2, r1, #4
 80084b6:	0605      	lsls	r5, r0, #24
 80084b8:	d50b      	bpl.n	80084d2 <_printf_i+0x9e>
 80084ba:	680d      	ldr	r5, [r1, #0]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	2d00      	cmp	r5, #0
 80084c0:	da03      	bge.n	80084ca <_printf_i+0x96>
 80084c2:	232d      	movs	r3, #45	; 0x2d
 80084c4:	9a04      	ldr	r2, [sp, #16]
 80084c6:	426d      	negs	r5, r5
 80084c8:	7013      	strb	r3, [r2, #0]
 80084ca:	4b61      	ldr	r3, [pc, #388]	; (8008650 <_printf_i+0x21c>)
 80084cc:	270a      	movs	r7, #10
 80084ce:	9303      	str	r3, [sp, #12]
 80084d0:	e01b      	b.n	800850a <_printf_i+0xd6>
 80084d2:	680d      	ldr	r5, [r1, #0]
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	0641      	lsls	r1, r0, #25
 80084d8:	d5f1      	bpl.n	80084be <_printf_i+0x8a>
 80084da:	b22d      	sxth	r5, r5
 80084dc:	e7ef      	b.n	80084be <_printf_i+0x8a>
 80084de:	680d      	ldr	r5, [r1, #0]
 80084e0:	6819      	ldr	r1, [r3, #0]
 80084e2:	1d08      	adds	r0, r1, #4
 80084e4:	6018      	str	r0, [r3, #0]
 80084e6:	062e      	lsls	r6, r5, #24
 80084e8:	d501      	bpl.n	80084ee <_printf_i+0xba>
 80084ea:	680d      	ldr	r5, [r1, #0]
 80084ec:	e003      	b.n	80084f6 <_printf_i+0xc2>
 80084ee:	066d      	lsls	r5, r5, #25
 80084f0:	d5fb      	bpl.n	80084ea <_printf_i+0xb6>
 80084f2:	680d      	ldr	r5, [r1, #0]
 80084f4:	b2ad      	uxth	r5, r5
 80084f6:	4b56      	ldr	r3, [pc, #344]	; (8008650 <_printf_i+0x21c>)
 80084f8:	2708      	movs	r7, #8
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	2a6f      	cmp	r2, #111	; 0x6f
 80084fe:	d000      	beq.n	8008502 <_printf_i+0xce>
 8008500:	3702      	adds	r7, #2
 8008502:	0023      	movs	r3, r4
 8008504:	2200      	movs	r2, #0
 8008506:	3343      	adds	r3, #67	; 0x43
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	6863      	ldr	r3, [r4, #4]
 800850c:	60a3      	str	r3, [r4, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	db03      	blt.n	800851a <_printf_i+0xe6>
 8008512:	2204      	movs	r2, #4
 8008514:	6821      	ldr	r1, [r4, #0]
 8008516:	4391      	bics	r1, r2
 8008518:	6021      	str	r1, [r4, #0]
 800851a:	2d00      	cmp	r5, #0
 800851c:	d102      	bne.n	8008524 <_printf_i+0xf0>
 800851e:	9e04      	ldr	r6, [sp, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <_printf_i+0x10a>
 8008524:	9e04      	ldr	r6, [sp, #16]
 8008526:	0028      	movs	r0, r5
 8008528:	0039      	movs	r1, r7
 800852a:	f7f7 fe83 	bl	8000234 <__aeabi_uidivmod>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	3e01      	subs	r6, #1
 8008532:	5c5b      	ldrb	r3, [r3, r1]
 8008534:	7033      	strb	r3, [r6, #0]
 8008536:	002b      	movs	r3, r5
 8008538:	0005      	movs	r5, r0
 800853a:	429f      	cmp	r7, r3
 800853c:	d9f3      	bls.n	8008526 <_printf_i+0xf2>
 800853e:	2f08      	cmp	r7, #8
 8008540:	d109      	bne.n	8008556 <_printf_i+0x122>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	07db      	lsls	r3, r3, #31
 8008546:	d506      	bpl.n	8008556 <_printf_i+0x122>
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	6922      	ldr	r2, [r4, #16]
 800854c:	4293      	cmp	r3, r2
 800854e:	dc02      	bgt.n	8008556 <_printf_i+0x122>
 8008550:	2330      	movs	r3, #48	; 0x30
 8008552:	3e01      	subs	r6, #1
 8008554:	7033      	strb	r3, [r6, #0]
 8008556:	9b04      	ldr	r3, [sp, #16]
 8008558:	1b9b      	subs	r3, r3, r6
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	0021      	movs	r1, r4
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	9805      	ldr	r0, [sp, #20]
 8008564:	9b06      	ldr	r3, [sp, #24]
 8008566:	aa09      	add	r2, sp, #36	; 0x24
 8008568:	f7ff fef4 	bl	8008354 <_printf_common>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d14c      	bne.n	800860a <_printf_i+0x1d6>
 8008570:	2001      	movs	r0, #1
 8008572:	4240      	negs	r0, r0
 8008574:	b00b      	add	sp, #44	; 0x2c
 8008576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008578:	3145      	adds	r1, #69	; 0x45
 800857a:	700a      	strb	r2, [r1, #0]
 800857c:	4a34      	ldr	r2, [pc, #208]	; (8008650 <_printf_i+0x21c>)
 800857e:	9203      	str	r2, [sp, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	6821      	ldr	r1, [r4, #0]
 8008584:	ca20      	ldmia	r2!, {r5}
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	0608      	lsls	r0, r1, #24
 800858a:	d516      	bpl.n	80085ba <_printf_i+0x186>
 800858c:	07cb      	lsls	r3, r1, #31
 800858e:	d502      	bpl.n	8008596 <_printf_i+0x162>
 8008590:	2320      	movs	r3, #32
 8008592:	4319      	orrs	r1, r3
 8008594:	6021      	str	r1, [r4, #0]
 8008596:	2710      	movs	r7, #16
 8008598:	2d00      	cmp	r5, #0
 800859a:	d1b2      	bne.n	8008502 <_printf_i+0xce>
 800859c:	2320      	movs	r3, #32
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	439a      	bics	r2, r3
 80085a2:	6022      	str	r2, [r4, #0]
 80085a4:	e7ad      	b.n	8008502 <_printf_i+0xce>
 80085a6:	2220      	movs	r2, #32
 80085a8:	6809      	ldr	r1, [r1, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	6022      	str	r2, [r4, #0]
 80085ae:	0022      	movs	r2, r4
 80085b0:	2178      	movs	r1, #120	; 0x78
 80085b2:	3245      	adds	r2, #69	; 0x45
 80085b4:	7011      	strb	r1, [r2, #0]
 80085b6:	4a27      	ldr	r2, [pc, #156]	; (8008654 <_printf_i+0x220>)
 80085b8:	e7e1      	b.n	800857e <_printf_i+0x14a>
 80085ba:	0648      	lsls	r0, r1, #25
 80085bc:	d5e6      	bpl.n	800858c <_printf_i+0x158>
 80085be:	b2ad      	uxth	r5, r5
 80085c0:	e7e4      	b.n	800858c <_printf_i+0x158>
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	680d      	ldr	r5, [r1, #0]
 80085c6:	1d10      	adds	r0, r2, #4
 80085c8:	6949      	ldr	r1, [r1, #20]
 80085ca:	6018      	str	r0, [r3, #0]
 80085cc:	6813      	ldr	r3, [r2, #0]
 80085ce:	062e      	lsls	r6, r5, #24
 80085d0:	d501      	bpl.n	80085d6 <_printf_i+0x1a2>
 80085d2:	6019      	str	r1, [r3, #0]
 80085d4:	e002      	b.n	80085dc <_printf_i+0x1a8>
 80085d6:	066d      	lsls	r5, r5, #25
 80085d8:	d5fb      	bpl.n	80085d2 <_printf_i+0x19e>
 80085da:	8019      	strh	r1, [r3, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	9e04      	ldr	r6, [sp, #16]
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	e7bb      	b.n	800855c <_printf_i+0x128>
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	1d11      	adds	r1, r2, #4
 80085e8:	6019      	str	r1, [r3, #0]
 80085ea:	6816      	ldr	r6, [r2, #0]
 80085ec:	2100      	movs	r1, #0
 80085ee:	0030      	movs	r0, r6
 80085f0:	6862      	ldr	r2, [r4, #4]
 80085f2:	f000 f831 	bl	8008658 <memchr>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d001      	beq.n	80085fe <_printf_i+0x1ca>
 80085fa:	1b80      	subs	r0, r0, r6
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2300      	movs	r3, #0
 8008604:	9a04      	ldr	r2, [sp, #16]
 8008606:	7013      	strb	r3, [r2, #0]
 8008608:	e7a8      	b.n	800855c <_printf_i+0x128>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	0032      	movs	r2, r6
 800860e:	9906      	ldr	r1, [sp, #24]
 8008610:	9805      	ldr	r0, [sp, #20]
 8008612:	9d07      	ldr	r5, [sp, #28]
 8008614:	47a8      	blx	r5
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d0aa      	beq.n	8008570 <_printf_i+0x13c>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	079b      	lsls	r3, r3, #30
 800861e:	d415      	bmi.n	800864c <_printf_i+0x218>
 8008620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008622:	68e0      	ldr	r0, [r4, #12]
 8008624:	4298      	cmp	r0, r3
 8008626:	daa5      	bge.n	8008574 <_printf_i+0x140>
 8008628:	0018      	movs	r0, r3
 800862a:	e7a3      	b.n	8008574 <_printf_i+0x140>
 800862c:	0022      	movs	r2, r4
 800862e:	2301      	movs	r3, #1
 8008630:	9906      	ldr	r1, [sp, #24]
 8008632:	9805      	ldr	r0, [sp, #20]
 8008634:	9e07      	ldr	r6, [sp, #28]
 8008636:	3219      	adds	r2, #25
 8008638:	47b0      	blx	r6
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d098      	beq.n	8008570 <_printf_i+0x13c>
 800863e:	3501      	adds	r5, #1
 8008640:	68e3      	ldr	r3, [r4, #12]
 8008642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	42ab      	cmp	r3, r5
 8008648:	dcf0      	bgt.n	800862c <_printf_i+0x1f8>
 800864a:	e7e9      	b.n	8008620 <_printf_i+0x1ec>
 800864c:	2500      	movs	r5, #0
 800864e:	e7f7      	b.n	8008640 <_printf_i+0x20c>
 8008650:	08008d3d 	.word	0x08008d3d
 8008654:	08008d4e 	.word	0x08008d4e

08008658 <memchr>:
 8008658:	b2c9      	uxtb	r1, r1
 800865a:	1882      	adds	r2, r0, r2
 800865c:	4290      	cmp	r0, r2
 800865e:	d101      	bne.n	8008664 <memchr+0xc>
 8008660:	2000      	movs	r0, #0
 8008662:	4770      	bx	lr
 8008664:	7803      	ldrb	r3, [r0, #0]
 8008666:	428b      	cmp	r3, r1
 8008668:	d0fb      	beq.n	8008662 <memchr+0xa>
 800866a:	3001      	adds	r0, #1
 800866c:	e7f6      	b.n	800865c <memchr+0x4>

0800866e <memcpy>:
 800866e:	2300      	movs	r3, #0
 8008670:	b510      	push	{r4, lr}
 8008672:	429a      	cmp	r2, r3
 8008674:	d100      	bne.n	8008678 <memcpy+0xa>
 8008676:	bd10      	pop	{r4, pc}
 8008678:	5ccc      	ldrb	r4, [r1, r3]
 800867a:	54c4      	strb	r4, [r0, r3]
 800867c:	3301      	adds	r3, #1
 800867e:	e7f8      	b.n	8008672 <memcpy+0x4>

08008680 <memmove>:
 8008680:	b510      	push	{r4, lr}
 8008682:	4288      	cmp	r0, r1
 8008684:	d902      	bls.n	800868c <memmove+0xc>
 8008686:	188b      	adds	r3, r1, r2
 8008688:	4298      	cmp	r0, r3
 800868a:	d303      	bcc.n	8008694 <memmove+0x14>
 800868c:	2300      	movs	r3, #0
 800868e:	e007      	b.n	80086a0 <memmove+0x20>
 8008690:	5c8b      	ldrb	r3, [r1, r2]
 8008692:	5483      	strb	r3, [r0, r2]
 8008694:	3a01      	subs	r2, #1
 8008696:	d2fb      	bcs.n	8008690 <memmove+0x10>
 8008698:	bd10      	pop	{r4, pc}
 800869a:	5ccc      	ldrb	r4, [r1, r3]
 800869c:	54c4      	strb	r4, [r0, r3]
 800869e:	3301      	adds	r3, #1
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d1fa      	bne.n	800869a <memmove+0x1a>
 80086a4:	e7f8      	b.n	8008698 <memmove+0x18>
	...

080086a8 <_free_r>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	0005      	movs	r5, r0
 80086ac:	2900      	cmp	r1, #0
 80086ae:	d010      	beq.n	80086d2 <_free_r+0x2a>
 80086b0:	1f0c      	subs	r4, r1, #4
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da00      	bge.n	80086ba <_free_r+0x12>
 80086b8:	18e4      	adds	r4, r4, r3
 80086ba:	0028      	movs	r0, r5
 80086bc:	f000 f918 	bl	80088f0 <__malloc_lock>
 80086c0:	4a1d      	ldr	r2, [pc, #116]	; (8008738 <_free_r+0x90>)
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <_free_r+0x2c>
 80086c8:	6063      	str	r3, [r4, #4]
 80086ca:	6014      	str	r4, [r2, #0]
 80086cc:	0028      	movs	r0, r5
 80086ce:	f000 f917 	bl	8008900 <__malloc_unlock>
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d908      	bls.n	80086ea <_free_r+0x42>
 80086d8:	6821      	ldr	r1, [r4, #0]
 80086da:	1860      	adds	r0, r4, r1
 80086dc:	4283      	cmp	r3, r0
 80086de:	d1f3      	bne.n	80086c8 <_free_r+0x20>
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	1841      	adds	r1, r0, r1
 80086e6:	6021      	str	r1, [r4, #0]
 80086e8:	e7ee      	b.n	80086c8 <_free_r+0x20>
 80086ea:	001a      	movs	r2, r3
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <_free_r+0x4e>
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	d9f9      	bls.n	80086ea <_free_r+0x42>
 80086f6:	6811      	ldr	r1, [r2, #0]
 80086f8:	1850      	adds	r0, r2, r1
 80086fa:	42a0      	cmp	r0, r4
 80086fc:	d10b      	bne.n	8008716 <_free_r+0x6e>
 80086fe:	6820      	ldr	r0, [r4, #0]
 8008700:	1809      	adds	r1, r1, r0
 8008702:	1850      	adds	r0, r2, r1
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	4283      	cmp	r3, r0
 8008708:	d1e0      	bne.n	80086cc <_free_r+0x24>
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	1841      	adds	r1, r0, r1
 8008710:	6011      	str	r1, [r2, #0]
 8008712:	6053      	str	r3, [r2, #4]
 8008714:	e7da      	b.n	80086cc <_free_r+0x24>
 8008716:	42a0      	cmp	r0, r4
 8008718:	d902      	bls.n	8008720 <_free_r+0x78>
 800871a:	230c      	movs	r3, #12
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	e7d5      	b.n	80086cc <_free_r+0x24>
 8008720:	6821      	ldr	r1, [r4, #0]
 8008722:	1860      	adds	r0, r4, r1
 8008724:	4283      	cmp	r3, r0
 8008726:	d103      	bne.n	8008730 <_free_r+0x88>
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	1841      	adds	r1, r0, r1
 800872e:	6021      	str	r1, [r4, #0]
 8008730:	6063      	str	r3, [r4, #4]
 8008732:	6054      	str	r4, [r2, #4]
 8008734:	e7ca      	b.n	80086cc <_free_r+0x24>
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	20001e64 	.word	0x20001e64

0800873c <sbrk_aligned>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4e0f      	ldr	r6, [pc, #60]	; (800877c <sbrk_aligned+0x40>)
 8008740:	000d      	movs	r5, r1
 8008742:	6831      	ldr	r1, [r6, #0]
 8008744:	0004      	movs	r4, r0
 8008746:	2900      	cmp	r1, #0
 8008748:	d102      	bne.n	8008750 <sbrk_aligned+0x14>
 800874a:	f000 f8bf 	bl	80088cc <_sbrk_r>
 800874e:	6030      	str	r0, [r6, #0]
 8008750:	0029      	movs	r1, r5
 8008752:	0020      	movs	r0, r4
 8008754:	f000 f8ba 	bl	80088cc <_sbrk_r>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d00a      	beq.n	8008772 <sbrk_aligned+0x36>
 800875c:	2303      	movs	r3, #3
 800875e:	1cc5      	adds	r5, r0, #3
 8008760:	439d      	bics	r5, r3
 8008762:	42a8      	cmp	r0, r5
 8008764:	d007      	beq.n	8008776 <sbrk_aligned+0x3a>
 8008766:	1a29      	subs	r1, r5, r0
 8008768:	0020      	movs	r0, r4
 800876a:	f000 f8af 	bl	80088cc <_sbrk_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d101      	bne.n	8008776 <sbrk_aligned+0x3a>
 8008772:	2501      	movs	r5, #1
 8008774:	426d      	negs	r5, r5
 8008776:	0028      	movs	r0, r5
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	20001e68 	.word	0x20001e68

08008780 <_malloc_r>:
 8008780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008782:	2203      	movs	r2, #3
 8008784:	1ccb      	adds	r3, r1, #3
 8008786:	4393      	bics	r3, r2
 8008788:	3308      	adds	r3, #8
 800878a:	0006      	movs	r6, r0
 800878c:	001f      	movs	r7, r3
 800878e:	2b0c      	cmp	r3, #12
 8008790:	d232      	bcs.n	80087f8 <_malloc_r+0x78>
 8008792:	270c      	movs	r7, #12
 8008794:	42b9      	cmp	r1, r7
 8008796:	d831      	bhi.n	80087fc <_malloc_r+0x7c>
 8008798:	0030      	movs	r0, r6
 800879a:	f000 f8a9 	bl	80088f0 <__malloc_lock>
 800879e:	4d32      	ldr	r5, [pc, #200]	; (8008868 <_malloc_r+0xe8>)
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	001c      	movs	r4, r3
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	d12e      	bne.n	8008806 <_malloc_r+0x86>
 80087a8:	0039      	movs	r1, r7
 80087aa:	0030      	movs	r0, r6
 80087ac:	f7ff ffc6 	bl	800873c <sbrk_aligned>
 80087b0:	0004      	movs	r4, r0
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	d11e      	bne.n	80087f4 <_malloc_r+0x74>
 80087b6:	682c      	ldr	r4, [r5, #0]
 80087b8:	0025      	movs	r5, r4
 80087ba:	2d00      	cmp	r5, #0
 80087bc:	d14a      	bne.n	8008854 <_malloc_r+0xd4>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	0029      	movs	r1, r5
 80087c2:	18e3      	adds	r3, r4, r3
 80087c4:	0030      	movs	r0, r6
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	f000 f880 	bl	80088cc <_sbrk_r>
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	4283      	cmp	r3, r0
 80087d0:	d143      	bne.n	800885a <_malloc_r+0xda>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	3703      	adds	r7, #3
 80087d6:	1aff      	subs	r7, r7, r3
 80087d8:	2303      	movs	r3, #3
 80087da:	439f      	bics	r7, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	2f0c      	cmp	r7, #12
 80087e0:	d200      	bcs.n	80087e4 <_malloc_r+0x64>
 80087e2:	270c      	movs	r7, #12
 80087e4:	0039      	movs	r1, r7
 80087e6:	0030      	movs	r0, r6
 80087e8:	f7ff ffa8 	bl	800873c <sbrk_aligned>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d034      	beq.n	800885a <_malloc_r+0xda>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	19df      	adds	r7, r3, r7
 80087f4:	6027      	str	r7, [r4, #0]
 80087f6:	e013      	b.n	8008820 <_malloc_r+0xa0>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dacb      	bge.n	8008794 <_malloc_r+0x14>
 80087fc:	230c      	movs	r3, #12
 80087fe:	2500      	movs	r5, #0
 8008800:	6033      	str	r3, [r6, #0]
 8008802:	0028      	movs	r0, r5
 8008804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	1bd1      	subs	r1, r2, r7
 800880a:	d420      	bmi.n	800884e <_malloc_r+0xce>
 800880c:	290b      	cmp	r1, #11
 800880e:	d917      	bls.n	8008840 <_malloc_r+0xc0>
 8008810:	19e2      	adds	r2, r4, r7
 8008812:	6027      	str	r7, [r4, #0]
 8008814:	42a3      	cmp	r3, r4
 8008816:	d111      	bne.n	800883c <_malloc_r+0xbc>
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	6863      	ldr	r3, [r4, #4]
 800881c:	6011      	str	r1, [r2, #0]
 800881e:	6053      	str	r3, [r2, #4]
 8008820:	0030      	movs	r0, r6
 8008822:	0025      	movs	r5, r4
 8008824:	f000 f86c 	bl	8008900 <__malloc_unlock>
 8008828:	2207      	movs	r2, #7
 800882a:	350b      	adds	r5, #11
 800882c:	1d23      	adds	r3, r4, #4
 800882e:	4395      	bics	r5, r2
 8008830:	1aea      	subs	r2, r5, r3
 8008832:	429d      	cmp	r5, r3
 8008834:	d0e5      	beq.n	8008802 <_malloc_r+0x82>
 8008836:	1b5b      	subs	r3, r3, r5
 8008838:	50a3      	str	r3, [r4, r2]
 800883a:	e7e2      	b.n	8008802 <_malloc_r+0x82>
 800883c:	605a      	str	r2, [r3, #4]
 800883e:	e7ec      	b.n	800881a <_malloc_r+0x9a>
 8008840:	6862      	ldr	r2, [r4, #4]
 8008842:	42a3      	cmp	r3, r4
 8008844:	d101      	bne.n	800884a <_malloc_r+0xca>
 8008846:	602a      	str	r2, [r5, #0]
 8008848:	e7ea      	b.n	8008820 <_malloc_r+0xa0>
 800884a:	605a      	str	r2, [r3, #4]
 800884c:	e7e8      	b.n	8008820 <_malloc_r+0xa0>
 800884e:	0023      	movs	r3, r4
 8008850:	6864      	ldr	r4, [r4, #4]
 8008852:	e7a7      	b.n	80087a4 <_malloc_r+0x24>
 8008854:	002c      	movs	r4, r5
 8008856:	686d      	ldr	r5, [r5, #4]
 8008858:	e7af      	b.n	80087ba <_malloc_r+0x3a>
 800885a:	230c      	movs	r3, #12
 800885c:	0030      	movs	r0, r6
 800885e:	6033      	str	r3, [r6, #0]
 8008860:	f000 f84e 	bl	8008900 <__malloc_unlock>
 8008864:	e7cd      	b.n	8008802 <_malloc_r+0x82>
 8008866:	46c0      	nop			; (mov r8, r8)
 8008868:	20001e64 	.word	0x20001e64

0800886c <_realloc_r>:
 800886c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800886e:	0007      	movs	r7, r0
 8008870:	000e      	movs	r6, r1
 8008872:	0014      	movs	r4, r2
 8008874:	2900      	cmp	r1, #0
 8008876:	d105      	bne.n	8008884 <_realloc_r+0x18>
 8008878:	0011      	movs	r1, r2
 800887a:	f7ff ff81 	bl	8008780 <_malloc_r>
 800887e:	0005      	movs	r5, r0
 8008880:	0028      	movs	r0, r5
 8008882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008884:	2a00      	cmp	r2, #0
 8008886:	d103      	bne.n	8008890 <_realloc_r+0x24>
 8008888:	f7ff ff0e 	bl	80086a8 <_free_r>
 800888c:	0025      	movs	r5, r4
 800888e:	e7f7      	b.n	8008880 <_realloc_r+0x14>
 8008890:	f000 f83e 	bl	8008910 <_malloc_usable_size_r>
 8008894:	9001      	str	r0, [sp, #4]
 8008896:	4284      	cmp	r4, r0
 8008898:	d803      	bhi.n	80088a2 <_realloc_r+0x36>
 800889a:	0035      	movs	r5, r6
 800889c:	0843      	lsrs	r3, r0, #1
 800889e:	42a3      	cmp	r3, r4
 80088a0:	d3ee      	bcc.n	8008880 <_realloc_r+0x14>
 80088a2:	0021      	movs	r1, r4
 80088a4:	0038      	movs	r0, r7
 80088a6:	f7ff ff6b 	bl	8008780 <_malloc_r>
 80088aa:	1e05      	subs	r5, r0, #0
 80088ac:	d0e8      	beq.n	8008880 <_realloc_r+0x14>
 80088ae:	9b01      	ldr	r3, [sp, #4]
 80088b0:	0022      	movs	r2, r4
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d900      	bls.n	80088b8 <_realloc_r+0x4c>
 80088b6:	001a      	movs	r2, r3
 80088b8:	0031      	movs	r1, r6
 80088ba:	0028      	movs	r0, r5
 80088bc:	f7ff fed7 	bl	800866e <memcpy>
 80088c0:	0031      	movs	r1, r6
 80088c2:	0038      	movs	r0, r7
 80088c4:	f7ff fef0 	bl	80086a8 <_free_r>
 80088c8:	e7da      	b.n	8008880 <_realloc_r+0x14>
	...

080088cc <_sbrk_r>:
 80088cc:	2300      	movs	r3, #0
 80088ce:	b570      	push	{r4, r5, r6, lr}
 80088d0:	4d06      	ldr	r5, [pc, #24]	; (80088ec <_sbrk_r+0x20>)
 80088d2:	0004      	movs	r4, r0
 80088d4:	0008      	movs	r0, r1
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	f7f8 fd2e 	bl	8001338 <_sbrk>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d103      	bne.n	80088e8 <_sbrk_r+0x1c>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d000      	beq.n	80088e8 <_sbrk_r+0x1c>
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	20001e6c 	.word	0x20001e6c

080088f0 <__malloc_lock>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4802      	ldr	r0, [pc, #8]	; (80088fc <__malloc_lock+0xc>)
 80088f4:	f000 f814 	bl	8008920 <__retarget_lock_acquire_recursive>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	20001e70 	.word	0x20001e70

08008900 <__malloc_unlock>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4802      	ldr	r0, [pc, #8]	; (800890c <__malloc_unlock+0xc>)
 8008904:	f000 f80d 	bl	8008922 <__retarget_lock_release_recursive>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	20001e70 	.word	0x20001e70

08008910 <_malloc_usable_size_r>:
 8008910:	1f0b      	subs	r3, r1, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	1f18      	subs	r0, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	da01      	bge.n	800891e <_malloc_usable_size_r+0xe>
 800891a:	580b      	ldr	r3, [r1, r0]
 800891c:	18c0      	adds	r0, r0, r3
 800891e:	4770      	bx	lr

08008920 <__retarget_lock_acquire_recursive>:
 8008920:	4770      	bx	lr

08008922 <__retarget_lock_release_recursive>:
 8008922:	4770      	bx	lr

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr
